<?xml version="1.0" encoding="utf-8"?> <?xml-stylesheet type="text/xml" href="/blog/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="fr"> <generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://www.monkeypatch.io/blog/feed.xml" rel="self" type="application/atom+xml"/><link href="http://www.monkeypatch.io/" rel="alternate" type="text/html" hreflang="fr"/> <updated>2017-01-12T16:18:26+01:00</updated> <id>http://www.monkeypatch.io/</id><title>MonkeyPatch - Expertise Informatique</title> <subtitle>Société de conseil et d'expertise en informatique spécialisée dans les nouvelles technologies.</subtitle> <entry xml:lang="fr"><title>Devoxx Belgium</title><link href="http://www.monkeypatch.io/2016/11/27/Devoxx-Belgium.html" rel="alternate" type="text/html" title="Devoxx Belgium"/> <published>2016-11-27T00:00:00+01:00</published> <updated>2016-11-27T00:00:00+01:00</updated><id>http://www.monkeypatch.io/2016/11/27/Devoxx-Belgium</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/11/27/Devoxx-Belgium.html">&lt;h2 id="welcome-to-antwerp-anvers"&gt;Welcome to Antwerp (Anvers)&lt;/h2&gt;&lt;p&gt;A peine remis du &lt;a href="https://devfesttoulouse.fr/"&gt;DevFest Toulouse&lt;/a&gt;, je pars une semaine en Belgique pour aller à &lt;a href="https://devoxx.be/"&gt;Devoxx&lt;/a&gt;. Pour ceux qui ne connaissent pas encore Devoxx, c’est une conférence indépendante : elle n’est organisée ni par Google ni par Oracle. Cela dit ils étaient présent en temps que sponsors et speakers. C’est la plus grosse conférence auquel j’ai assisté (3500 développeurs), c’est pas tous les jours qu’on a l’occasion de croiser des &lt;a href="http://cfp.devoxx.be/2016/speaker/brian_goetz"&gt;Brian Goetz&lt;/a&gt;, &lt;a href="http://cfp.devoxx.be/2016/speaker/venkat_subramaniam"&gt;Venkat Subramaniam&lt;/a&gt;, … en Europe. &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;Devoxx Belgique c’est aussi un peu la mère de toutes les conférences Devoxx et Voxxed qui se sont créées ces dernières années (France, Maroc, US, Pologne, …). C’est aussi la bataille des buzzwords, a votre avis qui est le perdant parmis: Docker, MicroServices, JEE, Programation Reactive ?&lt;/p&gt;&lt;p&gt;La conférence a lieu dans un complexe cinéma, on a donc des grandes salles, les écrans qui vont avec, et des fauteuils super confortables. Coté boissons les soda, jus d’orange, … sont open-bar; du coup il y a la queue aux toilettes. Les repas ne sont pas terribles (sandwich bof), c’est sur qu’en France les conférences sont particulièrement attentive aux repas; a noté tout de même la soirée bières-frites, un moment parfais pour d’échangé sur des thèmes divers (Merci Pivotal pour les bières). On aura aussi le droit à une séance de ciné pour aller voir “Snowden”, séance que j’ai esquivé pour aller manger en ville avec quelques Toulousaing.&lt;/p&gt;&lt;p&gt;Chose génial, les vidéos sont uploadés sur Youtube dès le lendemain, vous pouvez donc les trouvées sur &lt;a href="https://www.youtube.com/playlist?list=PLRsbF2sD7JVq_TvmCyJC3-oT9nBGdwq6s"&gt;Youtube&lt;/a&gt;. Par exemple vous avez une playlist avec les &lt;a href="https://www.youtube.com/playlist?list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB"&gt;présentations les mieux notées&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Ici c’est impossible de vous faire un compte rendu détaillé de toutes les conférences auxquelles j’ai assisté, donc je vais juste détailler quelques thématiques que j’ai particulièrement suivies.&lt;/p&gt;&lt;h2 id="java-maintenant"&gt;Java maintenant&lt;/h2&gt;&lt;p&gt;Lors de plusieurs conférences il y a eu des sondages à main lever pour savoir quelle version du JDK était utilisée, presque tout le monde est sur Java 8, ceux qui sont en dessous sont souvent lié à Android, cela dit on peu combler une partie du déficit avec &lt;a href="https://github.com/orfjackal/retrolambda"&gt;RetroLambda&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;La version 8 du langage apporte une touche de programmation fonctionnelle dans Java, ce qui ouvrent de nouvelles portes. J’encourage fortement les équipes de développeurs à se poser la question : ‘Comment ferait-on ça proprement à la mode Java 8 ?’ pendant leurs phases de conceptions, refactoring et dans les revues de codes.&lt;/p&gt;&lt;p&gt;Aujourd’hui les designs patterns classiques (GoF par ex.) sont généralement obsolètes avec l’arrivé de cette nouvelle façon de développer, on y gagne tellement en terme de lisibilité, compacité, maintenabilité, testabilité. Attention toutefois à faire au maximum des fonctions pures (sans effet de bords).&lt;/p&gt;&lt;p&gt;Cela dit il y a encore une lourdeurs ou certains manques dans les API (e.g. il manque les tuples, &lt;code class="highlighter-rouge"&gt;flatMap&lt;/code&gt; et &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt;), et on peut espérer que ces points soit améliorés dans le futures (voir plus bas).&lt;/p&gt;&lt;p&gt;Voici quelques présentations intéressantes:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Rmer37g9AZM"&gt;g∘f patterns (Mario Fusco)&lt;/a&gt; : une revisite des patterns du GoF à l’aune des lambas et des &lt;code class="highlighter-rouge"&gt;@FunctionalInterface&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ej0sss6cq14"&gt;Optional - The Mother of All Bikesheds (Stuart Marks)&lt;/a&gt;: un point sur cette classe controversé du JDK. La bonne nouvelle on va pouvoir faire du &lt;code class="highlighter-rouge"&gt;flatMap&lt;/code&gt; plus facilement avec les &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; dans le JDK 9.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=b8YX45ymAeE"&gt;Java Collections: The Force Awakens (Raoul-Gabriel Urma and Richard Warburton)&lt;/a&gt; : un point sur les collections en Java. C’est une excellente révision sur cette API indispensable à maitriser.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NcetKbGayZY&amp;amp;index=7&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB"&gt;Refactoring to Java 8 (Trisha Gee)&lt;/a&gt;: beaucoup d’exemple de refactoring, avec les impacts sur les performances.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Vous trouverez bien sûr d’autres présentations sur le sujet, par exemple il y a eu deux talks parlant de &lt;a href="http://www.javaslang.io/"&gt;JavaSlang&lt;/a&gt; qui porte beaucoup d’éléments de &lt;a href="http://www.scala-lang.org/"&gt;Scala&lt;/a&gt; dans Java comme par exemple le PatternMatching.&lt;/p&gt;&lt;p&gt;D’autres présentations sont plus dans l’esprit ‘BrainFucking’, je trouve ça amusant quand ça reste à petite dose:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bhSBpNXwa60"&gt;It’s Java Jim, But Not As We Know It (Simon Ritter)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tSbK3A9QMmI"&gt;Lambda Puzzlers by Peter Lawrey&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="java-demain"&gt;Java demain&lt;/h2&gt;&lt;p&gt;Je me suis aussi beaucoup tournez vers les présentations qui parlaient de Java 9, et des éventuelles nouveautés que l’on verra (peut-être) dans les versions postérieurs du langage. Les architectes du langage qui avaient fait le déplacement cette année, c’est toujours marrant de les voir se serrés sur une petite table au resto, alors qu’on avait profité de la grande (premier arriver, premier servie).&lt;/p&gt;&lt;p&gt;On a d’abort eu le droit d’une présentation de Java 9, ainsi que du projet &lt;a href="http://openjdk.java.net/projects/valhalla/"&gt;Valhalla&lt;/a&gt; et du projet &lt;a href="http://openjdk.java.net/projects/panama/"&gt;Panama&lt;/a&gt; lors de la Keynote d’Oracle, c’est un excellent résumé concernant le future de Java: &lt;a href="https://www.youtube.com/watch?v=e9eSPtpiGkA"&gt;Keynote Session (Mark Reinhold and Brian Goetz)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;En gros il y a beaucoup de ‘petites’ modifications internes dans Java 9, mais il y a surtout &lt;a href="http://openjdk.java.net/projects/jigsaw/"&gt;Jigsaw&lt;/a&gt; qui apporte la modularité. J’ai évité ce sujet que j’avais déjà pas mal suivit auparavant. Je pense que la modularité va apporter quelque chose d’indispensable en Java pour ne pas être trop vite distancé par les nouveaux langages systèmes comme &lt;a href="http://swift.org/"&gt;Swift&lt;/a&gt; ou &lt;a href="https://www.rust-lang.org/fr/"&gt;Rust&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;J’ai quand même un peu peur que ce JDK prennent plus de temps que Java 8 à être adopter; l’avenir nous le dira. Maven est plutôt bon dans la compatibilité avec Java 9, c’est plutôt rassurant.&lt;/p&gt;&lt;p&gt;Autre nouveauté dans Java 9, l’arrivée d’un REPL: JShell. C’est assez intéressant, mais j’ai tellement pris l’habitude de m’en passer, qu’il va me falloir du temps pour trouver les usages au quotidien.&lt;/p&gt;&lt;p&gt;Je suis aussi aller voir la présentation sur le nouveau client HTTP/2 (JEP 110), là j’ai été un peu déçu car il est possible que ce soit considéré en ‘incubation’ pour Java 9. J’espère que nous aurons une bonne surprise. l’usage du &lt;code class="highlighter-rouge"&gt;CompletableFuture&lt;/code&gt; est bienvenue pour les aspects asynchrone.&lt;/p&gt;&lt;p&gt;Et après Java 9, que va t’il se passer ? Les speakers d’Oracle sont très prudents sur les nouveautés qui sont présentées, il est tout à fait possible qu’elles soient différentes voir abandonnées par la suite. Voici une liste de ceux qui pourraient arrivé (on parle pour Java &amp;gt; 9):&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Meilleur inférence de type, on pourrait voir des chose comme ça: &lt;code class="highlighter-rouge"&gt;var url = new URL("...");&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Data Classes pour faire des trucs comme &lt;code class="highlighter-rouge"&gt;class Point(int x, int y){}&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Un meilleur switch qui se rapprochera a du Pattern Matching, on pourrait voir les choses arrivées progressivement, d’autant plus avec les Data Classes.&lt;/li&gt; &lt;li&gt;&lt;a href="http://openjdk.java.net/projects/valhalla/"&gt;Valhalla&lt;/a&gt; étudie la possibilité d’une nouvelle organisation de la mémoire pour des données. Disons plus simplement ça correspondrait à la notion de Value Class. Ces objets serait passés par valeur (pas par référence) ce qui donnerait “Codes like a class, works like an int”. En gros ça permettrait aussi de faire des &lt;code class="highlighter-rouge"&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;. Ce serait une énorme évolution dans le langage, j’ai beaucoup d’espoir sur cet évolution. Maintenant il ne faudrait pas que ça arrive trop tard par rapport aux nouveaux langages.&lt;/li&gt; &lt;li&gt;&lt;a href="http://openjdk.java.net/projects/panama/"&gt;Panama&lt;/a&gt; est un reboot pour faire des appels à du code native. L’idée c’est de faire plus simple, plus sure, et plus rapide, la démo est fun.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;On retrouve beaucoup de choses qui sont sont déjà présentes dans des langages, j’y vois personnellement une excuse pour étudier ces langages, et pouvoir être à l’aise lorsqu’on aura ces features dans Java.&lt;/p&gt;&lt;p&gt;Voici une sélection de présentations, pour celles qui concernent Jigsaw et la modularité je vous laisse chercher.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=e9eSPtpiGkA"&gt;Keynote Session (Mark Reinhold and Brian Goetz)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8XmYT89fBKg&amp;amp;list=PLRsbF2sD7JVq_TvmCyJC3-oT9nBGdwq6s&amp;amp;index=43"&gt;Exploring Java 9 (Venkat Subramaniam)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oGll155-vuQ&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=9"&gt;Java Language and Platform Futures: A Sneak Peek (Brian Goetz)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=53RcDiKb6Ls"&gt;Java9 and the impact on Maven Projects (Robert Scholte)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=96vce1qd0QY&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=38"&gt;Anticipating Java 9 - Functionality and Tooling (Trisha Gee)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="programation-ractive"&gt;Programation réactive&lt;/h2&gt;&lt;p&gt;Dernière grand thématique que j’ai suivi: la programmation réactive. C’est un sujet chaud, il y avait pas mal de présentations concernant de près ou de loin ce sujet. Tout d’abort il faut noter qu’ avec Java 8, les API sont beaucoup plus agréable à utiliser, ensuite les &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; arrive dans Java 9 avec la classe &lt;a href="http://download.java.net/java/jdk9/docs/api/java/util/concurrent/Flow.html"&gt;&lt;code class="highlighter-rouge"&gt;Flow&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Aujour’hui, &lt;a href="http://akka.io/"&gt;Akka Stream 2&lt;/a&gt;, &lt;a href="https://projectreactor.io/"&gt;Reactor Core 3&lt;/a&gt; et &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava 2&lt;/a&gt; impléménent les Reactives Streams sur la JVM.&lt;/p&gt;&lt;p&gt;Pour une excellent introduction sur le sujet je vous recommande l’université &lt;a href="https://www.youtube.com/watch?v=weWSYIUdX6c&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=4"&gt;Reactive Programming (Venkat Subramaniam)&lt;/a&gt; qui prends le temps pour présenter le concept de la programmation réactive, puis montre beaucoup de code avec RxJava pour montrer: les observables, l’asynchronisme, la gestion des erreurs, les opérateurs sur les Observables, la notion d’observable chaud ou froid, le principe de backpressure. Le backpressure c’est quand votre émetteur va plus vite que le consommateur, c’est quelque chose qui a mis du temps à être simple et proprement implémenté dans les API.&lt;/p&gt;&lt;p&gt;J’ai aussi beaucoup apprécié l’université &lt;a href="https://www.youtube.com/watch?v=Cj4foJzPF80&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=37&amp;amp;t=3s"&gt;Developing Reactive applications with Reactive Streams and Java 8 (Brian Clozel, Sébastien Deleuze)&lt;/a&gt; qui présente &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactore Core 3&lt;/a&gt; dans la première partie au travers de test unitaires. Je suis très agréablement surpris par la testabilité qu’apporte le &lt;code class="highlighter-rouge"&gt;StepVerifier&lt;/code&gt;. Dans la seconde partie, une démonstration de Spring Boot 2, avec Spring Framework 5 montre comment on peut passer en réactive coté backend. Très intéressant, j’attends avec impatiance la version ‘production-ready’ de ces projets.&lt;/p&gt;&lt;p&gt;Je n’ai pas encore eu le temps de regarder &lt;a href="https://www.youtube.com/watch?v=rdgJ8fOxJhc&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=29"&gt;Reactive Web Applications with Spring 5 (Rossen Stoyanchev)&lt;/a&gt;, mais j’ai eu de bon retour.&lt;/p&gt;&lt;p&gt;Sinon il y avait aussi des présentations concernant &lt;a href="http://vertx.io/"&gt;Vert.x&lt;/a&gt;, Akka Streams, …&lt;/p&gt;&lt;p&gt;Ceux qui me connaissent savent que je suis très intéressé par ce sujet, on prévoit un &lt;a href="https://www.meetup.com/fr-FR/Monkey-Tech-Days/events/232103376/"&gt;MonkeyTechDay&lt;/a&gt; en début d’année sur le sujet.&lt;/p&gt;&lt;h2 id="autres-sujets"&gt;Autres sujets&lt;/h2&gt;&lt;p&gt;Bien sur le Machine Learning, et les sujet Devops étaient très bien représenté dans les conférences. Je rattraperais ça avec les vidéos. Je suis aussi aller voir d’autres sujets, je vous fait une petite listes de ce que j’ai trouvé sympa.&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3eOFCn5COvc&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=16"&gt;Zen &amp;amp; The Art of Angular 2 (Igor Minar)&lt;/a&gt;: j’aime bien Angular2, je n’ai pas beaucoup appris, mais c’est sympa d’avoir un des créateurs sur scène.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1oKlYgsnyfw&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB&amp;amp;index=3"&gt;Make CSS Fun Again with Flexbox! (Hubert Sablonnière)&lt;/a&gt;: un des meilleurs speaker français.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UHN_HcjZa7o&amp;amp;index=21&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB"&gt;Deep Dive into JUnit 5 (Sam Brannen)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jSY3n_h7JV0"&gt;Swift: the mobile language that’s coming to the cloud (Ian Partridge)&lt;/a&gt; : la présentation n’est pas exceptionnelle, mais je suis assez intéresser par le langage coté Backend.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=03GsLxVdVzU&amp;amp;index=33&amp;amp;list=PLRsbF2sD7JVrP_MJaOWvaK9-OTNX2oFwB"&gt;Designing for Performance by Martin Thompson&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Encore une super semaine, j’ai encore appris plein de choses, eu de super échanges, plein d’envie. Il faut toutefois un peu de temps pour digérer et laisser décanter tout cela (et faire mon compte rendu). Donc merci encore à tous les organisateurs, bénévoles, speaker, et tous les gens sympa avec qui j’ai eu l’occasion d’échanger ou de partager une bière.&lt;/p&gt;&lt;h2 id="pour-finir-quelques-photos"&gt;Pour finir quelques photos&lt;/h2&gt;&lt;p&gt;Fier d’être speaker :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/Speaker.jpg" alt="Speaker" /&gt;&lt;/p&gt;&lt;p&gt;Igor Minar nous parle d’Angular2 :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/ng2.jpg" alt="Angular2" /&gt;&lt;/p&gt;&lt;p&gt;Venkat et ces citations :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/VenkatQuote.jpg" alt="Venkat" /&gt;&lt;/p&gt;&lt;p&gt;Brian Goetz nous parle de Java &amp;gt; 9 avec un slide de JavaOne 2005&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/BrianGoetz.jpg" alt="BrianGoetz" /&gt;&lt;/p&gt;&lt;p&gt;CSS is Awesome ! :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/css.jpg" alt="CSS" /&gt;&lt;/p&gt;&lt;p&gt;Bonne ambiance lors du Speaker Diner :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/SpeakerDiner.jpg" alt="Speaker Diner" /&gt;&lt;/p&gt;&lt;p&gt;Interview très sérieuse avec Ray Tsang :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/RayTsang.jpg" alt="RayTsang" /&gt;&lt;/p&gt;&lt;p&gt;Une pythie pour un mauvais Oracle :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/Antonio.jpg" alt="Antonio" /&gt;&lt;/p&gt;&lt;p&gt;Swift coté backend :&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/SwiftBackend.jpg" alt="Swift" /&gt;&lt;/p&gt;&lt;p&gt;Enfin lorsqu’il qu’il fait froid, et qu’il pleut, il y a toujours une solution en Belgique pour se réconfornter:&lt;/p&gt;&lt;p&gt;&lt;img src="/public/images/DevoxxBE16/be.jpg" alt="Reconford" /&gt;&lt;/p&gt;</content> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="Devoxx"/> <category term="Java"/> <category term="Reactive"/> <category term="functional"/> <summary>Welcome to Antwerp (Anvers)A peine remis du DevFest Toulouse, je pars une semaine en Belgique pour aller à Devoxx. Pour ceux qui ne connaissent pas encore Devoxx, c’est une conférence indépendante : elle n’est organisée ni par Google ni par Oracle. Cela dit ils étaient présent en temps que sponsors et speakers. C’est la plus grosse conférence auquel j’ai assisté (3500 développeurs), c’est pas tous les jours qu’on a l’occasion de croiser des Brian Goetz, Venkat Subramaniam, … en Europe.</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://devoxx.be/wp-content/uploads/2016/04/devoxx_logo.gif"/> </entry> <entry xml:lang="fr"><title>Devfest Toulouse</title><link href="http://www.monkeypatch.io/2016/11/06/DevFest-Toulouse.html" rel="alternate" type="text/html" title="Devfest Toulouse"/> <published>2016-11-06T00:00:00+01:00</published> <updated>2016-11-06T00:00:00+01:00</updated><id>http://www.monkeypatch.io/2016/11/06/DevFest-Toulouse</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/11/06/DevFest-Toulouse.html">&lt;h2 id="retours-sur-le-devfest-toulouse"&gt;Retours sur le DevFest Toulouse&lt;/h2&gt;&lt;p&gt;Jeudi 03 novembre 2016 a eu lieu le premier DevFest Toulouse (techniquement c’était à l’IUT Blagnac), une journée de conférence à prix très abordable (30€ seulement), le panel de speakers était assez varié: des Toulousaing, des Français, et quelques internationaux. Toutes les personnes avec qui j’ai eu l’occasion de discuter ont trouvé le niveau des conférences très bon. C’est aussi mon point de vue.&lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;Pour moi le DevFest a commencé par un super repas mercredi soir avec les speakers et organisateurs. La journée de conférences a débuté le jeudi par un café+chocolatine.&lt;/p&gt;&lt;h3 id="le-matin"&gt;Le matin&lt;/h3&gt;&lt;h4 id="keynote"&gt;Keynote&lt;/h4&gt; &lt;p&gt;Nous avions tous rendez dans le grand amphi pour une keynote d’&lt;a href="https://twitter.com/danvy?lang=fr"&gt;Alex Danvy&lt;/a&gt; (Microsoft, France). Alex est un très bon orateur, il nous a parlé de l’évolution de notre métier de développeur. C’est souvent dans ce genre d’occasion que l’on peut prendre du recul sur notre travail. Aujourd’hui le développeur est un devenu très social, comme le démontre la richesse des communautés sur Toulouse. C’est assez éloigné du stéréotype que l’on voit dans les médias, ceci nuit à la mixité de la profession: un des grands enjeux de demain. Voici les &lt;a href="http://www.slideshare.net/danvy/a-developer-story"&gt;slides&lt;/a&gt;.&lt;/p&gt;&lt;h4 id="clean-code"&gt;Clean Code&lt;/h4&gt; &lt;p&gt;Ensuite j’ai enchainé par la présentation d’&lt;a href="https://twitter.com/avernois?lang=fr"&gt;Antoine Vernois&lt;/a&gt; sur le &lt;a href="http://avernois.github.io/prez-clean_code/#/"&gt;‘Clean Code’&lt;/a&gt;. J’aime beaucoup sa vision, j’y retrouve beaucoup de chose que je souhaite voir appliquer au quotidien. Parmi les choses sympa que j’ai envie de retenir: “si tu ne comprends pas la magie noire derrière un Framework, tu ne l’utilises pas”. Combien de projets j’ai vu échouer à cause du manque de compréhension d’un Framework…&lt;/p&gt;&lt;h4 id="sharing-code-between-web-and-native-apps"&gt;Sharing Code Between Web and Native Apps&lt;/h4&gt; &lt;p&gt;Puis j’ai assisté au début de la conférence de &lt;a href="https://twitter.com/sebawita"&gt;Sebastian Witalec&lt;/a&gt; sur le &lt;a href="https://www.nativescript.org/"&gt;NativeScript&lt;/a&gt;. J’avais déjà assisté la veille à sa présentation dans le cadre d’Angular Toulouse. NativeScript est une solution pour développer en JavaScript, mais en particulier avec Angular2, et produire du code natif qui s’exécute sur les plateformes Android ou iOS. Le concept est séduisant, et cette présentation m’a donnée envie de creuser plus en profondeur le sujet. C’est aussi l’occasion de souligner qu’Angular2 est vraiment bien pensé pour être un framework qui ne s’exécute pas uniquement dans le navigateur.&lt;/p&gt;&lt;p&gt;Je ne suis pas resté jusqu’au bout puisque j’enchainais avec ma présentation sur Feign et j’avais besoin d’un café avant de faire mon live-coding.&lt;/p&gt;&lt;h4 id="client-rest-en-java-trop-facile-avec-feign-"&gt;Client REST en Java: trop facile avec Feign !&lt;/h4&gt; &lt;p&gt;J’ai profité de cette présentation pour aller beaucoup plus loin que dans mes précédentes démos: j’ai montré comment on passait en asynchrone et le mécanisme de Circuit Breaker avec Hystrix, et puis j’ai montré comment on pouvait faire une implémentation d’un &lt;code class="highlighter-rouge"&gt;feign.Client&lt;/code&gt; avec la nouvelle API HTTP de Java 9. Voici mes &lt;a href="https://ilaborie.github.io/devfest-toulouse-16-slides/"&gt;slides&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Après les questions et les nombreux échanges autour de ma présentation, un repas était bien mérité. C’est la première conférence auquel j’assiste ou il y avait du vin (bon en plus) pendant le repas de midi: +1.&lt;/p&gt;&lt;h4 id="laprs-midi"&gt;L’après midi&lt;/h4&gt;&lt;h4 id="les-acteurs-un-modle-pour-dompter-le-paralllisme"&gt;Les Acteurs, un modèle pour dompter le parallélisme&lt;/h4&gt; &lt;p&gt;Ensuite je suis allé voir &lt;a href="https://twitter.com/fcabestre?lang=fr"&gt;Frédéric Cabestre&lt;/a&gt; qui nous a parlé du modèle des Acteurs comme solution pour le parallélisme. Il a amené la chose en partant de loin: les aspects hardwares, en parlant ensuite des solutions threaded-pool, et event-loop avant de nous présenter les aspects haut niveau sur les acteurs. Il manquait un peu de temps sur la fin, mais la présentation était super didactique.&lt;/p&gt;&lt;h4 id="break"&gt;Break&lt;/h4&gt; &lt;p&gt;Ensuite, j’ai eu un coup de barre : fatigue accumulée pendant la semaine, et peut être aussi le retour de bâton du vin de midi. J’ai profité de cette pause pour échanger avec Fabien, Mathias, Frédéric, Antoine, Didier, … C’est un des points que je trouve le plus intéressant quand on va dans des conférences, il y a plein de gens intelligents, passionnés avec lesquels on peut confronter ou conforter nos points de vue.&lt;/p&gt;&lt;h4 id="android-et-programmation-ractive---rxjava"&gt;Android et programmation réactive - RxJava&lt;/h4&gt; &lt;p&gt;Après je suis aller voir &lt;a href="https://twitter.com/eli_bean"&gt;Elisabel Généreux&lt;/a&gt; qui nous a parlé de l’utilisation de &lt;a href="reactivex.io"&gt;Rx&lt;/a&gt; dans le contexte Android. Le sujet est particulièrement à la mode et sa présentation m’a confirmé que Rx au sens large est vraiment un sujet qu’il faut étudier. Notez qu’il y a des déclinaisons pour pleins de langages, et que l’on peut en retrouver coté backend (par exemple RxNetty), ou coté frontend (RxAndroid, RxSwift, RxJS). On sentait qu’Elisabel était novice dans l’exercice des présentations, j’en profite pour lui envoyer des encouragements, j’ai mis plusieurs années avant de me sentir à l’aise, et de trouver mon style.&lt;/p&gt;&lt;h4 id="de-java--swift-en-deux-temps-trois-mouvements"&gt;De Java à Swift en deux temps trois mouvements&lt;/h4&gt; &lt;p&gt;J’ai fini en beauté avec la présentation de &lt;a href="https://twitter.com/dplaindoux"&gt;Didier Plaindoux&lt;/a&gt; qui nous a parlé de &lt;a href="https://swift.org/"&gt;Swift&lt;/a&gt; pour les développeurs Java (pas d’iOS). Didier est un développeur passionné par les langages informatiques, et ça se sent dans sa présentation. En plus il a fait un effort pour rendre la présentation accessible aux plus grands nombres. Bilan, Swift me plait beaucoup, je retrouve des choses que j’aime dans Scala ou TypeScript. J’ai hâte de trouver une occasion pour tester ce langage. Voici les &lt;a href="http://www.slideshare.net/dplaindoux/de-java-a-swift-en-2-temps-trois-mouvements"&gt;slides&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;La journée s’est achevé par un AfterWork en ville, super tapas, de nombreuses discussions intéressantes, y compris sur des sujets hors informatique.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Quelques petits points qui me semblent améliorables pour les événements futures :&lt;/p&gt;&lt;ul&gt; &lt;li&gt;j’ai trouvé que l’espace entre les amphis était un peu petit, il était difficile de circuler,&lt;/li&gt; &lt;li&gt;le temps entre les présentations était trop court, impossible d’échanger dans ces moments, ça a été un peu la course,&lt;/li&gt; &lt;li&gt;d’ailleurs je n’ai pas eu assez de temps pour aller discuter avec les sponsors.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Mais globalement, j’ai vraiment été bluffé par le professionnalisme de cette conférence, c’est particulièrement notable pour une première. J’en profite pour remercier les organisateurs, les bénévoles, les sponsors, les speakers, et toutes personnes qui ont été impliquées dans la tenue de cet événement.&lt;/p&gt;&lt;p&gt;A l’an prochain, en espérant qu’il y ait 2 jours d’échanges et conférences.&lt;/p&gt;</content> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="DevFest"/> <category term="Java"/> <category term="Android"/> <category term="Swift"/> <category term="Rx"/> <category term="Acteur"/> <category term="NativeScript"/> <category term="Angular2"/> <category term="Feign"/> <summary>Retours sur le DevFest ToulouseJeudi 03 novembre 2016 a eu lieu le premier DevFest Toulouse (techniquement c’était à l’IUT Blagnac), une journée de conférence à prix très abordable (30€ seulement), le panel de speakers était assez varié: des Toulousaing, des Français, et quelques internationaux. Toutes les personnes avec qui j’ai eu l’occasion de discuter ont trouvé le niveau des conférences très bon. C’est aussi mon point de vue.</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://devfesttoulouse.fr/images/logo-white.svg"/> </entry> <entry xml:lang="fr"><title>Mktd#1 Feign Vs Retrofit : 2 Aller Plus Loin</title><link href="http://www.monkeypatch.io/2016/08/10/MKTD-1-feign-vs-retrofit-&-58;-2-aller-plus-loin.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 2 Aller Plus Loin"/> <published>2016-08-10T00:00:00+02:00</published> <updated>2016-08-10T00:00:00+02:00</updated><id>http://www.monkeypatch.io/2016/08/10/MKTD#1-feign-vs-retrofit-&amp;#58;-2-aller-plus-loin</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/08/10/MKTD-1-feign-vs-retrofit-&amp;-58;-2-aller-plus-loin.html">&lt;p&gt;Cet article est le deuxième d’une série de trois articles sur les clients &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; en java que sont Feign et Retrofit.&lt;/p&gt;&lt;p&gt;Article précédent : &lt;a href="/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;amp;-58;-1-prise-en-main.html"&gt;&lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt;#1 : Prise en main&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="dfi-2-aller-plus-loin"&gt;Défi 2: Aller plus loin…&lt;/h2&gt;&lt;p&gt;Le deuxième défi permet d’adresser des problèmes plus avancés comme :&lt;/p&gt;&lt;ul&gt; &lt;li&gt;L’authentification&lt;/li&gt; &lt;li&gt;La gestion des erreurs via des &lt;code class="highlighter-rouge"&gt;Exception&lt;/code&gt; Java&lt;/li&gt; &lt;li&gt;L’&lt;em&gt;upload&lt;/em&gt; et le &lt;em&gt;download&lt;/em&gt; de fichiers&lt;/li&gt; &lt;/ul&gt;&lt;!--more--&gt;&lt;h3 id="authentification-avec-cookie"&gt;Authentification avec Cookie&lt;/h3&gt;&lt;p&gt;Afin de gérer le besoin d’authentification, le serveur fournit un mécanisme à base de &lt;a href="https://jwt.io/"&gt;&lt;abbr title="Json WebToken"&gt;JWT&lt;/abbr&gt;&lt;/a&gt; et de &lt;a href="https://tools.ietf.org/html/rfc6265"&gt;Cookies&lt;/a&gt;. Voici l’interface Java décrivant cette nouvelle opération:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginPassword&lt;/span&gt; &lt;span class="n"&gt;loginPassword&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Dans l’en-tête de la réponse &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; se trouve un &lt;code class="highlighter-rouge"&gt;Set-Cookie&lt;/code&gt; qu’il faut décoder. Ce &lt;em&gt;cookie&lt;/em&gt; doit ensuite être envoyé dans les requêtes faites aux autres services.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Les solutions à base de &lt;em&gt;token&lt;/em&gt; sont un peu plus simples à mettre en oeuvre avec Feign et Retrofit, mais ici, l’objectif n’est pas de faire les choses de la façon la plus simples. Pour plus d’information sur ce sujet vous pouvez regarder &lt;a href="https://auth0.com/blog/angularjs-authentication-with-cookies-vs-token/"&gt;ce blog&lt;/a&gt;.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="gestion-des-erreurs"&gt;Gestion des erreurs&lt;/h3&gt;&lt;p&gt;Pour la gestion des erreurs, le but de l’exercice est de renvoyer une erreur spécifique en fonction du code &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; retourné par le serveur. Le code qui détermine l’exception à retourner est le suivant :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;defaultCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Not Found&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Bad Request&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Unauthorized&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Forbidden&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defaultCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;h3 id="astuce-log-des-requtes-http"&gt;Astuce: log des requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;&lt;/h3&gt;&lt;p&gt;Pour faciliter le développement de ce défi, il est très pratique de pouvoir afficher des &lt;em&gt;logs&lt;/em&gt; sur les requêtes ou les réponses &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;.&lt;/p&gt;&lt;h4 id="quick--dirty"&gt;Quick &amp;amp; Dirty&lt;/h4&gt;&lt;p&gt;La solution la plus directe consite à utiliser un &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt; qui est appelé par Feign avant que la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; ne soit construite, et &lt;em&gt;logger&lt;/em&gt; via un &lt;code class="highlighter-rouge"&gt;System.out&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;interceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Quick &amp;amp; Dirty debug&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Evidement, ça ne marche que pour la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;, pour la réponse il faudrait faire quelque chose d’équivalent dans un décodeur.&lt;/p&gt;&lt;h4 id="solution-avec-un-logger-feign"&gt;Solution avec un logger Feign&lt;/h4&gt;&lt;p&gt;Pour éviter d’avoir des dépendances sur bibliothèques tierces, Feign à définit son propre &lt;code class="highlighter-rouge"&gt;Logger&lt;/code&gt;. C’est une classe abstraite avec une seule méthode à implémenter. Il faut ensuite définir le niveau de &lt;em&gt;log&lt;/em&gt; souhaité: &lt;code class="highlighter-rouge"&gt;NONE&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;BASIC&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;HEADERS&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;FULL&lt;/code&gt;. Voici ce que ça donne:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logLevel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// implements Feign abstract Logger&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[%s] "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Dans Feign, le &lt;code class="highlighter-rouge"&gt;feign.Logger.JavaLogger&lt;/code&gt; implémente le mécanisme au travers du &lt;em&gt;loggeur&lt;/em&gt; du &lt;abbr title="Java Development Kit"&gt;JDK&lt;/abbr&gt; (&lt;code class="highlighter-rouge"&gt;java.util.logging.Logger&lt;/code&gt;), et il existe bien sûr une extension pour utiliser &lt;a href="https://github.com/OpenFeign/feign/tree/master/slf4j"&gt;SLF4J&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="authentification-avec-cookie-1"&gt;Authentification avec Cookie&lt;/h3&gt;&lt;p&gt;La première étape consiste à récupérer le &lt;em&gt;cookie&lt;/em&gt; généré par la requête d’authentification. Pour cela on utilise un décodeur spécifique qui va traiter les en-têtes de la réponse pour stocker les &lt;em&gt;cookies&lt;/em&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;AuthenticationApi&lt;/span&gt; &lt;span class="n"&gt;authenticationApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;handleCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;// decode cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthenticationApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;authenticationApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoginPassword&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Le stockage du &lt;em&gt;cookie&lt;/em&gt; est assuré par le &lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html?overview-summary.html"&gt;CookieManager&lt;/a&gt; disponible depuis Java 6.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/div&gt;&lt;p&gt;L’utilisation de ce &lt;code class="highlighter-rouge"&gt;CookieManager&lt;/code&gt; est traité dans la méthode &lt;code class="highlighter-rouge"&gt;handleCookies&lt;/code&gt; ci dessous:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;handleCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// From Map&amp;lt;String, Collection&amp;lt;String&amp;gt;&amp;gt; to Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;entrySet&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;toMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCookieStore&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Stream&amp;lt;HttpCookie&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFirst&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Optional&amp;lt;HttpCookie&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;HttpCookie:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseThrow&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalStateException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authentication cookie not found"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Une fois stocké, ce &lt;em&gt;cookie&lt;/em&gt; sera envoyé dans les futures requêtes. Pour cela on utilise une nouvelle fois le mécanisme de &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt; qui permet de modifier le &lt;code class="highlighter-rouge"&gt;RequestTemplate&lt;/code&gt;, Feign utilise cet objet pour construire la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Inject Cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;L’intercepteur se comporte comme un consommateur de &lt;code class="highlighter-rouge"&gt;RequestTemplate&lt;/code&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequestTemplate&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCookieStore&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;HttpCookie:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cookie"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Dans Feign, le mécanisme d’authentification par &lt;em&gt;cookie&lt;/em&gt; est proche du mécanisme d’en-tête &lt;code class="highlighter-rouge"&gt;Authorization&lt;/code&gt; souvent associé au &lt;abbr title="Json WebToken"&gt;JWT&lt;/abbr&gt;. Il se base sur des en-têtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;. Pour implémenter l’authentification à base de &lt;em&gt;token&lt;/em&gt;, on utiliserait donc la même technique du &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt;. On constate quand même que l’utilisation des &lt;em&gt;cookies&lt;/em&gt; alourdi fortement le code.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;On peut aussi utiliser une &lt;code class="highlighter-rouge"&gt;feign.Target&lt;/code&gt; pour traiter les aspects d’authentification, voir la &lt;a href="https://github.com/OpenFeign/feign#setting-headers-per-target"&gt;documentation de Feign&lt;/a&gt;.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="gestion-des-erreurs-1"&gt;Gestion des erreurs&lt;/h3&gt;&lt;p&gt;Dans Feign, il existe un mécanisme spécifique pour traiter les cas en erreurs, c’est à dire si la réponse &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; à un code ≥ 400. Ce mécanisme utilise un &lt;code class="highlighter-rouge"&gt;ErrorDecoder&lt;/code&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;errorDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Decode errors&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Inject Cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FeignException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;errorStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Parfois on souhaite traiter le cas particulier d’une erreur &lt;code class="highlighter-rouge"&gt;404&lt;/code&gt; dans le &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt; utilisé dans le cas nominal, pour celà il suffit d’utiliser la méthode &lt;code class="highlighter-rouge"&gt;feign.Feign.Builder#decode404&lt;/code&gt; sur le &lt;em&gt;builder&lt;/em&gt;.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="upload"&gt;Upload&lt;/h3&gt;&lt;p&gt;Concernant l’&lt;em&gt;upload&lt;/em&gt; de fichier, le serveur &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; propose deux solutions:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;un &lt;em&gt;upload&lt;/em&gt; via un &lt;a href="https://www.ietf.org/rfc/rfc2388.txt"&gt;formulaire multipart&lt;/a&gt; avec l’en-tête &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; à &lt;code class="highlighter-rouge"&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt; &lt;li&gt;un &lt;em&gt;upload&lt;/em&gt; direct avec les données du fichier directement dans le corps de la requête, l’en-tête &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; à &lt;code class="highlighter-rouge"&gt;application/octet-stream&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Les deux solutions sont implémetables en utilisant le même principe: un &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt; spécifique. La seconde solution est beaucoup plus simple à implémenter car gérer le corps d’une requête &lt;em&gt;multipart&lt;/em&gt; nécessite l’utilisation d’une &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; externe (par exemple &lt;a href="https://commons.apache.org/proper/commons-fileupload/"&gt;Commons FileUpload d’Apache&lt;/a&gt;). On peut regarder du coté de &lt;a href="https://github.com/xxlabaza/feign-form"&gt;https://github.com/xxlabaza/feign-form&lt;/a&gt; ou &lt;a href="https://github.com/pcan/feign-client-test"&gt;https://github.com/pcan/feign-client-test&lt;/a&gt; pour voir des solutions ou des idées pour ces aspects &lt;em&gt;multipart&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;La seconde solution est donc beaucoup plus simple, le principe est de traiter le cas particulier des objets du type &lt;code class="highlighter-rouge"&gt;java.io.InputStream&lt;/code&gt; et de déléguer les autres cas à un autre encodeur &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; classique. Pour définir le corps de de la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; il faut appeler la méthode &lt;code class="highlighter-rouge"&gt;feign.RequestTemplate#body(byte[], java.nio.charset.Charset)&lt;/code&gt;. Il est possible d’écrire le code d’un encodeur dans une &lt;em&gt;lambda&lt;/em&gt; Java 8, mais ici il est préférable d’extraire le code de ce décodeur dans une nouvelle classe :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UploadEncoder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UploadEncoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequestTemplate&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;EncodeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-type"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/octet-stream"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;inputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// InputStream to byte[]&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toByteArray&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;StandardCharsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UTF_8&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;EncodeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot upload file"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;On peut bien sûr simplifier le code en utilisant une bibliothèque qui permet facilement de faire la conversion &lt;code class="highlighter-rouge"&gt;InputStream&lt;/code&gt; vers &lt;code class="highlighter-rouge"&gt;byte[]&lt;/code&gt;, mais ça ne fait pas de mal d’écrire des &lt;code class="highlighter-rouge"&gt;try with resources&lt;/code&gt; de temps en temps.&lt;/p&gt; &lt;/blockquote&gt;&lt;blockquote&gt; &lt;p&gt;On peut légitimement argumenter que ce code risque de poser des problèmes si le fichier est particulièrement gros. Mais si on doit gérer ce genre de cas, il faut aussi se poser la question suivante: une &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; est elle la bonne solution pour faire des &lt;em&gt;upload&lt;/em&gt; de gros fichier ?&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="download"&gt;Download&lt;/h3&gt;&lt;p&gt;On utilise un &lt;code class="highlighter-rouge"&gt;feign.Decoder&lt;/code&gt; pour le &lt;em&gt;download&lt;/em&gt;, le principe est similaire à celui utiliser pour l’&lt;em&gt;upload&lt;/em&gt;. Ce qui va donner:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadDecoder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;DownloadDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DecodeException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FeignException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;asInputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Une nouvelle fois, Feign rend l’opération très simple dès qu’on a compris le principe des encodeurs/décodeurs.&lt;/p&gt;&lt;h3 id="bilan"&gt;Bilan&lt;/h3&gt;&lt;p&gt;Feign rend la manipulation des en-têtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; très simple, cela permet d’utiliser les divers mécanismes d’autentifications par &lt;em&gt;Cookie&lt;/em&gt; ou &lt;em&gt;Token&lt;/em&gt; facilement.&lt;/p&gt;&lt;p&gt;La gestion des erreurs dans Feign est aussi triviale, c’est un des points fort de Feign par rapport à Retrofit.&lt;/p&gt;&lt;p&gt;Le mécanisme d’encodeur permet facilement de traiter le cas d’&lt;em&gt;upload&lt;/em&gt; du fichier, et de façon plus générale de traiter tous les cas de &lt;em&gt;serialization&lt;/em&gt; des requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;. Le mécanisme de décodeur va permettre de récupérer le contenu d’un fichier que l’on &lt;em&gt;download&lt;/em&gt;, ou plus généralement les divers mécanismes de &lt;em&gt;deserialization&lt;/em&gt; des réponses &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;.&lt;/p&gt;&lt;p&gt;Feign offre une grande souplesse grace aux &lt;code class="highlighter-rouge"&gt;Encoder&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt;, … on arrive assez facilement à résoudre les divers problèmes posés autours des &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt;.&lt;/p&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;h3 id="authentification-avec-cookie-2"&gt;Authentification avec Cookie&lt;/h3&gt;&lt;p&gt;La façon la plus simple de gérer l’authentification avec Retrofit consiste à utiliser les mécanismes du client &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; (&lt;code class="highlighter-rouge"&gt;okHttp3&lt;/code&gt;). Comme pour feign, on fait une première requête qui récupère le cookie et ensuite on utilise le même client pour les autres requêtes. Une autre solution consiste a utiliser un client par requête mais une seule instance de &lt;code class="highlighter-rouge"&gt;cookieJar&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Voici une première implémentation assez basique qui permet de comprendre le mécanisme du &lt;code class="highlighter-rouge"&gt;cookieJar&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CookieJar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;saveFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpUrl&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;loadForRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpUrl&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Une implémentation plus élégante et plus simple consiste à ajouter la dépendance &lt;code class="highlighter-rouge"&gt;okhttp-urlconnection&lt;/code&gt; de &lt;code class="highlighter-rouge"&gt;OkHttp&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;CookieHandler&lt;/span&gt; &lt;span class="n"&gt;cookieHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PersistentCookieStore&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CookiePolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACCEPT_ALL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;OkHttpClient&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JavaNetCookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieHandler&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;/div&gt;&lt;h3 id="gestion-des-erreurs-2"&gt;Gestion des erreurs&lt;/h3&gt;&lt;p&gt;Il n’existe pas, de mon point de vue de solution idéale dans Retrofit pour gérer les erreurs comment il en existe dans Feign. Pour cet exercice, nous utilisons donc la fonctionnalité d’interceptor de &lt;code class="highlighter-rouge"&gt;OkHttp&lt;/code&gt;. Une limitation existe cependant; il faut que les exceptions à retourner soient de type &lt;code class="highlighter-rouge"&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;OkHttpClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;authInterceptor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="nf"&gt;authInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interceptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Chain&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;request&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isSuccessful&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="upload-1"&gt;Upload&lt;/h3&gt;&lt;p&gt;Pour l’&lt;em&gt;upload&lt;/em&gt; , nous avons choisi d’utiliser la méthode du &lt;a href="https://www.ietf.org/rfc/rfc2388.txt"&gt;formulaire multipart&lt;/a&gt; avec l’en-tête &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; à &lt;code class="highlighter-rouge"&gt;multipart/form-data&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Et voici comment faire :&lt;/p&gt;&lt;p&gt;On ajoute la méthode au service.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nd"&gt;@Multipart&lt;/span&gt; &lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}/photo"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;sendPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;@Part&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;On crée un fichier temporaire contenant la photo, puis on appelle la méthode &lt;code class="highlighter-rouge"&gt;sendPhoto&lt;/code&gt; en lui fournissant un &lt;code class="highlighter-rouge"&gt;RequestBody&lt;/code&gt; spécifique contenant ce fichier temporaire et ensuite nous créons le &lt;code class="highlighter-rouge"&gt;MultipartBody&lt;/code&gt; qui est passé au service.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Photo&lt;/span&gt; &lt;span class="nf"&gt;savePhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createTempFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exo2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"upload"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REPLACE_EXISTING&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;RequestBody&lt;/span&gt; &lt;span class="n"&gt;requestFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MediaType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFormData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"photo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;requestFile&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="download-1"&gt;Download&lt;/h3&gt;&lt;p&gt;Pour le &lt;em&gt;download&lt;/em&gt; il nous suffit de faire un appel à notre service en récupérant le corps de la réponse. Pour cela Retrofit dispose d’un type &lt;em&gt;générique&lt;/em&gt;: &lt;code class="highlighter-rouge"&gt;ResponseBody&lt;/code&gt; qui permet de récupérer la réponse &lt;code class="highlighter-rouge"&gt;brute&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;On commence par ajouter la méthode à notre service :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}/photo"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;puis voici le code qui permet de récupérer notre photo :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="nf"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;byteStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="bilan-1"&gt;Bilan&lt;/h3&gt;&lt;p&gt;Il est très simple dans Retrofit de gérer l’authentification via &lt;em&gt;Cookie&lt;/em&gt;, &lt;em&gt;Token&lt;/em&gt;. L’&lt;em&gt;upload&lt;/em&gt; et le &lt;em&gt;download&lt;/em&gt; sont aussi assez simple à gérer.&lt;/p&gt;&lt;p&gt;En revanche la gestion des erreurs est un peu moins intuitive. Peut être existe t’il une autre solution auquelle nous n’avons pas pensé.&lt;/p&gt;&lt;h2 id="bilan-global"&gt;Bilan Global&lt;/h2&gt;&lt;p&gt;Que ce soit avec Feign ou Retrofit, il est aisé de gérer les &lt;em&gt;cookies&lt;/em&gt;, et les &lt;em&gt;upload&lt;/em&gt;/&lt;em&gt;download&lt;/em&gt; de fichiers.&lt;/p&gt;&lt;p&gt;Nous avons également trouvé que la gestion des erreurs en mode synchrone était mieux géré avec Feign.&lt;/p&gt;&lt;p&gt;Les solutions utilisant &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; sont communes à Retrofit et à Feign quand on utilise le client &lt;a href="https://github.com/OpenFeign/feign/tree/master/okhttp"&gt;okhttp-client&lt;/a&gt; dans Feign.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <category term="Cookie"/> <summary>Cet article est le deuxième d’une série de trois articles sur les clients REST en java que sont Feign et Retrofit.Article précédent : MKTD#1 : Prise en mainDéfi 2: Aller plus loin…Le deuxième défi permet d’adresser des problèmes plus avancés comme :L’authentification La gestion des erreurs via des Exception Java L’upload et le download de fichiers</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> <entry xml:lang="en"><title>Mktd#1 Feign Vs Retrofit : 2 Going Further</title><link href="http://www.monkeypatch.io/2016/08/10/MKTD-1-feign-vs-retrofit-&-58;-2-going-further.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 2 Going Further"/> <published>2016-08-10T00:00:00+02:00</published> <updated>2016-08-10T00:00:00+02:00</updated><id>http://www.monkeypatch.io/2016/08/10/MKTD#1-feign-vs-retrofit-&amp;#58;-2-going-further</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/08/10/MKTD-1-feign-vs-retrofit-&amp;-58;-2-going-further.html">&lt;p&gt;This article is the second of the serie &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; clients in Java.&lt;/p&gt;&lt;p&gt;Previous article: &lt;a href="/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;amp;-58;-1-getting-started.html"&gt;&lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt;#1 : Getting started&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;h2 id="challenge-2-going-further"&gt;Challenge #2: Going further…&lt;/h2&gt;&lt;p&gt;The second challenge aims at solving advanced problems such as:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Authentication and session management&lt;/li&gt; &lt;li&gt;Errors management via Java &lt;code class="highlighter-rouge"&gt;Exception&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Files &lt;em&gt;upload&lt;/em&gt; and &lt;em&gt;download&lt;/em&gt; &lt;!--more--&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h3 id="session-management-using-cookies"&gt;Session management using Cookies&lt;/h3&gt;&lt;p&gt;Out of the box, the server provides authentication and session management mechanisms using &lt;a href="https://jwt.io/"&gt;&lt;abbr title="Json WebToken"&gt;JWT&lt;/abbr&gt;&lt;/a&gt; and &lt;a href="https://tools.ietf.org/html/rfc6265"&gt;Cookies&lt;/a&gt;. A new Java interface describes this operation:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginPassword&lt;/span&gt; &lt;span class="n"&gt;loginPassword&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;The response &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; may return a &lt;code class="highlighter-rouge"&gt;Set-Cookie&lt;/code&gt; header to be decoded. This &lt;em&gt;cookie&lt;/em&gt; value will then be added to subsequent requests headers sent to other services.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;&lt;em&gt;Token&lt;/em&gt; based solutions are simpler to put in place using Feign and Retrofit, but in our scenario we are not trying to follow the simplest approach. You can find more information on this topic on &lt;a href="https://auth0.com/blog/angularjs-authentication-with-cookies-vs-token/"&gt;this blog&lt;/a&gt;.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="errors-management"&gt;Errors management&lt;/h3&gt;&lt;p&gt;Regarding errors management, we need to return specific errors based on the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; code returned by the server. The following piece of code handles the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; error to Java exception mapping:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;defaultCase&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Not Found&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NoSuchElementException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Bad Request&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Unauthorized&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// Forbidden&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;defaultCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;h3 id="pro-tip-http-requests-logging"&gt;Pro tip: &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests logging&lt;/h3&gt;&lt;p&gt;To ease this challenge implementation, it appears to be very handy to log the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests and responses.&lt;/p&gt;&lt;h4 id="quick--dirty-way"&gt;Quick &amp;amp; Dirty way&lt;/h4&gt;&lt;p&gt;The quickest way to achieve this is to use a &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt; called by Feign before an &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; request gets built and log it via &lt;code class="highlighter-rouge"&gt;System.out&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;interceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Quick &amp;amp; Dirty debug&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;p&gt;This obviously works only for &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests, to achieve the same for the responses, similar thing has to be added to the decoder.&lt;/p&gt;&lt;h4 id="using-feign-logger"&gt;Using Feign logger&lt;/h4&gt;&lt;p&gt;To avoid third-parties libraries dependencies, Feign defines its own &lt;code class="highlighter-rouge"&gt;Logger&lt;/code&gt;. It consists of an abstract class with a single method to implement. The log level needs to be defined to allow log filtering later on (&lt;code class="highlighter-rouge"&gt;NONE&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;BASIC&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;HEADERS&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;FULL&lt;/code&gt;). Here is an example:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logLevel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[%s] "&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;p&gt;By default, Feign logger class &lt;code class="highlighter-rouge"&gt;feign.Logger.JavaLogger&lt;/code&gt; relies on the &lt;abbr title="Java Development Kit"&gt;JDK&lt;/abbr&gt; logger &lt;code class="highlighter-rouge"&gt;java.util.logging.Logger&lt;/code&gt; but an extension exists to use other loggers such as &lt;a href="https://github.com/OpenFeign/feign/tree/master/slf4j"&gt;SLF4J&lt;/a&gt;.&lt;/p&gt;&lt;h3 id="cookie-based-authentication"&gt;Cookie based Authentication&lt;/h3&gt;&lt;p&gt;The first step consists in retrieving the &lt;em&gt;cookie&lt;/em&gt; generated by the authentication request. To do so, a specific decoder to handle the response headers and store them as &lt;em&gt;cookes&lt;/em&gt; is used.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;AuthenticationApi&lt;/span&gt; &lt;span class="n"&gt;authenticationApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;handleCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;// decode cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthenticationApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;authenticationApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;LoginPassword&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;The &lt;em&gt;cookie&lt;/em&gt; storage is managed by the &lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html?overview-summary.html"&gt;CookieManager&lt;/a&gt; available since Java6.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;/div&gt;&lt;p&gt;The usage of this &lt;code class="highlighter-rouge"&gt;CookieManager&lt;/code&gt; is handled from the method &lt;code class="highlighter-rouge"&gt;handleCookies&lt;/code&gt; as follows:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;handleCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// From Map&amp;lt;String, Collection&amp;lt;String&amp;gt;&amp;gt; to Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;entrySet&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;toMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCookieStore&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Stream&amp;lt;HttpCookie&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findFirst&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Optional&amp;lt;HttpCookie&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;HttpCookie:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orElseThrow&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalStateException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authentication cookie not found"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt; &lt;p&gt;After being stored, this &lt;em&gt;cookie&lt;/em&gt; is automatically sent back in subsequent requests. This is achieved by using the &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt; mechanism that modifies the &lt;code class="highlighter-rouge"&gt;RequestTemplate&lt;/code&gt;. Feign uses this object to construct the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; request.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Inject Cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;The interceptor behaves as a &lt;code class="highlighter-rouge"&gt;RequestTemplate&lt;/code&gt; consumer:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequestTemplate&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;COOKIE_MANAGER&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCookieStore&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;HttpCookie:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cookie"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;With Feign, the &lt;em&gt;cookie&lt;/em&gt; based authentication is closed to the &lt;code class="highlighter-rouge"&gt;Authorization&lt;/code&gt; header mechanism often associated to &lt;abbr title="Json WebToken"&gt;JWT&lt;/abbr&gt;. As it is based on &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; headers, the same implementation approach using a &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt; can be used to handle authentication via &lt;em&gt;token&lt;/em&gt;. On the other hand, using &lt;em&gt;cookies&lt;/em&gt; makes the code more complex and impacts its readability.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;We cam also use &lt;code class="highlighter-rouge"&gt;feign.Target&lt;/code&gt; to manage the authentication, see &lt;a href="https://github.com/OpenFeign/feign#setting-headers-per-target"&gt;Feign documentation&lt;/a&gt;.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="errors-management-1"&gt;Errors management&lt;/h3&gt;&lt;p&gt;Feign proposes a specific errors management mechanism out of the box - if an &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; reposnse code &amp;gt;= 400. This is done using the &lt;code class="highlighter-rouge"&gt;ErrorDecoder&lt;/code&gt;:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;getAuthToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;errorDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Decode errors&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;requestInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;ApiFactory:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;addCookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Inject Cookies&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FeignException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;errorStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodKey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Sometimes it can be useful to have a custom management of 404 errors. The &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt; method &lt;code class="highlighter-rouge"&gt;feign.Feign.Builder#decode404&lt;/code&gt; can be used to define the default baheviour.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="upload"&gt;Upload&lt;/h3&gt;&lt;p&gt;File &lt;em&gt;upload&lt;/em&gt; can be achieved in two different ways on the &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; server:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Upload using a &lt;a href="https://www.ietf.org/rfc/rfc2388.txt"&gt;formulaire multipart&lt;/a&gt; and a request header &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; set to &lt;code class="highlighter-rouge"&gt;multipart/form-data&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Direct upload with the file content inside the request body and the request header &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; set to &lt;code class="highlighter-rouge"&gt;application/octet-stream&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The two approaches can be implemented using the same principle: a specific &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt;. The second option is easier to set up as managing the &lt;em&gt;multipart&lt;/em&gt; request body requires the usage of an external &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; such as &lt;a href="https://commons.apache.org/proper/commons-fileupload/"&gt;Apache Commons FileUpload&lt;/a&gt; Other options are also available &lt;a href="https://github.com/xxlabaza/feign-form"&gt;https://github.com/xxlabaza/feign-form&lt;/a&gt; or &lt;a href="https://github.com/pcan/feign-client-test"&gt;https://github.com/pcan/feign-client-test&lt;/a&gt; to find implementation examples of the &lt;em&gt;multipart&lt;/em&gt; approach.&lt;/p&gt;&lt;p&gt;So the second solution is much simpler, the main idea is to handle the specific case of objects of type &lt;code class="highlighter-rouge"&gt;java.io.InputStream&lt;/code&gt; and to delegate other cases to a traditional &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; encoder. To define the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; request body, the method &lt;code class="highlighter-rouge"&gt;feign.RequestTemplate#body(byte[], java.nio.charset.Charset)&lt;/code&gt; needs to be called. It is possible to write the encoder body inside a &lt;em&gt;lambda&lt;/em&gt; with Java 8, but it would be preferable to extract this implementation in a new class:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UploadEncoder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UploadEncoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encoder&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequestTemplate&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;EncodeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-type"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/octet-stream"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;inputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// InputStream to byte[]&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BufferedInputStream&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bytesRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesRead&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toByteArray&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;StandardCharsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UTF_8&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;EncodeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cannot upload file"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bodyType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;It is obviously possible to simplify this code by using a library to handle to conversion of &lt;code class="highlighter-rouge"&gt;InputStream&lt;/code&gt; into &lt;code class="highlighter-rouge"&gt;byte[]&lt;/code&gt;, but it does not hurt to write &lt;code class="highlighter-rouge"&gt;try with resources&lt;/code&gt; from time to time.&lt;/p&gt; &lt;/blockquote&gt;&lt;blockquote&gt; &lt;p&gt;It would be fair to say that this code may cause issues when working with large files. But in this scenario, we also need to ask the question: is a &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; the right solution to &lt;em&gt;upload&lt;/em&gt; large files?&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="download"&gt;Download&lt;/h3&gt;&lt;p&gt;We use &lt;code class="highlighter-rouge"&gt;feign.Decoder&lt;/code&gt; to &lt;em&gt;download&lt;/em&gt; files the same way we did for the &lt;em&gt;upload&lt;/em&gt;:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DownloadDecoder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="n"&gt;DownloadDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decoder&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DecodeException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FeignException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;asInputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Once again, Feign makes this operation quite simple as soon as the encoders/decoders are correctly used.&lt;/p&gt;&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;&lt;p&gt;Feign makes the handle of &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; headers really simple, thus simplifying the authentication mechanisms using &lt;em&gt;cookies&lt;/em&gt; or &lt;em&gt;tokens&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Errors management with Feign is also trivial which is one of the key benefits over the usage of Retrofit.&lt;/p&gt;&lt;p&gt;Encoding mechanism provides an easy way to handle file &lt;em&gt;upload&lt;/em&gt; and more generally to manage all the scenarios of requests serialising. The decoding mechanism allows retrieving the content of a file that is &lt;em&gt;downloaded&lt;/em&gt; and more generally deserialising &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; responses.&lt;/p&gt;&lt;p&gt;Feign comes with a lot of flexibility using the &lt;code class="highlighter-rouge"&gt;Encoder&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Decoder&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;RequestInterceptor&lt;/code&gt;, … and we can easily solve common issues we face with &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; APIs.&lt;/p&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;h3 id="cookie-based-authentication-1"&gt;Cookie based Authentication&lt;/h3&gt;&lt;p&gt;The easiest way to manage authentication with Retrofit is to use the internal of the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; client (&lt;code class="highlighter-rouge"&gt;okHttp3&lt;/code&gt;). Similarly to Feign we send an initial request to fetch the &lt;em&gt;cookie&lt;/em&gt; and then reuse the same client for all subsequent requests. Another option consists in using different clients for each requests but reusing the same &lt;code class="highlighter-rouge"&gt;cookieJar&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Here is a first basic implementation to understand the principle of a &lt;code class="highlighter-rouge"&gt;cookieJar&lt;/code&gt;:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CookieJar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;saveFromResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpUrl&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;loadForRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpUrl&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookieStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAuthority&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt; &lt;/div&gt;&lt;p&gt;A more elegant implementation consists in adding the dependency &lt;code class="highlighter-rouge"&gt;okhttp-urlconnection&lt;/code&gt; from &lt;code class="highlighter-rouge"&gt;OkHttp&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;CookieHandler&lt;/span&gt; &lt;span class="n"&gt;cookieHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookieManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PersistentCookieStore&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;CookiePolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ACCEPT_ALL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;OkHttpClient&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JavaNetCookieJar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookieHandler&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;/div&gt;&lt;h3 id="errors-management-2"&gt;Errors management&lt;/h3&gt;&lt;p&gt;There is no, from my point of view, any ideal solution with Retrofit to manage errors the way it is done with Feign. In this example, we use the functionality of the &lt;code class="highlighter-rouge"&gt;OkHttp&lt;/code&gt; interceptor. There is still a limitation, the exceptions returned must be of type &lt;code class="highlighter-rouge"&gt;RuntimeException&lt;/code&gt;.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="n"&gt;OkHttpClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OkHttpClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;authInterceptor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="nf"&gt;authInterceptor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interceptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Chain&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;request&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isSuccessful&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ApiFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decodeError&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="upload-1"&gt;Upload&lt;/h3&gt;&lt;p&gt;To implement the &lt;em&gt;upload&lt;/em&gt;, we have decided to use the method &lt;a href="https://www.ietf.org/rfc/rfc2388.txt"&gt;multipart form&lt;/a&gt; with the header &lt;code class="highlighter-rouge"&gt;Content-type&lt;/code&gt; set to &lt;code class="highlighter-rouge"&gt;multipart/form-data&lt;/code&gt; Here is the implementation detail:&lt;/p&gt;&lt;p&gt;The method is added to the service&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nd"&gt;@Multipart&lt;/span&gt; &lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}/photo"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Photo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;sendPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;@Part&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;We create a temporary file containing the picture content, then we call the method &lt;code class="highlighter-rouge"&gt;sendPhoto&lt;/code&gt; giving it a &lt;code class="highlighter-rouge"&gt;RequestBody&lt;/code&gt; containing the temporary file to then create the &lt;code class="highlighter-rouge"&gt;MultipartBody&lt;/code&gt; passed down to the service.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Photo&lt;/span&gt; &lt;span class="nf"&gt;savePhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createTempFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exo2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"upload"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REPLACE_EXISTING&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="n"&gt;RequestBody&lt;/span&gt; &lt;span class="n"&gt;requestFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MediaType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MultipartBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFormData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"photo"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toFile&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;requestFile&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;});&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="download-1"&gt;Download&lt;/h3&gt;&lt;p&gt;Regarding the &lt;em&gt;download&lt;/em&gt;, we only need to call our service by retrieving the reponse body. To do so, Retrofit proposes a &lt;em&gt;generic&lt;/em&gt; type &lt;code class="highlighter-rouge"&gt;ResponseBody&lt;/code&gt; to access the raw response.&lt;/p&gt;&lt;p&gt;We start by adding this method to our service:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}/photo"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;then here is the code to fetch the picture:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="nf"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SecurityException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;downloadPhoto&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;byteStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="summary-1"&gt;Summary&lt;/h3&gt;&lt;p&gt;It is really simple with Retrofit to manage authentication via &lt;em&gt;cookies&lt;/em&gt; and &lt;em&gt;tokens&lt;/em&gt; as well as the files &lt;em&gt;upload&lt;/em&gt; and &lt;em&gt;download&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;On the other side, errors management is far less intuitive. Maybe a better approach exists but we haven’t found it yet.&lt;/p&gt;&lt;h2 id="overall-summary"&gt;Overall Summary&lt;/h2&gt;&lt;p&gt;Whether we used Feign or Retrofit, the management of &lt;em&gt;cookies&lt;/em&gt; and files &lt;em&gt;upload&lt;/em&gt;/&lt;em&gt;download&lt;/em&gt; is easily implemented.&lt;/p&gt;&lt;p&gt;We also found that synchronous errors management is better managed with Feign than Retrofit.&lt;/p&gt;&lt;p&gt;Implementations using &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; are common to Retrofit and Feign when the client &lt;a href="https://github.com/OpenFeign/feign/tree/master/okhttp"&gt;okhttp-client&lt;/a&gt; is used in Feign.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <author> <name>Bruno Chauvet</name> <email>bruno@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <category term="Cookie"/> <summary>This article is the second of the serie REST clients in Java.Previous article: MKTD#1 : Getting startedChallenge #2: Going further…The second challenge aims at solving advanced problems such as:Authentication and session management Errors management via Java Exception Files upload and download</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> <entry xml:lang="fr"><title>Mktd#1 Feign Vs Retrofit : 1 Prise En Main</title><link href="http://www.monkeypatch.io/2016/08/09/MKTD-1-feign-vs-retrofit-&-58;-1-prise-en-main.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 1 Prise En Main"/> <published>2016-08-09T00:00:00+02:00</published> <updated>2016-08-09T00:00:00+02:00</updated><id>http://www.monkeypatch.io/2016/08/09/MKTD#1-feign-vs-retrofit-&amp;#58;-1-prise-en-main</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;-58;-1-prise-en-main.html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Nous avons organisé à Toulouse début juillet, le premier &lt;a href="http://www.monkeytechdays.com/"&gt;MonkeyTechDays&lt;/a&gt; chez &lt;a href="http://www.harrycow.com/"&gt;HarryCow&lt;/a&gt; sur la thématique &lt;a href="http://www.monkeytechdays.com/events/mktd-1"&gt;Feign vs Retrofit&lt;/a&gt;. Un &lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt; consiste à comparer, apprendre, sous forme de défis, une ou plusieurs technologies sur une journée.&lt;/p&gt;&lt;p&gt;Ce premier événement était l’occasion d’approfondir les technologies de clients &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; en Java. Nous avons donc étudié &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt;, une librairie initiée par &lt;a href="https://netflix.github.io/"&gt;Netflix&lt;/a&gt; et &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; qui est écrite par &lt;a href="https://github.com/square"&gt;Square&lt;/a&gt;. Ces deux &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; permettent d’écrire des clients &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; en Java de façon plus élégante qu’avec les solutions plus classiques comme JAX-RS client, Spring Rest Template, … &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;Pour aider les équipes à tester les technologies, nous avions au préalable déployé plusieurs services &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; sur le thème des singes. Le code source de cette journée est disponible à l’adresse : &lt;a href="https://github.com/monkeytechdays"&gt;https://github.com/monkeytechdays&lt;/a&gt;&lt;/p&gt;&lt;h2 id="dfi-0--constitution-des-quipes"&gt;Défi 0 : Constitution des équipes&lt;/h2&gt;&lt;p&gt;Ce défi n’avait rien de technique, mais nous permet de constituer des équipes équitables pour chaque technologie, en finissant nos cafés, croissants, … L’équipe Feign étant dirigée par &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt; et l’équipe Retrofit par &lt;a href="https://twitter.com/EmmanuelVinas"&gt;Emmanuel&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="dfi-1-prise-en-main"&gt;Défi 1: Prise en main&lt;/h2&gt;&lt;p&gt;Ce premier défi consiste à une mise en bouche pour découvrir ces technologies.&lt;/p&gt;&lt;p&gt;Le principe d’utilisation de &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; et &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; consiste à créer une interface décrivant le service &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt;, puis l’&lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; se charge de créer une instance de cette interface. Dans ce premier défi, il suffisait de compléter les interfaces correpondant aux services &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; pour faire passer des tests unitaires.&lt;/p&gt;&lt;p&gt;Voici les deux interfaces retournant du &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;et celle dont le service retourne du &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Voir le code sous &lt;a href="https://github.com/monkeytechdays/mktd1-defi1"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Pour réussir ce défi, il faut donc faire:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;un GET et décoder le &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; de la réponse,&lt;/li&gt; &lt;li&gt;un GET avec un paramètre de requête,&lt;/li&gt; &lt;li&gt;un GET avec un paramètre dans le &lt;em&gt;path&lt;/em&gt; de la requête,&lt;/li&gt; &lt;li&gt;un POST avec un encodage en &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; du corps de la requête,&lt;/li&gt; &lt;li&gt;un DELETE,&lt;/li&gt; &lt;li&gt;un GET et décoder le &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; de la réponse.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;p&gt;La documentation de Feign se trouve dans le &lt;a href="https://github.com/OpenFeign/feign"&gt;README.md&lt;/a&gt; sous GitHub. La documentation des extensions se trouve aussi dans des fichiers README.md de ces extensions.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Bien que Feign supporte Java 6 par défaut, nous avons codé avec Java 8.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="dpendances"&gt;Dépendances&lt;/h3&gt;&lt;p&gt;Pour commencer à utiliser Feign, il faut bien sûr ajouter les dépendances nécessaires pour ce défi:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;span class="c"&gt;&amp;lt;!-- Feign --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode JSON with GSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode XML with JAXB --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-jaxb&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Nous recommandons bien sûr l’utilisation d’une propriété maven pour définir la version de Feign utilisée.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="configuration-des-interfaces"&gt;Configuration des interfaces&lt;/h3&gt;&lt;p&gt;Ensuite il faut annoter les interfaces pour que Feign fasse les requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; correspondantes aux méthodes de ces interfaces. Feign apporte ses propres annotations pour décrire les requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;: permet de définir la première ligne de la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;: le verbe &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; (GET, POST, PUT, DELETE, …) et le chemin, on y précise aussi les paramètres de la requête. On peut utiliser la notation &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; pour définir une partie variable de la requête (paramètre ou chemin)&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;: cette annotation permet de faire le lien entre une variable définie dans les autres annotations (&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;, …) et le paramètre de la méthode. Il faut préciser le nom de la variable dans l’annotation.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;: permet d’ajouter une en-tête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;, comme pour &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; on peut utiliser la notation &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; pour définir une valeur variable dans l’en-tête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;. Cette annotation, peut être mise sur l’interface, ou sur une méthode de cette interface. Pas d’annotation pour le corps d’une requête POST ou PUT, le paramètre sans annotation sera converti dans le corps de la requête.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Ce qui nous donne ceci :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Headers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type: application/json"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET ?page={page}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE /{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="construction-des-instances"&gt;Construction des instances&lt;/h3&gt;&lt;p&gt;Pour la dernière étape, on utilise l’&lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;em&gt;fluent builder&lt;/em&gt; de Feign pour créer l’instance de ces interfaces. C’est ici que l’on va faire intervenir les encodeurs/décodeurs ajoutés dans nos dépendances Maven plus tôt :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt; &lt;span class="nf"&gt;buildMonkeyApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Encode JSON for request body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/monkeys"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="nf"&gt;buildStatsApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Create JAXB context factory&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt; &lt;span class="n"&gt;jaxbFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withMarshallerJAXBEncoding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode XML from response body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jaxbFactory&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Feign va concaténer l’&lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; avec le chemin défini, dans le chemin de l’annotation &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, ceci permet facilement de rajouter un préfixe pour les services si on le souhaite.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="bilan"&gt;Bilan&lt;/h3&gt;&lt;p&gt;Peu de points négatifs pour Feign dans cet exercice:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;pour faire fonctionner le décodage &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; il a fallu triturer un peu l’objet pour que &lt;a href="https://docs.oracle.com/javase/tutorial/jaxb/intro/"&gt;JAXB&lt;/a&gt; &lt;em&gt;deserialize&lt;/em&gt; correctement le &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt;. Mais c’est plus un problème lié à JAXB et au &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; de façon plus générale,&lt;/li&gt; &lt;li&gt;les messages d’erreurs ne sont parfois pas simples à décrypter, mais avec un peu de pratique et une connaissance basique du protocole &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;, ça n’est pas vraiment un problème. Un problème classique est le fait d’oublier le verbe &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; dans l’annotation &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Beaucoup de côtés positifs ici:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;simple et proche du &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;,&lt;/li&gt; &lt;li&gt;très léger, il n’y a pas de dépendances transitives pour le &lt;code class="highlighter-rouge"&gt;feign-core&lt;/code&gt;,&lt;/li&gt; &lt;li&gt;facilement extensible: par exemple, il est facile de changer d’encodeur/décodeur &lt;a href="https://github.com/OpenFeign/feign/tree/master/gson"&gt;GSON&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jackson"&gt;Jackson&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jaxb"&gt;JAXB&lt;/a&gt;, …,&lt;/li&gt; &lt;li&gt;il y a un bon support de Java 8, par exemple, les méthodes &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; et &lt;code class="highlighter-rouge"&gt;default&lt;/code&gt; des interfaces de Java 8 sont supportées.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Quelques remarques:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;il y a d’autres annotations &lt;code class="highlighter-rouge"&gt;@Body&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@HeaderMap&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@QueryMap&lt;/code&gt; qui existent,&lt;/li&gt; &lt;li&gt;on peut configurer la façon dont les variables (&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;) sont converties en String via les &lt;code class="highlighter-rouge"&gt;Expander&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;pour définir un chemin racine à toutes nos méthodes dans l’interface, on peut l’ajouter dans l’&lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; utilisée par le &lt;em&gt;builder&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;blockquote&gt; &lt;p&gt;Il n’y a pas de magie dans Feign : il n’utilise que ce qui existe déjà dans le &lt;abbr title="Java Developement Kit"&gt;JDK&lt;/abbr&gt; : &lt;code class="highlighter-rouge"&gt;java.net.HttpURLConnection&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.Proxy&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.InvocationHandler&lt;/code&gt;, …&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;p&gt;La première étape consiste à rajouter les dépendances de Rétrofit&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;span class="cp"&gt;&amp;lt;! -- Dépendance de rétrofit --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;retrofit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;! -- Converter Jackson pour gérer le Json --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-jackson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Converter Simple Xml pour gérer le xml --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-simplexml&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Ensuite, il nous faut rajouter les annotations spécifiques à Retrofit sur l’interface. Les règles du jeu étant de ne pas changer la signature de l’interface, nous avons dû ajouter une autre interface utilisée par la &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; par défaut de Retrofit.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Body&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@DELETE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monkeyId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Ensuite, nous implémentons les interfaces &lt;code class="highlighter-rouge"&gt;MonkeyApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyRaceApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyStatsApi&lt;/code&gt; en utilisant les interfaces spécifiques pour Retrofit.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RetrofitMonkeyApi&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MonkeyService&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setBaseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;monkeyService:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="nf"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleXmlConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JacksonConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="bilan-1"&gt;Bilan&lt;/h3&gt;&lt;h4 id="points-ngatifs"&gt;Points négatifs&lt;/h4&gt;&lt;p&gt;Nous trouvons dommage qu’il n’y ait pas nativement une &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; permettant de faire de façon synchrone un appel retournant notre objet métier sans avoir besoin de passer par l’objet &lt;code class="highlighter-rouge"&gt;Call&lt;/code&gt; à la manière dont cela est géré avec Feign.&lt;/p&gt;&lt;p&gt;Il est aussi possible de faire notre propre &lt;code class="highlighter-rouge"&gt;CallAdapterFactory&lt;/code&gt;. Voici un exemple tiré du code source des tests de Retrofit :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallIOException&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallAdapterFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Annotation&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="n"&gt;retrofit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="nf"&gt;responseType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;adapt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Cela nous obligerait quand même à traiter les exceptions de type &lt;code class="highlighter-rouge"&gt;DirectCallIOException&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Autre point que nous trouvons dommage lors de cet exercice est le fait que nous devons catcher les &lt;code class="highlighter-rouge"&gt;IOException&lt;/code&gt; qui peuvent se produire lors de l’appel. Peut être manque-t-il a Retrofit une gestion des exceptions comme Feign peut l’avoir. Nous verrons cela plus en détail dans l’exercice suivant.&lt;/p&gt;&lt;p&gt;Dernier point ‘négatif’, Retrofit ayant besoin de plusieurs dépendances pour fonctionner : &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; et d’au moins 1 &lt;em&gt;converter&lt;/em&gt;, la taille de l’exécutable généré est sensiblement plus grosse que celle de l’exécutable de Feign (1.5Mo contre 0.5Mo).&lt;/p&gt;&lt;h4 id="points-positifs"&gt;Points Positifs&lt;/h4&gt;&lt;p&gt;Retrofit reste simple à utiliser. Le fait que les principaux &lt;em&gt;converters&lt;/em&gt; soient disponibles est une très bonne chose.&lt;/p&gt;&lt;p&gt;Retrofit a ses propres annotations, évitant ainsi les erreurs de &lt;em&gt;typo&lt;/em&gt;, ce qui est une très bonne chose. Bien que Feign se soit améliorée sur les messages d’erreurs, nous trouvons préférable le choix fait par l’équipe de Retrofit sur cette partie.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <summary>IntroductionNous avons organisé à Toulouse début juillet, le premier MonkeyTechDays chez HarryCow sur la thématique Feign vs Retrofit. Un MKTD consiste à comparer, apprendre, sous forme de défis, une ou plusieurs technologies sur une journée.Ce premier événement était l’occasion d’approfondir les technologies de clients REST en Java. Nous avons donc étudié Feign, une librairie initiée par Netflix et Retrofit qui est écrite par Square. Ces deux API permettent d’écrire des clients REST en Java de façon plus élégante qu’avec les solutions plus classiques comme JAX-RS client, Spring Rest Template, …</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> <entry xml:lang="en"><title>Mktd#1 Feign Vs Retrofit : 1 Getting Started</title><link href="http://www.monkeypatch.io/2016/08/09/MKTD-1-feign-vs-retrofit-&-58;-1-getting-started.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 1 Getting Started"/> <published>2016-08-09T00:00:00+02:00</published> <updated>2016-08-09T00:00:00+02:00</updated><id>http://www.monkeypatch.io/2016/08/09/MKTD#1-feign-vs-retrofit-&amp;#58;-1-getting-started</id> <content type="html" xml:base="http://www.monkeypatch.io/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;-58;-1-getting-started.html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Early July we organised in Toulouse our first &lt;a href="http://www.monkeytechdays.com/"&gt;MonkeyTechDays&lt;/a&gt; hosted by &lt;a href="http://www.harrycow.com/"&gt;HarryCow&lt;/a&gt; comparing the technologies: &lt;a href="http://www.monkeytechdays.com/events/mktd-1"&gt;Feign vs Retrofit&lt;/a&gt;. The goal of a &lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt; is to compare and learn new technologies running challenges throughout the day.&lt;/p&gt;&lt;p&gt;We decided to improve our knowledge of &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; clients in Java during this first event. We started with &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; which is designed by &lt;a href="https://netflix.github.io/"&gt;Netflix&lt;/a&gt; and &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; written by &lt;a href="https://github.com/square"&gt;Square&lt;/a&gt;. These two libraries provide an elegant way to speed up the development of &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; clients in Java compare to traditional solutions such as JAX-RS clients, Spring Rest Template, etc… &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;To bootstrap the teams playing around with these technologies, we had made available several &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; services around the Monkeys theme. Source code writtent this day is available at: &lt;a href="https://github.com/monkeytechdays"&gt;https://github.com/monkeytechdays&lt;/a&gt;&lt;/p&gt;&lt;h2 id="challenge-0-forming-teams"&gt;Challenge #0: Forming teams&lt;/h2&gt;&lt;p&gt;This non-technical challenge allows us forming balanced teams on each technology while finishing our breakfast: coffee and croissants. The Feign team was lead by &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt; and the Retrofit team by &lt;a href="https://twitter.com/EmmanuelVinas"&gt;Emmanuel&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="challenge-1-getting-started"&gt;Challenge #1: Getting started&lt;/h2&gt;&lt;p&gt;The goal of this first challenge is to get familiar with the technologies. The principle of &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; and &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; is to write an interface describing the &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; service and the &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; will take care of implementing an instance of this interface. At the end of this first challenge, completing the interfaces for the &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; services was sufficient to get the unit tests green.&lt;/p&gt;&lt;p&gt;Here are the two interfaces returning &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; format:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;and the service returning &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; data:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;The code is available here: &lt;a href="https://github.com/monkeytechdays/mktd1-defi1"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To pass this challenge, the following is required:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;GET request and parse the &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; response&lt;/li&gt; &lt;li&gt;GET request with a &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; parameter&lt;/li&gt; &lt;li&gt;GET request with a path parameter&lt;/li&gt; &lt;li&gt;POST request with encoded &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; body&lt;/li&gt; &lt;li&gt;DELETE request&lt;/li&gt; &lt;li&gt;GET request and parse the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; response&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;p&gt;The Feign documentation is hosted on Github inside the &lt;a href="https://github.com/OpenFeign/feign"&gt;README.md&lt;/a&gt; Extensions documentation is also available in the README.md files of these extensions&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Even if Feign supports Java 6 by default, we have been using Java 8&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;&lt;p&gt;To start using Feign inside a project, the following dependencies need to be added to the POM file:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;span class="c"&gt;&amp;lt;!-- Feign --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode JSON with GSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode XML with JAXB --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-jaxb&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;We highly recommend setting a maven property to define the version of Feign to be used&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="interfaces-configuration"&gt;Interfaces Configuration&lt;/h3&gt;&lt;p&gt;The next step is to annotate the interfaces so Feign can implement the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests of each method. Feign comes with its own annotations describing the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;: describes the first &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; line: &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; verb (GET, POST, PUT, DELETE, …) and path, defining as well the request parameters. Path parameters can be defined using the &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; convention.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;: binds a variable defined in other annotations (&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;, …) and the method parameter. The variable name must be defined by the annotation.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;: adds a custom &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; header, similarly to &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, the &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; convention can be used to define a variable inside the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; header. This annotation is applicable at the interface or method level. If there is no annotation for the body of a POST or PUT request, the parameters without annotation will be converted inside the request body.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;So we end up with the following:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="nd"&gt;@Headers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type: application/json"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET ?page={page}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE /{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="instances-construction"&gt;Instances construction&lt;/h3&gt;&lt;p&gt;For the last step, we leverage the &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;em&gt;fluent builder&lt;/em&gt; provided by Feign to instanciate the interfaces. This is where the encoders/decoders dependencies added by maven earlier on will kick-in:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt; &lt;span class="nf"&gt;buildMonkeyApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Encode JSON for request body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/monkeys"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="nf"&gt;buildStatsApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Create JAXB context factory&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt; &lt;span class="n"&gt;jaxbFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withMarshallerJAXBEncoding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode XML from response body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jaxbFactory&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Feign concatenates the &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; with the path defined by the &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; annotation. This provides an easy way to add a prefix to our services if required.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Very few drawbacks using Feign during this experiment:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;To get the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; decoding to work, we had to tweak the object so &lt;a href="https://docs.oracle.com/javase/tutorial/jaxb/intro/"&gt;JAXB&lt;/a&gt; can correctly &lt;em&gt;deserialise&lt;/em&gt; the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; response. But this is a more general issue with JAXB and &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; parsing.&lt;/li&gt; &lt;li&gt;Error messages are not always easy to decrypt, but with a bit more experience and basic knowledge of the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; protocol, this is not really an issue. A typical mistake is to forget the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; verb inside the &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; annotation.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;A lot of benefits:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Ease of use and close to &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; protocol&lt;/li&gt; &lt;li&gt;Very lightweight without any transitive dependencies for &lt;code class="highlighter-rouge"&gt;feign-core&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Easy to extend, eg: swapping encoders/decoders &lt;a href="https://github.com/OpenFeign/feign/tree/master/gson"&gt;GSON&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jackson"&gt;Jackson&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jaxb"&gt;JAXB&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Good support of Java 8, the instances methods &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;default&lt;/code&gt; are supported&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;General comments&lt;/p&gt;&lt;ul&gt; &lt;li&gt;There are a few more annotations &lt;code class="highlighter-rouge"&gt;@Body&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@HeaderMap&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@QueryMap&lt;/code&gt;&lt;/li&gt; &lt;li&gt;it is possible to configure how variables (&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;) are converted into String via &lt;code class="highlighter-rouge"&gt;Expanders&lt;/code&gt;&lt;/li&gt; &lt;li&gt;The root path of all the interface methods can be added to the &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; used by the &lt;em&gt;builder&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt;&lt;blockquote&gt; &lt;p&gt;There is no dark magic inside Feign: it relies on the &lt;abbr title="Java Developement Kit"&gt;JDK&lt;/abbr&gt;: &lt;code class="highlighter-rouge"&gt;java.net.HttpURLConnection&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.Proxy&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.InvocationHandler&lt;/code&gt;, …&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;p&gt;The first step is to add the Retrofit dependencies:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;span class="cp"&gt;&amp;lt;! -- Retrofit dependency --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;retrofit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;! -- Jackson converter for JSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-jackson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Simple converter for XML --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-simplexml&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Next step is to add the Retrofit specific annotations to the interface The rules of the game being to not modify the interface signature, we had to add a new interface to &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; used by Retrofit by default.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Body&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@DELETE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monkeyId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;Then we implement the interfaces &lt;code class="highlighter-rouge"&gt;MonkeyApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyRaceApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyStatsApi&lt;/code&gt; using the Retrofit specific interfaces&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RetrofitMonkeyApi&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MonkeyService&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setBaseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;monkeyService:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="nf"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleXmlConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JacksonConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;h3 id="conclusion-1"&gt;Conclusion&lt;/h3&gt;&lt;h4 id="drawbacks"&gt;Drawbacks&lt;/h4&gt;&lt;p&gt;We found quite annoying that there is no way with &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; to issue a synchronous call returning an object without having to use the &lt;code class="highlighter-rouge"&gt;Call&lt;/code&gt; object - as this can be done with Feign&lt;/p&gt;&lt;p&gt;It is also possible to create our own &lt;code class="highlighter-rouge"&gt;CallAdapterFactory&lt;/code&gt;. Here is an example from Retrofit test source code:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallIOException&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallAdapterFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Annotation&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="n"&gt;retrofit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="nf"&gt;responseType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;adapt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/div&gt;&lt;p&gt;This enforces the handling of exceptions of type &lt;code class="highlighter-rouge"&gt;DirectCallIOException&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Another pain point encountered with Retrofit is to have to explicitly catch the &lt;code class="highlighter-rouge"&gt;IOException&lt;/code&gt; that can raise from method calls. Maybe Retrofit could provide exception management in a Feign fashion? We will find this out during the next part.&lt;/p&gt;&lt;p&gt;The last drawback we found, Retrofit requires several dependencies to run: &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; and at least 1 &lt;em&gt;converter&lt;/em&gt; which makes the size of the executable much larger that the one generated with Feign (1.5Mo vs 0.5Mo).&lt;/p&gt;&lt;h4 id="benefits"&gt;Benefits&lt;/h4&gt;&lt;p&gt;Retrofit is developer friendly. Having the main converters available out of the box is very handy.&lt;/p&gt;&lt;p&gt;Retrofit has its own annotations avoiding typical &lt;em&gt;typo&lt;/em&gt;, which is a good thing. Even if Feign has improved a lot on error messages management, we still prefer the way it has been designed by the Retrofit team.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <author> <name>Bruno Chauvet</name> <email>bruno@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <summary>IntroductionEarly July we organised in Toulouse our first MonkeyTechDays hosted by HarryCow comparing the technologies: Feign vs Retrofit. The goal of a MKTD is to compare and learn new technologies running challenges throughout the day.We decided to improve our knowledge of REST clients in Java during this first event. We started with Feign which is designed by Netflix and Retrofit written by Square. These two libraries provide an elegant way to speed up the development of REST clients in Java compare to traditional solutions such as JAX-RS clients, Spring Rest Template, etc…</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> </feed>