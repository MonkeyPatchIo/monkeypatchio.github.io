<?xml version="1.0" encoding="utf-8"?> <?xml-stylesheet type="text/xml" href="/blog/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"> <generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://www.monkeypatch.io/en/blog/feed.xml" rel="self" type="application/atom+xml"/><link href="http://www.monkeypatch.io/en/" rel="alternate" type="text/html" hreflang="en"/> <updated>2016-08-29T17:01:50+02:00</updated> <id>http://www.monkeypatch.io/en/</id><title>MonkeyPatch - Expertise Informatique</title> <subtitle>Société de conseil et d'expertise en informatique spécialisée dans les nouvelles technologies.</subtitle> <entry xml:lang="fr"><title>Mktd#1 Feign Vs Retrofit : 1 Prise En Main</title><link href="http://www.monkeypatch.io/en/2016/08/09/MKTD-1-feign-vs-retrofit-&-58;-1-prise-en-main.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 1 Prise En Main"/> <published>2016-08-09T00:00:00+02:00</published> <updated>2016-08-09T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2016/08/09/MKTD#1-feign-vs-retrofit-&amp;#58;-1-prise-en-main</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;-58;-1-prise-en-main.html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Nous avons organisé à Toulouse début juillet, le premier &lt;a href="http://www.monkeytechdays.com/"&gt;MonkeyTechDays&lt;/a&gt; chez &lt;a href="http://www.harrycow.com/"&gt;HarryCow&lt;/a&gt; sur la thématique &lt;a href="http://www.monkeytechdays.com/events/mktd-1"&gt;Feign vs Retrofit&lt;/a&gt;. Un &lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt; consiste à comparer, apprendre, sous forme de défis, une ou plusieurs technologies sur une journée.&lt;/p&gt;&lt;p&gt;Ce premier événement était l’occasion d’approfondir les technologies de clients &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; en Java. Nous avons donc étudié &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt;, une librairie initiée par &lt;a href="https://netflix.github.io/"&gt;Netflix&lt;/a&gt; et &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; qui est écrite par &lt;a href="https://github.com/square"&gt;Square&lt;/a&gt;. Ces deux &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; permettent d’écrire des clients &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; en Java de façon plus élégante qu’avec les solutions plus classiques comme JAX-RS client, Spring Rest Template, … &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;Pour aider les équipes à tester les technologies, nous avions au préalable déployé plusieurs services &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; sur le thème des singes. Le code source de cette journée est disponible à l’adresse : &lt;a href="https://github.com/monkeytechdays"&gt;https://github.com/monkeytechdays&lt;/a&gt;&lt;/p&gt;&lt;h2 id="dfi-0--constitution-des-quipes"&gt;Défi 0 : Constitution des équipes&lt;/h2&gt;&lt;p&gt;Ce défi n’avait rien de technique, mais nous permet de constituer des équipes équitables pour chaque technologie, en finissant nos cafés, croissants, … L’équipe Feign étant dirigée par &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt; et l’équipe Retrofit par &lt;a href="https://twitter.com/EmmanuelVinas"&gt;Emmanuel&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="dfi-1-prise-en-main"&gt;Défi 1: Prise en main&lt;/h2&gt;&lt;p&gt;Ce premier défi consiste à une mise en bouche pour découvrir ces technologies.&lt;/p&gt;&lt;p&gt;Le principe d’utilisation de &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; et &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; consiste à créer une interface décrivant le service &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt;, puis l’&lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; se charge de créer une instance de cette interface. Dans ce premier défi, il suffisait de compléter les interfaces correpondant aux services &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; pour faire passer des tests unitaires.&lt;/p&gt;&lt;p&gt;Voici les deux interfaces retournant du &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;et celle dont le service retourne du &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Voir le code sous &lt;a href="https://github.com/monkeytechdays/mktd1-defi1"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Pour réussir ce défi, il faut donc faire:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;un GET et décoder le &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; de la réponse,&lt;/li&gt; &lt;li&gt;un GET avec un paramètre de requête,&lt;/li&gt; &lt;li&gt;un GET avec un paramètre dans le &lt;em&gt;path&lt;/em&gt; de la requête,&lt;/li&gt; &lt;li&gt;un POST avec un encodage en &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; du corps de la requête,&lt;/li&gt; &lt;li&gt;un DELETE,&lt;/li&gt; &lt;li&gt;un GET et décoder le &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; de la réponse.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;p&gt;La documentation de Feign se trouve dans le &lt;a href="https://github.com/OpenFeign/feign"&gt;README.md&lt;/a&gt; sous GitHub. La documentation des extensions se trouve aussi dans des fichiers README.md de ces extensions.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Bien que Feign supporte Java 6 par défaut, nous avons codé avec Java 8.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="dpendances"&gt;Dépendances&lt;/h3&gt;&lt;p&gt;Pour commencer à utiliser Feign, il faut bien sûr ajouter les dépendances nécessaires pour ce défi:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Feign --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode JSON with GSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode XML with JAXB --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-jaxb&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Nous recommandons bien sûr l’utilisation d’une propriété maven pour définir la version de Feign utilisée.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="configuration-des-interfaces"&gt;Configuration des interfaces&lt;/h3&gt;&lt;p&gt;Ensuite il faut annoter les interfaces pour que Feign fasse les requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; correspondantes aux méthodes de ces interfaces. Feign apporte ses propres annotations pour décrire les requêtes &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;: permet de définir la première ligne de la requête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;: le verbe &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; (GET, POST, PUT, DELETE, …) et le chemin, on y précise aussi les paramètres de la requête. On peut utiliser la notation &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; pour définir une partie variable de la requête (paramètre ou chemin)&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;: cette annotation permet de faire le lien entre une variable définie dans les autres annotations (&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;, …) et le paramètre de la méthode. Il faut préciser le nom de la variable dans l’annotation.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;: permet d’ajouter une en-tête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;, comme pour &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; on peut utiliser la notation &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; pour définir une valeur variable dans l’en-tête &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;. Cette annotation, peut être mise sur l’interface, ou sur une méthode de cette interface. Pas d’annotation pour le corps d’une requête POST ou PUT, le paramètre sans annotation sera converti dans le corps de la requête.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Ce qui nous donne ceci :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Headers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type: application/json"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET ?page={page}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE /{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3 id="construction-des-instances"&gt;Construction des instances&lt;/h3&gt;&lt;p&gt;Pour la dernière étape, on utilise l’&lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;em&gt;fluent builder&lt;/em&gt; de Feign pour créer l’instance de ces interfaces. C’est ici que l’on va faire intervenir les encodeurs/décodeurs ajoutés dans nos dépendances Maven plus tôt :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt; &lt;span class="nf"&gt;buildMonkeyApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Encode JSON for request body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/monkeys"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="nf"&gt;buildStatsApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Create JAXB context factory&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt; &lt;span class="n"&gt;jaxbFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withMarshallerJAXBEncoding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode XML from response body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jaxbFactory&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Feign va concaténer l’&lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; avec le chemin défini, dans le chemin de l’annotation &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, ceci permet facilement de rajouter un préfixe pour les services si on le souhaite.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="bilan"&gt;Bilan&lt;/h3&gt;&lt;p&gt;Peu de points négatifs pour Feign dans cet exercice:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;pour faire fonctionner le décodage &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; il a fallu triturer un peu l’objet pour que &lt;a href="https://docs.oracle.com/javase/tutorial/jaxb/intro/"&gt;JAXB&lt;/a&gt; &lt;em&gt;deserialize&lt;/em&gt; correctement le &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt;. Mais c’est plus un problème lié à JAXB et au &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; de façon plus générale,&lt;/li&gt; &lt;li&gt;les messages d’erreurs ne sont parfois pas simples à décrypter, mais avec un peu de pratique et une connaissance basique du protocole &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;, ça n’est pas vraiment un problème. Un problème classique est le fait d’oublier le verbe &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; dans l’annotation &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Beaucoup de côtés positifs ici:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;simple et proche du &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt;,&lt;/li&gt; &lt;li&gt;très léger, il n’y a pas de dépendances transitives pour le &lt;code class="highlighter-rouge"&gt;feign-core&lt;/code&gt;,&lt;/li&gt; &lt;li&gt;facilement extensible: par exemple, il est facile de changer d’encodeur/décodeur &lt;a href="https://github.com/OpenFeign/feign/tree/master/gson"&gt;GSON&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jackson"&gt;Jackson&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jaxb"&gt;JAXB&lt;/a&gt;, …,&lt;/li&gt; &lt;li&gt;il y a un bon support de Java 8, par exemple, les méthodes &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; et &lt;code class="highlighter-rouge"&gt;default&lt;/code&gt; des interfaces de Java 8 sont supportées.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Quelques remarques:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;il y a d’autres annotations &lt;code class="highlighter-rouge"&gt;@Body&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@HeaderMap&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@QueryMap&lt;/code&gt; qui existent,&lt;/li&gt; &lt;li&gt;on peut configurer la façon dont les variables (&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;) sont converties en String via les &lt;code class="highlighter-rouge"&gt;Expander&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;pour définir un chemin racine à toutes nos méthodes dans l’interface, on peut l’ajouter dans l’&lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; utilisée par le &lt;em&gt;builder&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;blockquote&gt; &lt;p&gt;Il n’y a pas de magie dans Feign : il n’utilise que ce qui existe déjà dans le &lt;abbr title="Java Developement Kit"&gt;JDK&lt;/abbr&gt; : &lt;code class="highlighter-rouge"&gt;java.net.HttpURLConnection&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.Proxy&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.InvocationHandler&lt;/code&gt;, …&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;p&gt;La première étape consiste à rajouter les dépendances de Rétrofit&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;! -- Dépendance de rétrofit --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;retrofit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;! -- Converter Jackson pour gérer le Json --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-jackson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Converter Simple Xml pour gérer le xml --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-simplexml&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Ensuite, il nous faut rajouter les annotations spécifiques à Retrofit sur l’interface. Les règles du jeu étant de ne pas changer la signature de l’interface, nous avons dû ajouter une autre interface utilisée par la &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; par défaut de Retrofit.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Body&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@DELETE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monkeyId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Ensuite, nous implémentons les interfaces &lt;code class="highlighter-rouge"&gt;MonkeyApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyRaceApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyStatsApi&lt;/code&gt; en utilisant les interfaces spécifiques pour Retrofit.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RetrofitMonkeyApi&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MonkeyService&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setBaseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;monkeyService:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="nf"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleXmlConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JacksonConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3 id="bilan-1"&gt;Bilan&lt;/h3&gt;&lt;h4 id="points-ngatifs"&gt;Points négatifs&lt;/h4&gt;&lt;p&gt;Nous trouvons dommage qu’il n’y ait pas nativement une &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; permettant de faire de façon synchrone un appel retournant notre objet métier sans avoir besoin de passer par l’objet &lt;code class="highlighter-rouge"&gt;Call&lt;/code&gt; à la manière dont cela est géré avec Feign.&lt;/p&gt;&lt;p&gt;Il est aussi possible de faire notre propre &lt;code class="highlighter-rouge"&gt;CallAdapterFactory&lt;/code&gt;. Voici un exemple tiré du code source des tests de Retrofit :&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallIOException&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallAdapterFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Annotation&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="n"&gt;retrofit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="nf"&gt;responseType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;adapt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Cela nous obligerait quand même à traiter les exceptions de type &lt;code class="highlighter-rouge"&gt;DirectCallIOException&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Autre point que nous trouvons dommage lors de cet exercice est le fait que nous devons catcher les &lt;code class="highlighter-rouge"&gt;IOException&lt;/code&gt; qui peuvent se produire lors de l’appel. Peut être manque-t-il a Retrofit une gestion des exceptions comme Feign peut l’avoir. Nous verrons cela plus en détail dans l’exercice suivant.&lt;/p&gt;&lt;p&gt;Dernier point ‘négatif’, Retrofit ayant besoin de plusieurs dépendances pour fonctionner : &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; et d’au moins 1 &lt;em&gt;converter&lt;/em&gt;, la taille de l’exécutable généré est sensiblement plus grosse que celle de l’exécutable de Feign (1.5Mo contre 0.5Mo).&lt;/p&gt;&lt;h4 id="points-positifs"&gt;Points Positifs&lt;/h4&gt;&lt;p&gt;Retrofit reste simple à utiliser. Le fait que les principaux &lt;em&gt;converters&lt;/em&gt; soient disponibles est une très bonne chose.&lt;/p&gt;&lt;p&gt;Retrofit a ses propres annotations, évitant ainsi les erreurs de &lt;em&gt;typo&lt;/em&gt;, ce qui est une très bonne chose. Bien que Feign se soit améliorée sur les messages d’erreurs, nous trouvons préférable le choix fait par l’équipe de Retrofit sur cette partie.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <summary>IntroductionNous avons organisé à Toulouse début juillet, le premier MonkeyTechDays chez HarryCow sur la thématique Feign vs Retrofit. Un MKTD consiste à comparer, apprendre, sous forme de défis, une ou plusieurs technologies sur une journée.Ce premier événement était l’occasion d’approfondir les technologies de clients REST en Java. Nous avons donc étudié Feign, une librairie initiée par Netflix et Retrofit qui est écrite par Square. Ces deux API permettent d’écrire des clients REST en Java de façon plus élégante qu’avec les solutions plus classiques comme JAX-RS client, Spring Rest Template, …</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> <entry xml:lang="en"><title>Mktd#1 Feign Vs Retrofit : 1 Getting Started</title><link href="http://www.monkeypatch.io/en/2016/08/09/MKTD-1-feign-vs-retrofit-&-58;-1-getting-started.html" rel="alternate" type="text/html" title="Mktd#1 Feign Vs Retrofit &amp;#58; 1 Getting Started"/> <published>2016-08-09T00:00:00+02:00</published> <updated>2016-08-09T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2016/08/09/MKTD#1-feign-vs-retrofit-&amp;#58;-1-getting-started</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2016/08/09/MKTD-1-feign-vs-retrofit-&amp;-58;-1-getting-started.html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Early July we organised in Toulouse our first &lt;a href="http://www.monkeytechdays.com/"&gt;MonkeyTechDays&lt;/a&gt; hosted by &lt;a href="http://www.harrycow.com/"&gt;HarryCow&lt;/a&gt; comparing the technologies: &lt;a href="http://www.monkeytechdays.com/events/mktd-1"&gt;Feign vs Retrofit&lt;/a&gt;. The goal of a &lt;abbr title="MonkeyTechDays"&gt;MKTD&lt;/abbr&gt; is to compare and learn new technologies running challenges throughout the day.&lt;/p&gt;&lt;p&gt;We decided to improve our knowledge of &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; clients in Java during this first event. We started with &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; which is designed by &lt;a href="https://netflix.github.io/"&gt;Netflix&lt;/a&gt; and &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; written by &lt;a href="https://github.com/square"&gt;Square&lt;/a&gt;. These two libraries provide an elegant way to speed up the development of &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; clients in Java compare to traditional solutions such as JAX-RS clients, Spring Rest Template, etc… &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;To bootstrap the teams playing around with these technologies, we had made available several &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; services around the Monkeys theme. Source code writtent this day is available at: &lt;a href="https://github.com/monkeytechdays"&gt;https://github.com/monkeytechdays&lt;/a&gt;&lt;/p&gt;&lt;h2 id="challenge-0-forming-teams"&gt;Challenge #0: Forming teams&lt;/h2&gt;&lt;p&gt;This non-technical challenge allows us forming balanced teams on each technology while finishing our breakfast: coffee and croissants. The Feign team was lead by &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt; and the Retrofit team by &lt;a href="https://twitter.com/EmmanuelVinas"&gt;Emmanuel&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="challenge-1-getting-started"&gt;Challenge #1: Getting started&lt;/h2&gt;&lt;p&gt;The goal of ths first challenge is to get familiar with the technologies. The principle of &lt;a href="https://github.com/OpenFeign/feign"&gt;Feign&lt;/a&gt; and &lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt; is to write an interface describing the &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; service and the &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; will take care of implementing an instance of this interface. At the end of this first challenge, completing the interfaces for the &lt;abbr title="REpresentational State Transfer"&gt;REST&lt;/abbr&gt; services was sufficient to get the unit tests green.&lt;/p&gt;&lt;p&gt;Here are the two interfaces returning &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; format:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;and the service returning &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; data:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;The code is available here: &lt;a href="https://github.com/monkeytechdays/mktd1-defi1"&gt;GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;To pass this challenge, the following is required: * GET request and parse the &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; response * GET request with a &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; parameter * GET request with a path parameter * POST request with encoded &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt; body * DELETE request * GET request and parse the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; response&lt;/p&gt;&lt;h2 id="feign"&gt;Feign&lt;/h2&gt;&lt;p&gt;The Feign documentation is hosted on Github inside the &lt;a href="https://github.com/OpenFeign/feign"&gt;README.md&lt;/a&gt; Extensions documentation is also available in the README.md files of these extensions&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Even if Feign supports Java 6 by default, we have been using Java 8&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;&lt;p&gt;To start using Feign inside a project, the following dependencies need to be added to the POM file:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Feign --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-core&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode JSON with GSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-gson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Feign: encode/decode XML with JAXB --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.netflix.feign&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;feign-jaxb&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.17.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;We highly recommend setting a maven property to define the version of Feign to be used&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="interfaces-configuration"&gt;Interfaces Configuration&lt;/h3&gt;&lt;p&gt;The next step is to annotate the interfaces so Feign can implement the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests of each method. Feign comes with its own annotations describing the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; requests:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;: describes the first &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; line: &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; verb (GET, POST, PUT, DELETE, …) and path, defining as well the request parameters. Path parameters can be defined using the &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; convention.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;: binds a variable defined in other annotations (&lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;, …) and the method parameter. The variable name must be defined by the annotation.&lt;/li&gt; &lt;li&gt;&lt;code class="highlighter-rouge"&gt;@Headers&lt;/code&gt;: adds a custom &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; header, similarly to &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt;, the &lt;code class="highlighter-rouge"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt; convention can be used to define a variable inside the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; header. This annotation is applicable at the interface or method level. If there is no annotation for the body of a POST or PUT request, the parameters without annotation will be converted inside the request body.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;So we end up with the following:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Headers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type: application/json"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET ?page={page}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE /{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Param&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@RequestLine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET /stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3 id="instances-construction"&gt;Instances construction&lt;/h3&gt;&lt;p&gt;For the last step, we leverage the &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; &lt;em&gt;fluent builder&lt;/em&gt; provided by Feign to instanciate the interfaces. This is where the encoders/decoders dependencies added by maven earlier on will kick-in:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt; &lt;span class="nf"&gt;buildRaceApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyRaceApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt; &lt;span class="nf"&gt;buildMonkeyApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode JSON from respone body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonDecoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Encode JSON for request body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GsonEncoder&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/monkeys"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt; &lt;span class="nf"&gt;buildStatsApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Create JAXB context factory&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt; &lt;span class="n"&gt;jaxbFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBContextFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withMarshallerJAXBEncoding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Feign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Decode XML from response body&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JAXBDecoder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jaxbFactory&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatsApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;Feign concatenates the &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; with the path defined by the &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; annotation. This provides an easy way to add a prefix to our services if required.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Very few drawbacks using Feign during this experiment:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;To get the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; decoding to work, we had to tweak the object so &lt;a href="https://docs.oracle.com/javase/tutorial/jaxb/intro/"&gt;JAXB&lt;/a&gt; can correctly &lt;em&gt;deserialise&lt;/em&gt; the &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; response. But this is a more general issue with JAXB and &lt;abbr title="eXtensible Markup Language"&gt;XML&lt;/abbr&gt; parsing.&lt;/li&gt; &lt;li&gt;Error messages are not always easy to decrypt, but with a bit more experience and basic knowledge of the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; protocol, this is not really an issue. A typical mistake is to forget the &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; verb inside the &lt;code class="highlighter-rouge"&gt;@RequestLine&lt;/code&gt; annotation.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;A lot of benefits:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Ease of use and close to &lt;abbr title="HyperText Transfer Protocol"&gt;HTTP&lt;/abbr&gt; protocol&lt;/li&gt; &lt;li&gt;Very lightweight without any transitive dependencies for &lt;code class="highlighter-rouge"&gt;feign-core&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Easy to extend, eg: swapping encoders/decoders &lt;a href="https://github.com/OpenFeign/feign/tree/master/gson"&gt;GSON&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jackson"&gt;Jackson&lt;/a&gt;, &lt;a href="https://github.com/OpenFeign/feign/tree/master/jaxb"&gt;JAXB&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Good support of Java 8, the instances methods &lt;code class="highlighter-rouge"&gt;static&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;default&lt;/code&gt; are supported&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;General comments&lt;/p&gt;&lt;ul&gt; &lt;li&gt;There are a few more annotations &lt;code class="highlighter-rouge"&gt;@Body&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@HeaderMap&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;@QueryMap&lt;/code&gt;&lt;/li&gt; &lt;li&gt;it is possible to configure how variables (&lt;code class="highlighter-rouge"&gt;@Param&lt;/code&gt;) are converted into String via &lt;code class="highlighter-rouge"&gt;Expanders&lt;/code&gt;&lt;/li&gt; &lt;li&gt;The root path of all the interface methods can be added to the &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; used by the &lt;em&gt;builder&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt;&lt;blockquote&gt; &lt;p&gt;There is no dark magic inside Feign: it relies on the &lt;abbr title="Java Developement Kit"&gt;JDK&lt;/abbr&gt;: &lt;code class="highlighter-rouge"&gt;java.net.HttpURLConnection&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.Proxy&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;java.lang.reflect.InvocationHandler&lt;/code&gt;, …&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="retrofit"&gt;Retrofit&lt;/h2&gt;&lt;p&gt;The first step is to add the Retrofit dependencies:&lt;/p&gt;&lt;div class="language-xml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;! -- Retrofit dependency --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;retrofit&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;! -- Jackson converter for JSON --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-jackson&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Simple converter for XML --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.squareup.retrofit2&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;converter-simplexml&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${retrofit.version}&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Next step is to add the Retrofit specific annotations to the interface The rules of the game being to not modify the interface signature, we had to add a new interface to &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; used by Retrofit by default.&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyRaceService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"races"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyRace&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyRaces&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{name}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@POST&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Body&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="nd"&gt;@DELETE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"monkeys/{id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResponseBody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;monkeyId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MonkeyStatsService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@GET&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/stats"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MonkeyStatistics&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyStats&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;Then we implement the interfaces &lt;code class="highlighter-rouge"&gt;MonkeyApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyRaceApi&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;MonkeyStatsApi&lt;/code&gt; using the Retrofit specific interfaces&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RetrofitMonkeyApi&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MonkeyApi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MonkeyService&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setBaseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;monkeyService:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getMonkeys&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMonkeyByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="nf"&gt;createMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Monkey&lt;/span&gt; &lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monkey&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteMonkey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;monkeyService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;RetrofitApi&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="nf"&gt;createRetrofit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useXml&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleXmlConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConverterFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JacksonConverterFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;executeCall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Supplier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;supplier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;h3 id="conclusion-1"&gt;Conclusion&lt;/h3&gt;&lt;h4 id="drawbacks"&gt;Drawbacks&lt;/h4&gt;&lt;p&gt;We found quite annoying that there is no way with &lt;code class="highlighter-rouge"&gt;CallFactory&lt;/code&gt; to issue a synchronous call returning an object without having to use the &lt;code class="highlighter-rouge"&gt;Call&lt;/code&gt; object - as this can be done with Feign&lt;/p&gt;&lt;p&gt;It is also possible to create our own `CallAdapterFactory. Here is an example from Retrofit test source code:&lt;/p&gt;&lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallIOException&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirectCallAdapterFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Factory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Annotation&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Retrofit&lt;/span&gt; &lt;span class="n"&gt;retrofit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CallAdapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="nf"&gt;responseType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;adapt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DirectCallIOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMessage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;};&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;p&gt;This enforces the handling of exceptions of type &lt;code class="highlighter-rouge"&gt;DirectCallIOException&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Another pain point encountered with Retrofit is to have to explicitly catch the &lt;code class="highlighter-rouge"&gt;IOException&lt;/code&gt; that can raise from method calls. Maybe Retrofit could provide exception management in a Feign fashion? We will find this out during the next part.&lt;/p&gt;&lt;p&gt;The last drawback we found, Retrofit requires several dependencies to run: &lt;a href="http://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt; and at least 1 &lt;em&gt;converter&lt;/em&gt; which makes the size of the executable much larger that the one generated with Feign (1.5Mo vs 0.5Mo).&lt;/p&gt;&lt;h4 id="benefits"&gt;Benefits&lt;/h4&gt;&lt;p&gt;Retrofit is developer friendly. Having the main converters available out of the box is very handy.&lt;/p&gt;&lt;p&gt;Retrofit has its own annotations avoiding typical &lt;em&gt;typo&lt;/em&gt;, which is a good thing. Even if Feign has improved a lot on error messages management, we still prefer the way it has been designed by the Retrofit team.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <author> <name>Bruno Chauvet</name> <email>bruno@monkeypatch.io</email> </author> <category term="MKTD"/> <category term="Java"/> <category term="REST"/> <category term="Feign"/> <category term="Retrofit"/> <summary>IntroductionEarly July we organised in Toulouse our first MonkeyTechDays hosted by HarryCow comparing the technologies: Feign vs Retrofit. The goal of a MKTD is to compare and learn new technologies running challenges throughout the day.We decided to improve our knowledge of REST clients in Java during this first event. We started with Feign which is designed by Netflix and Retrofit written by Square. These two libraries provide an elegant way to speed up the development of REST clients in Java compare to traditional solutions such as JAX-RS clients, Spring Rest Template, etc…</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png"/> </entry> </feed>