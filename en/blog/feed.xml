<?xml version="1.0" encoding="utf-8"?> <?xml-stylesheet type="text/xml" href="/blog/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"> <generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://www.monkeypatch.io/en/blog/feed.xml" rel="self" type="application/atom+xml"/><link href="http://www.monkeypatch.io/en/" rel="alternate" type="text/html" hreflang="en"/> <updated>2018-02-07T10:51:08+01:00</updated> <id>http://www.monkeypatch.io/en/</id><title>MonkeyPatch - Expertise Informatique</title> <subtitle>Société de conseil et d'expertise en informatique spécialisée dans les nouvelles technologies.</subtitle> <entry xml:lang="fr"><title>Mktd#5 Seulement 17 mois après la 1ère édition !</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-6.html" rel="alternate" type="text/html" title="Mktd#5 Seulement 17 mois après la 1ère édition !"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-6</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-6.html">&lt;h1 id="mktd5--seulement-17-mois-après-la-1ère-édition--go-rust"&gt;Mktd#5 : Seulement 17 mois après la 1ère édition ! #Go #Rust&lt;/h1&gt;&lt;p&gt;Déjà (et seulement…) 17 mois se sont écoulés depuis la première expérimentation des MKTD. Pour cette 5ème édition, on se retrouve une fois de plus chez HarryCow pour expérimenter et tester les 2 technologies de plus en plus utilisées Golang et Rustlang. &lt;!--more--&gt; &lt;a href="https://twitter.com/kendo5731"&gt;Aurélien&lt;/a&gt; et &lt;a href="https://twitter.com/LoganMzz"&gt;Logan&lt;/a&gt; nous avaient préparé une jolie petite série de TP pour le matin, et sont repartis sur le jeu du MKTD#4 pour l’après-midi.&lt;/p&gt;&lt;p&gt;Lors de cette édition, je me suis sentie plus investie que la fois d’avant et j’ai adoré organiser l’événement. J’ai dessiné et imprimé les stickers des 2 technos Go &amp;amp; Rust revisités “façon Monkey”. Ils ont plu à la majorité d’entre vous, certains les ont même collés sur leur Pc !&lt;/p&gt;&lt;h2 id="des-t-shirts-collector"&gt;Des T-shirts “collector”&lt;/h2&gt; &lt;p&gt;Contrairement au précédent MKTD, les éditeurs ne nous ont pas envoyé de t-Shirts ;( Mais, on trouvait sympa d’en faire gagner. Du coup, on a créé les nôtres : une version pour Rust et une version pour Golang.&lt;/p&gt;&lt;p&gt;On a commandé 4 T-shirts chez My-Design à Labège. Pour qu’ils soient au top pour l’événement, la veille-au-soir on a les lavés à 30C°.&lt;/p&gt;&lt;p&gt;Et là ! … catastrophe… flocage à moitié parti au lavage.&lt;/p&gt;&lt;p&gt;On n’est vraiment pas content du prestataire … Post événement, on a donc recommandé les T-shirts avec un prestataire de qualité (un pour chaque coach et pour chaque gagnant du jeu Twitter). Vous avez bien aimé l’idée de pouvoir gagner des T-shirts grâce au défi Twitter que j’ai organisé. On le refait au prochain ?&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/OMipk40J2oFp8XufgHF8D1G-HZHxky-PtYXazdKo0r0XXIh3LuOw6lO2pxTxSS5wWKDHw20XyGGRRQaMRLsmyFhjzL8zw_ZBkeE-pDhsoOjVrma7R4tzOHJ4TtruFAI-wkZS6lVl3XL3iBZv8ZhQkaylE1CcgW30iuRBYHRS1v2TKQGo8IDBu7IGy_m51V-R-38FcQmOrek04TguVd6HsgLZrmPwyOZjHjSS2UL6-hVr8YTab3GCA8yY2Lf_QcK3_SpeZk8O9MF6oym1pTvJpv_6rUlNOBhzRsBmK6vALexRKWZEThqhbkMClPWdw7IgI0ybRwG-ErHWiyOn5gLm4mS5v7aLYNcoqraG2TFD2BYPNrxWXFJnuK3d9bRb9XxOG1olwaI4UzOqnHidgBzlXbpiPs0mgz3B-DtwtqprOnRSb_EK0dRLFhtzpT123KmNk6nZtxBcrtkN3Kcy_gJZXM1Zs80-X6mB0ALtnt8G8PmQrdlEvKqJVpZnPuxI4-_TwAnMP1YvVmodgWgZlv7c5xLj4w4JZc659mU9AXdQl2i33WaXhmi3DzeveEcB8D8PieOCAcaMBxEE666uxaiwI27pKr47adMG5uZZzrr-_uNJ3B4o-F_QJXavezVXno6jZHg71kQ0ZuNiGfSm3Qok7zriFuf2lBXn=w735-h832-no" alt="Teeshirt Rust Go" /&gt;&lt;/p&gt;&lt;h2 id="repas-et-collations"&gt;Repas et Collations&lt;/h2&gt;&lt;p&gt;On a testé un nouveau prestataire pour la restauration, avec la prise en compte (comme aux précédents MKTD) des repas végétariens, et d’un repas personnalisé. Les doses individuelles étaient suffisantes, assez pour être d’attaque pour les défis de l’après-midi, mais pas trop pour plomber les ventres des participants.&lt;/p&gt;&lt;p&gt;Le reste, comme les collations, étaient à disposition tout au long de la journée. On met la dose sur les bananes, le café, … et on a observé un pic de consommation d’haribo et des bières !&lt;/p&gt;&lt;h2 id="vos-retours-nous-font-progresser"&gt;Vos retours nous font progresser!&lt;/h2&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/Neig0rjRRVSm_rcAjkK_OcPmPRgAfdlEcpCtfM3uZecgi-JZWQlRk4xzTI-XTiblXOytL1y43UNO2wK9yYh0NXzf1sHTxeQ9q6NVBpy-UIx8GCI9qGHCiN2KLLbY_KdkVTtPhPuDkWEi36Nz6HZygZzgLsOJ_96O5F5ygZTvcV1YtULtPd5FbKf09lWE44nlG3rn7wnc-mIW8oGfPtoe_6huQ7S8sSOtryop7Pw0JOwq1P29J3zB-RMa_-IzvHLmu_G9ie3NlC8jSf4-8JkI7CES9w0n115Q-BnfBQBidcucPv0363yW2652xLVQHAKMI11OvzusefDNBd7dT2LX8ywoSCgA7b8Do7GN8MZvkSaP1O_aQbmYXdRu-FLWqMDH9HRSw5oVuRE4JhhUTk59v-sLTiCNYCj3i2C5OFA8fkFaT1pvA0Qg-k5n0z3DqH-h-8qWAkA2bjghluLu2l3dyOxmQiHB2Otu4qHZ58E0kGiL_hKsA1ZDhn9TFmkHV3TWwl2ZM9w5FJ9UB6P3BDmt7q8G-KvBFWv5I_CiixDLIZ22Z1hlhGvCxXHnVG4Eoo57g-vReTBAluvnKl48ebJO1Skh1iL3KLKmmJQHz8lriEZswo1pBx_5Q6ZMlfZHHUjO78paRMAt19ODgOuKrEoHAlZxiPd-_LG7=w1769-h903-no" alt="MKTD reviews 1" /&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/oO8tIFrv25wX6L2yKiCW03l2tVZTx24l87TCd2aFB_ppzDB_C6vRjyjpa25lWlWVqzlw8wAZNhZ5wXNmUCCBHXKmBTbte_YHl14rayUCqyUbwd3jOgZqEFVvzeuUZIss2z4AU9zGGuGhgLOcAlK2iN-Fwk2YNswBnYKGpBquk2YWTseA5nQGfDoJAqE1r8DXlWcX682kTt_6soPnB4kp2RnRhMneK6_JG-SZLDAEQwoyYJa-zXPB81aIW1OGl-3D0TYy8vJx2BECAEz37av-jzfQ5heAqe7h5iDZzOp7B3AbpOzful-ZUt84uzr1NY19ZzUl_zD_BZaW4XBYY4dUcOLaBjpO2o5DgoPzrPhRFoy_xF_x3-BNNe6QfbIGTO3pQbLsJK_2kVNC2qNeqe2SMLcNkU9TQhEwXpkiCL3rqbj3sePYQp19VCXpMZdWtySqMTrytQTh4YTFSFToZBCjU4qG-KrVq8vS1uYEjYccZ7m5aUtEdPwzxfDpCGPMlBl5f8rgV_0NP1mhTm3FIAdH0ZtZ-N6R2odkgOsGAh8Z1wuLnfvWNDYjPGdlNeiQhhbTa59UOESYwtMMeie5nyvkpHc9WJD6nl-6hiBmSByl0jJGnRnzKgoO5u9tgvbI2qjFnVShCJoGXkvylobQjFtA8J4CHT0BdI30=w1239-h722-no" alt="MKTD5 reviews 2" /&gt;&lt;/p&gt;&lt;p&gt;Avoir les retours et avis des participants en fin de journée est une agréable récompense. Vous nous avez fait nous rendre compte que les exos de l’après-midi, trop orientés IA, ne sont pas forcément les plus adaptés à la découverte d’un langage et qu’il faut que l’on essaie de trouver une solution pour améliorer le réseau Wifi. On a bien conscience que le Wifi est super important pour assurer le bon déroulement de l’événement. On va essayer de trouver une solution avec Benoît de HarryCow sinon il nous faudra changer de lieu.&lt;/p&gt;&lt;p&gt;La table ronde où l’on peut poser ses questions aux coachs a une fois de plus été très appréciée.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/rVcINIzvJ9QRaL95r8QdfRvKjSd7v8WrBB0zesrOJdMOvjLnCd8DtvWNmhHz0IseCteLHfUQREY9u1k5wKQJcgYrsjH9FyFlLav9_OFK7_sP36h8Q8SyCfBvOHAbUMcKDL-xXRAF9AsHVpOtrrwqPSS2ictl0S168ANWX82vXAU1kGY9wXCOIbJUvU4gxoR6zPpwFvvXsR2WqWWdZpCRSwMruacjW5-ZVlEZe46d68qrVCo_lLwwrcbzZfQgsA-c53iQA8_PjsnBqG9fXc_D4bEZFSf5QSP4NcufXr3bZ6Vi9cEO_jFYSpu8huoRAxJSZ4y1g57qgrg8f8_tBGahXiBv7qVgtlJqzUmhTPkVJovYGom-MbI4oSyBMCtUSLTmb7n_FwbeGx6knJjYU5DtHu8pFNAJ4U67chAdFLD4lTPr2KYJ-L4zCsqYMT1Pt1QWI3jxtGH6teIjKh8XO7VZgwpDa6LYk_ufGxnnfRQmQmo7gJjmmg9jcGNu9q8jzyosDO4BLsXxqnqn6tIJLjN9AtfC17A5syOWnLEjfhPm4Ni7ay_tJSgsVY1E8PR90pSubl6pp-cbhvBtnwppNj2RtPb4Olv-aQh3jNJwzsgCZ-BGVeytUKG14KzZcMJ-_BxtBg1A3Msq9CqxAgyFymQsfG9FBARgwK94=w963-h722-no" alt="" /&gt;&lt;/p&gt;&lt;p&gt;← revenir à &lt;a href="/2018/02/05/MKTDs-articles-1.html"&gt;l’article principal&lt;/a&gt; → Article précédent &lt;a href="/2018/02/05/MKTDs-articles-5.html"&gt;MKTD#4&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <category term="go"/> <category term="rust"/> <summary>Mktd#5 : Seulement 17 mois après la 1ère édition ! #Go #RustDéjà (et seulement…) 17 mois se sont écoulés depuis la première expérimentation des MKTD. Pour cette 5ème édition, on se retrouve une fois de plus chez HarryCow pour expérimenter et tester les 2 technologies de plus en plus utilisées Golang et Rustlang.</summary> </entry> <entry xml:lang="fr"><title>MKTD#4 Du challenge et du partage autour de</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-5.html" rel="alternate" type="text/html" title="MKTD#4 Du challenge et du partage autour de"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-5</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-5.html">&lt;h1 id="mktd4--du-challenge-et-du-partage-autour-de-kotlin-swift"&gt;MKTD#4 : Du challenge et du partage autour de #Kotlin #Swift&lt;/h1&gt;&lt;p&gt;Pour la quatrième édition, on repart sur le format 2 technos / 2 coachs qui nous semble très pertinent pour comparer 2 technos utilisées aussi bien coté Mobile que côté Back-End. &lt;!--more--&gt; &lt;img src="https://lh3.googleusercontent.com/Cb0GhO9F2m6Q-w-2kLlFOflRNk_0yUhLkePt5XZmlvw1kOFNdtpWSgWYXkoRldSIuHbAOmlP-1XApQWXZq9hNmUEOThbvyh3JjdT2J7GaH5SeAMfN4BEF9RaTGlPwA-KgoBSyBhpPSq5MPKt7hZF7REY39GBF0On-aVs4R1EBJs2FofQrX9m-vgy8vKAhzPnJXaGMhyWZBEjx83hYTZb2fvbtnrxvzv-tvTBmOHt8Xt5EERJZ1eS-mAoYJldQYYWbHl93dr6TlDdhl9Y_Q3086s9WDGd17b4DvKbf7c8gN8LfwELt72Rw1FahXC7XG19FV5PiZp8O3Fh8QApkTt3jZque5eQDsVLBDAeHOB9pY3fITWPENXJKqqV5VrzgPzxPy1Q425ECfO-C8BnaZe95ZjSow6eJhQFpZayElbejZ3x3SbMEYUwm0ntP6kISa3ucCSlIS_OAXhgryfpTk_tbH2mPzuhofpiZKDgmBxYbeZYaSbPLfN9AGjGQKTj0dr8cOapEV9BI7th-TVYHcFtdRuX77cCqy5rlC4qSZdf7Y4g5oIiMerqrvnejjVtbOAJGTdxaJ2ooSr2gAku5ev3yrGUaVO1Ekhqj1Ep7J3Cho2MaHqvlYT0UqtTQyRJ78PZn0KPVTc3XZHofGVoLQAk5lQE1if1SyWs=w1867-h739-no" alt="Kotlin Swift" /&gt;&lt;/p&gt;&lt;p&gt;Le format de nos MKTD commence à être bien rodé :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;on accueille les participants autour d’un petit déjeuner&lt;/li&gt; &lt;li&gt;on fait un défi IceBreaker pour se mettre en jambe&lt;/li&gt; &lt;li&gt;on fait des TP Individuels&lt;/li&gt; &lt;li&gt;on pitche nos résultats et impressions sur la techno&lt;/li&gt; &lt;li&gt;on déjeune tous ensemble&lt;/li&gt; &lt;li&gt;après le mot du sponsor, on code une appli en équipe&lt;/li&gt; &lt;li&gt;on fait la table ronde&lt;/li&gt; &lt;li&gt;et on clôture l’événement autour d’un apéro dinatoire&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Le MKTD#4 s’est déroulé le 12 mai 2017. &lt;a href="https://twitter.com/EmmanuelVinas?lang=fr"&gt;Emmanuel&lt;/a&gt; et &lt;a href="https://twitter.com/dplaindoux?lang=fr"&gt;Didier&lt;/a&gt; nous avaient concocté un bien beau programme autour de Kotlin et Swift. Après un IceBreaker super fun, ils nous ont rapidement présenté les nouveautés des 2 langages. Tout le reste de la matinée, chaque participant réalisait, à son rythme, les TP pour rentrer dans la philo de Kotlin et Swift3. Après un repas marocain et le discours du représentant d’&lt;a href="https://twitter.com/InformatiqueBP?lang=fr"&gt;i-BP&lt;/a&gt;, on a attaqué en équipe la réalisation d’un jeu où des singes doivent naviguer dans un labyrinthe pour manger des… Eh oui, des bananes ! Après avoir résolu quelques difficultés d’algorithme, les équipes ont pu faire jouer leurs IA respectives.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“Ah ! Le souvenir de l’IA Swift qui n’arrivait pas à éviter son premier mur !”&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="jeu-twitter"&gt;Jeu twitter&lt;/h2&gt; &lt;p&gt;Pour ce MKTD#4 se déroulait pour la première fois un défi Twitter. Pour remporter des T-shirts Kotlin et Swift, il ne fallait pas hésiter à poster sur Twitter des photos fun et délirantes. Beaucoup se sont pris au jeu. Les Twittos qui ont pris le plus de photos, et ceux qui ont été les plus fun sont sélectionnés par la team Com et les coachs.&lt;/p&gt;&lt;p&gt;Certains participants, ont même eu droit à un portrait. Altéanne, commençant tout juste un stage d’illustration &amp;amp; design, a pu s’imprégner de l’état d’esprit de l’événement. Elle a retranscrit en quelques croquis l’ambiance studieuse et fun de la journée.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/A34veaj1wL9dJw0WfB2UzZC_-8ziCUYmOkKuI6MpqmiQh34nTp4_QZfPj_Rc2hVizuKGPS5fw1A5q9u--HeY48z78lFJ1tLEDQQ0g0gSovdaROQCvcOymuH3osLu3RcNntR3_zKKG_zuIaQxHbJAXoB7mE2KCPC_Rv2SHRbenaf0CFltl04BbhkECduPi8Mg6iDSkoTGAruxe6hFyOjzqzoy9pAueJP5zu15qLw13SBo95qJjJ8XYV604zgpTOpXCx7u5xc5mLpKQZx2AubqfGsqJ9I8x6Zt2tiERHU9Xau7W3dZB0wGAWwhbUIxZhPWSMFt0O8lC4q3_vvwTrBcM9NzwgF1QH9ZMyw1XjDX7ALbh1kmZ9rHukw5yC8niA96UjFNYTqVOH7v6uSECUYs4VE1xApwzih3jk8OP1eylJy9NLdNky8aDI6nambLfSHIVkLlMdXlCCU4151VEJ2YrfAFwpIoU0QvotaHP-ZoT_vi1M80so9MGkBNeoDcNpNwKas_vn6InZ9q-2ZHFtq26qpNaWSIFCt88u1NlZ8p--QJ7w-kE7kaKcPpGQc-_JZlGtWVWVj7nYWrNtk8ZAx_36WY0iIBdeQ1OjqpzDUiLvIzHuD-5c3vtK_3YvBNfsxoz8dZ4eeUXA5PT8sbv5TSFqYUz683QU6m=w1107-h687-no" alt="Meetup commentaires kotlin swift" /&gt;&lt;/p&gt;&lt;h2 id="aie-aie-premier-problème-de-réseau-"&gt;Aie Aie premier problème de réseau !&lt;/h2&gt; &lt;p&gt;Pour que les équipes puissent pitcher, on met à disposition des outils collaboratifs comme Google Slides. Ces outils sont censés faire gagner du temps afin de passer plus de temps sur la partie codage… mais quand le réseau fait des siennes ça fonctionne beaucoup moins bien que prévu.&lt;/p&gt;&lt;h2 id="un-petit-bémol-"&gt;Un petit bémol !&lt;/h2&gt; &lt;p&gt;Nous retenons tout de même un petit bémol. Durant cette édition, plusieurs personnes sont parties à 16h00 pour aller récupérer leur(s) enfant(s) ou partir en Week-End. Les coachs et les organisateurs passent beaucoup de temps, bénévolement pour préparer un MKTD. On a été déçue que tous les participants n’aient pas pu rester au moins jusqu’à la fin de la table ronde.&lt;/p&gt;&lt;h2 id="un-sponsor-au-top-"&gt;Un sponsor au top !&lt;/h2&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/s0DFSAjRxzWdTV0NyjFl6Q6Kr4lOPurZkz8ZdNTyiz33BepD_KSZPmskyBpJgMRkUP9vLZGlIFoA9Q8vl2BetUYxq-h3sP0Qy-dhWqACA6fER9yn3MvtveE8Z0pgzDAhQ_BycGEgJmRXbVAOTsizrgAlXapBesBJZnkbOdhOzdU0Y2DPe8XoVn_dRVC8ViGJ2kmGjUvwOn4R-3JA39vcdx-KmaD4Gy5IX8xOz9AGedgvvL2r96fOk6nT6pqR23_TcerJr1PvQ9lOvOogMbWBJEpnLIgDc1-SkXuqi3IZx_lvAYT5hVgJxI5iQES0-b4AbcZ-KH2ZMAjaV2E4d-CQdTmri2EZRYxR0qvE36UeDB77Ut-noG7C6kZ6okCd9zuBucYWkWB2Ogh-qJhE64pvhVtRD6cwigq-iEnfGSkccSAaNzvzxA2DDyBIaWi3UeMIMzsUFbO-TiIVzybEETEjR2rFI5cjoyCpGqNn8gUb6TJauCV929ZDdLvAv6ofyHgEXH6EahY_PhIuDUeG7gDsw2UGdHP8WUfVhQs-Ig5y1q23QX1v_KWiJIYkVckME0K70esF616y6y4m8qPTzsGxrefyVPUHhBBfvtxCRTSg-MSEpxj0ZoMAw49Mmjy2VcJnjM2DtSpoqqz79XLn9QznzEGoZKKyPJdo=w1250-h430-no" alt="Sponsor MKTD5" /&gt;&lt;/p&gt;&lt;p&gt;Le soutien d’un sponsor comme i-BP nous permet de participer à une partie des frais liés à l’organisation d’un MKTD.&lt;/p&gt;&lt;p&gt;De manière non-exhaustive, on peut citer :&lt;/p&gt; &lt;ul&gt; &lt;li&gt;les petits déjeuners,&lt;/li&gt; &lt;li&gt;le repas du déjeuner pour chaque participants, sponsors et organisateurs,&lt;/li&gt; &lt;li&gt;le buffet du soir et les boissons (softs, bières, vins, cidres …),&lt;/li&gt; &lt;li&gt;le coût de la location de la salle,&lt;/li&gt; &lt;li&gt;les frais éventuels des speakers/coachs.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Répartis dans les 2 teams, les 5 membres de leurs équipes ont vraiment joué le jeu. Ils ont pu entre autres, expérimenter et comparer Kotlin et Swift ; mais également échanger avec les autres participants et avoir leurs impressions sur ces technos.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“Les goodies (essui lunettes) d’i-BP sont vraiment nickel !”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;← revenir à &lt;a href="/2018/02/05/MKTDs-articles-4.html"&gt;MKTD#3&lt;/a&gt; → Article suivant &lt;a href="/2018/02/05/MKTDs-articles-6.html"&gt;MKTD#5&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <category term="kotlin"/> <category term="swift"/> <summary>MKTD#4 : Du challenge et du partage autour de #Kotlin #SwiftPour la quatrième édition, on repart sur le format 2 technos / 2 coachs qui nous semble très pertinent pour comparer 2 technos utilisées aussi bien coté Mobile que côté Back-End.</summary> </entry> <entry xml:lang="fr"><title>MKTD#3 La programmation réactive ça vous tente ?</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-4.html" rel="alternate" type="text/html" title="MKTD#3 La programmation réactive ça vous tente ?"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-4</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-4.html">&lt;h1 id="mktd3--la-programmation-réactive-ça-vous-tente--reactive"&gt;MKTD#3 : La programmation réactive ça vous tente ? #Reactive&lt;/h1&gt; &lt;p&gt;Début 2017, la Programmation Réactive était en train de devenir la grosse tendance. Intéressant pour plusieurs Monkeys, on a décidé de faire venir une “guest star” pour animer ce MKTD : &lt;a href="https://twitter.com/sdeleuze?lang=fr"&gt;Sébastien Deleuze&lt;/a&gt;. Il a vite adhéré à notre concept et s’est prêté au jeu. &lt;!--more--&gt;&lt;/p&gt;&lt;h2 id="on-ajuste-le-concept"&gt;On ajuste le concept&lt;/h2&gt; &lt;p&gt;Avec Sébastien, on a un peu ajusté le format. La programmation bien que très élégante, est assez complexe au premier abord. Sébastien nous a donc proposé de faire des TP individuels le matin pour que chacun rentre à son rythme dans la programmation réactive et de travailler ensuite en équipe. Conquis par le concept, on signe.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/6XOGicxMueMlpdUY7T_gNqSFf6nBoEzeva1U-vQ94IKtcAUH7k0JUqhjcWCX3MKy46GG4gRZ11ZmzEti6wdbRi066rxoc3DsFbrdcze2qVfbX42WKqtJqrU3_NZfPkiRVm2u8E6-b4G0-08XXzh1pQMmjy2fAJfnzmIIRnEqwFDIvtnYLOxRT0xtLwQ_N2CJWQCZ2vhR3Em51iGC-hr83UxXhEIqZ2aPPq0kF8XsuSTnyRvZGO1Itwv_XpmbOrXDswpW6oXsFMiGO5rLI4skJGskp_Zot-gzKFu8qQMuo3srhnCJg7mXuSgHdHo2I69YMFQ7LwqaqoVX8Nx8e9AookgY1Y0Jcl-D7YUDl0S3wPUYY2wFM9zsL_PAsMbDRAKjgNuW7NVPAjie7AsaGh20wq_nx0Q9CwZZQvj3_PqGbze-CuF52tAKhsbbzoACQk7ZOjj-gjdY2X2QKG1xsZX7bf48NFFYW7KByPLOeNToAX_OkZp76yAaAmUBFRVq9OAH7Wpnr6ud64gk2L9Zk5QkUnbGgEfpu3wVRayhfK6XUzlfYu8FOrR4GFcfuFO67cFJAo2CSn9ysqHyHLrUfs2hoJ1MpCagjWqFV0qmyYMyyq0eepucEJMXdtRwxer-7VaIAorG_ckUENcGa4LqhxnQvb-lY1pKsZD_=w1499-h903-no" alt="Sébastien Deleuze" /&gt;&lt;/p&gt;&lt;h2 id="le-sponsor-senvole"&gt;Le sponsor s’envole&lt;/h2&gt; &lt;p&gt;On devait avoir un sponsor de haut nom du domaine de l’aéronautique. Pour des raisons qui nous échappent encore, ce dernier nous a annoncé 2 semaines avant le jour J, qu’il ne pouvait pas soutenir cette édition - Grincement des dents - On n’annule pas et on demande à MonkeyPatch de palier à cet imprévu. On utilise le créneau réservé au sponsor, pour pitcher MonkeyPatch (On ne sait jamais, il y avait peut-être encore des personnes qui ne nous connaissaient pas.)&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/dBP7JceD2xQCdB5mAH-gIm2FKUeBT8s8GHYSV4I3egyOGKnr-8H9H7G06piTIk2J4DIDBOQefr0vX5S2q89hbw-O2AeyEKXYbWRHQP6p8u21f-kR_8w8kzSVzpjOsRnGvZJu3_Tg0HFk8V3ifcvdhRU3Q-XVTkpfxvApRQNQ533QVrc5jMkP21K86xQiSxzGpfKt85omGJ4wQHM9GYwzo9gtwsZSNwZQtZySWnOX6L4nVUQIpXg_dkmlV8aCH-ODsZuif_FDE740kcVzhgkL4u3IO0f6i4OR-fP0glHJPDcJusH442ygkkzRYo4lmQGN7nvSn75bfLsgK889mSMdA8JhL5PJ3k_jCRGJbL0_P5wx_8eHH_JQoH9M7WzMWNCoTKM85kWff2xkiwbo3DF0XbKvWEya7LD4IxNh6DwYxOu0yl36ZYkXeGnxf5paGKcGxSsb-opC_YrCCb9611jqcMxU3GeHS21TQm02pf6wXuexFJPysBkRImyjWikSIRapJ6yeDmzl9hLo6DmptASZ9bpnTUUTqV4C8ZGz82Ir8TkmeZ9flF20kqbnBu6CySfEZSayuJeR1_ybYLrwmEHrkpA8XPdX9SDBT6EcoUAljJMgktVTENqqBCqOpO47of4svjmVZK7WYd497WN8FeLoXaDVuqK3DNlW=w1499-h903-no" alt="Expert informatique" /&gt;&lt;/p&gt;&lt;h2 id="un-bilan-très-positif-"&gt;Un bilan très positif :&lt;/h2&gt; &lt;p&gt;Malgré le petit soucis de sponsoring, ce MKTD a été fortement apprécié. On a eu de bons retours. Le format proposé par Sébastien (TP individuel le matin et travail en équipe l’après-midi) est vraiment adapté, on l’a alors adopté pour les prochains MKTD.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/a5fOYOsRm9JtoMUJT6hXfuoqI3NRFb_YOLCm6zPKeYveqDSvDYr_W8-ALuK760rb8PEMCQf6Y-PJ5s63TRroXR25ehBdv-mP-7UIHxB4MaqCR895tgeG-oPiLPW2VRDKzKskepgkkCFa4HJpRsNm9EJKpVp6e3TEAIDflbagIsRquHKS7D53u0fqFuCIrQAxsqaVJlarcXoNwf9ohkNgoDfZoq-6iDDVraiGe4D5doMdsl4YxVTtrC2PjzT6ruqsWbu2gRE6ThbIM5oyP7R1HoatznSLUXddHUf9_oPMFUmPS4nCA8m9lt9n2hR4McVum3IHkgu_8nCniw1P4tjH0QfzLT_HulARQaMsSza6KQA72Pa3iZxzaoH8bSk0kMei4xcBI0fsGB8qDoqc3AN2eDE0wXVX4njPUSVXj43Tr2YDlk7tjKuzFNAgL45gOvcoFRT35hrJpkUn7KK95CkPQqnlG-xOYbtJGnjaQYXalWETXAwu7iJfExwstzMOCJnu9np58UPm5Anq50mZVUQqaR-MQxp-d90qcSZYP-Q1vdsGuyXWzd59HDEqklrkpRTHOMwBAj1JkY3deamcb0bq_-Yp3RTRFpM4YpMf5GW0r4q2wJSlmhfuaZHP0Q0IQqVsoCLsKIBlwbTG-GapxOR5yvQtQmUx_UIY=w1746-h903-no" alt="Meetup commentaires RxJava, Reactor" /&gt;&lt;/p&gt;&lt;p&gt;La possibilité d’avoir un repas végé a été très bien accueillie. On a tout de même noté une fois de plus que certains ont trouvé les quantités du repas du midi un peu light. (Pro-tip: un développeur, ça a faim !) Côté nourriture, c’est difficile de plaire à 30 personnes en 2 menus ! Mais on note d’essayer de changer de prestataire pour les repas.&lt;/p&gt;&lt;p&gt;Ça nous fait plaisir que le concept plaise autant ! Il ne faut pas oublier que c’est en grande partie dû aux coachs. Encore un grand merci à eux !&lt;/p&gt;&lt;p&gt;← revenir à &lt;a href="/2018/02/05/MKTDs-articles-3.html"&gt;MKTD#2&lt;/a&gt; → Article suivant &lt;a href="/2018/02/05/MKTDs-articles-5.html"&gt;MKTD#4&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <category term="reactive"/> <summary>MKTD#3 : La programmation réactive ça vous tente ? #Reactive Début 2017, la Programmation Réactive était en train de devenir la grosse tendance. Intéressant pour plusieurs Monkeys, on a décidé de faire venir une “guest star” pour animer ce MKTD : Sébastien Deleuze. Il a vite adhéré à notre concept et s’est prêté au jeu.</summary> </entry> <entry xml:lang="fr"><title>MKTD#2 On remet le couvert autour d’#Angular2</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-3.html" rel="alternate" type="text/html" title="MKTD#2 On remet le couvert autour d’#Angular2"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-3</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-3.html">&lt;h1 id="mktd2--on-remet-le-couvert-autour-dangular2-react-aureliajs"&gt;MKTD#2 : On remet le couvert autour d’#Angular2 #React #AureliaJS&lt;/h1&gt; &lt;p&gt;Même si ça a été la course pour organiser le premier événement en moins de 2 mois, cette première expérience nous avait vraiment donné l’eau à la bouche. On a rapidement décidé de remettre ça sur le même format autour d’Angular2. &lt;!--more--&gt; Sur les 6 derniers mois, nous avions expérimenté les bêta d’Angular2. Les annonces de la sortie de la RC se rapprochant, nous avons programmé le deuxième MKTD en Octobre 2016. Angular 2 était le framework à la mode pour 2016, mais il était en concurrence féroce avec la bibliothèque React qui ne cessait de s’améliorer, et le petit nouveau qu’était Aurelia.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“Le face à face à face était tout trouvé !”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;En revanche, à ce moment, nous avions une faible connaissance en React et nous ne connaissions Aurelia que de nom. Si nous voulions assurer un coaching de qualité il nous fallait du renfort. Nous avons alors décidé de faire appel aux copains pour coacher des MKTD. (D’ailleurs toi aussi, comme &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt;, &lt;a href="https://twitter.com/JulienPradet"&gt;Julien&lt;/a&gt; et &lt;a href="https://twitter.com/HadrienToma"&gt;Hadrien&lt;/a&gt;, tu peux coacher un MKTD ;) &lt;a href="https://twitter.com/MonkeyPatch_io/status/941341015474081792/photo/1"&gt;ici&lt;/a&gt;&lt;/p&gt;&lt;h2 id="en-quelques-jours-plus-de-40-inscrits"&gt;En quelques jours, plus de 40 inscrits&lt;/h2&gt; &lt;p&gt;Cool mais… il nous fallait un plus gros budget ! On avait bien sûr le soutien financier de MonkeyPatch, mais qui était encore une toute jeune pousse (à peine 7,5 mois). Il nous fallait donc un sponsor. En discutant de ces problématiques avec &lt;a href="https://twitter.com/MrZoule?lang=fr"&gt;Etienne&lt;/a&gt;, d’Occitech, il nous a proposé de participer aux frais. Ça c’est fair-play !&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/vVQa-y-4JlV01WRfVzeCqp3RrW9ZkAcSTe9QM-zPsOH4Si_TrDNMvWbZC9JqN_EElFTQRrvGDb-shfZH3e7V3PYvFOr5NNRdHPiv5L5bc9N1DeZx5yK7yvaa16NCSE7p6xlELtq8zFTxgtNDlUr1GsHERpZj2u4h8ZAnr9ZUva1_tGk7xK6ARPq60AcEyqKS1J6JhNte7mZ4b9o2_Zkm_0TnfCh-4JDlbbqfHc_VaVa25q5gxf6v92pOWkxTNRjqxHQGPZb5ageVZv5i3YKKw9RYCNAWWXiUHv4B-vmr0RQ8AVGAM9fHt_WlrJvUzmziIoybF8q4YUU1vUH0pD3k-56UqeExt2ypYwOYJPVgaxx5hIMHIs0hQplh-SyqB9E8T3ndxEwcaQJ88MPY0iJk_NeqFbQeWVsOdu0CEox_aqE5H5Nd672PfXzYQHeUDT2ggGQAHtOYpHnME--ovC5Vn_DwOzNDe8XB3OQQUKrI-2MRLC3w9bBgevI3GUH2X_PB9Iho7D4ZsRzeQtNMrzdOX0QL7nmMT4WSgfmNHsTaPf6oLww1P-OGmabVA4f3vcEbNiV25WgGI5sbnD7mDb_bMjXhxfBVeOiNjuyFLuUXgHAZoopDuvrX6ZnZvT1C-ahJsBUf2yaNUECEhjGl-q5Yi_jk6V23EGSG=w1499-h903-no" alt="MKTD3 Reviews" /&gt;&lt;/p&gt;&lt;p&gt;On a décidé de façon collégiale qu’il n’y aurait qu’un seul sponsor mis en avant par événement, car nous laissons un temps de parole au sponsor et le mettons en valeur toute la journée, mais nous ne voulons pas que ce temps empiète sur le temps de codage des participants.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;“1 sponsor par MKTD est un bon deal.”&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="nouveau-concept--la-table-ronde-pour-échanger-avec-les-coachs"&gt;Nouveau concept : la table ronde pour échanger avec les coachs&lt;/h2&gt; &lt;p&gt;Lors de ce MKTD#2, en fin de journée, nous avons testé pour la première fois la table ronde avec les coachs. Comme le niveau d’un MKTD est soutenu, on demande aux participants de ne pas monopoliser le coach avec ses problématiques projets. Mais c’est frustrant non ? On a le coach à côté et on ne peut pas lui poser de questions approfondies, pourtant les réponses pourraient être intéressantes pour d’autres participants. Pour remédier à ça, en fin de journée, on consacre une demie heure pour les questions projets en mode “table ronde”. Ça a beaucoup plu ! On l’intègre dans le format des MKTD.&lt;/p&gt;&lt;h2 id="une-fois-de-plus-de-supers-retours-pour-ce-mktd-"&gt;Une fois de plus, de supers retours pour ce MKTD !&lt;/h2&gt; &lt;p&gt;C’est vraiment lors de cet évènement, que l’on a pu tester le concept. On a eu de très bons retours sur l’organisation et beaucoup sont prêts à les recommander.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/osRW-7g2HQEGYKa-IfszsSbDsYlt-hyJo-1ZlDd2C1H6EcUKWqXqSyNv2z2GBm-cSxoavTRk9NiR3UXNYfmKYqJFsf5jCp5PlTlx3fQHHSK-D5PXXpbB0dYPWkLI_jzJmP2HTlyJEOfmp5lBc8qr0u1GJ641Q7T4Fe1A4I80Be3EB3eC2qftDsPgA3C2lCCl3sg-G3hus1pf6KL4qrLoCXmyzmI0fwuNDXDlWnmkyRHwMtBOaclL1QbBVS6guU4eGHr6TDKQvKEDk9YzR6TyUyHuDS9iNseNkXsdfTbSLvITYVOA1_zUFu1V0GsFF2jR6PvRzX990uostDBOCEN2CZnt6fui1apk_brXrWYg15dunXHw3DBrST9jvAzlpYU2JNhYZArFVwxT7mVan49pTxxI6NCFRrfbHdHZJhQALsO1n7SOnPVE95i9VRp0C3R9zwLNX2SUHScKboXoPt_v787bXYIGbbZvgU3BPjD7ePHM_D3rcSTbNJP59_qlY8WzkUFONqtGuB-rwkqJzZcsMX1vM6EgYK2Rg7O4ahPqqiRXVoUNMVca34sFC-DVTiLNwHvX-7IWk5bQP3G_h2OTJtj2ZtBD_q8qdxnO7Mhufy5mR5IEjNRkFRV3JLXc5ZQNEwIIFIjEKBKTmftgFvOscRxlArReLu8L=w1867-h720-no" alt="MKTD3 Reviews" /&gt;&lt;/p&gt;&lt;p&gt;Côté déjeuner, certains nous ont fait remarquer qu’ils n’ont pas eu assez à manger, à surveiller de plus près pour les prochaines éditions.&lt;/p&gt;&lt;p&gt;Sur les 31 participants personne n’est arrivé à finir tous les exos mais une grande partie est presque arrivée à la fin. En revanche, expérimenter 3 technos sur la même journée complique vraiment le déroulement du MKTD. Ça fait trop, trop de présentations de techno, trop de comparaisons, trop de questions… On privilégiera donc des MKTD à 2 technos et pourquoi pas essayer avec une seule ?&lt;/p&gt;&lt;p&gt;Organiser un MKTD prend beaucoup de temps, et la rédaction d’articles techniques de qualité en prend tout autant. ll faut se faire à l’idée, avec nos projets, on ne peut pas consacrer plus de temps à la rédaction d’articles. Dommage car on aimait bien l’idée de partager ces retours d’expériences.&lt;/p&gt;&lt;p&gt;À lire aussi, l’article de &lt;a href="https://twitter.com/Maxime_Pawlak"&gt;Maxime&lt;/a&gt;, participant de l’équipe Angular2 sur &lt;a href="https://medium.com/@Maxime_/retour-sur-les-monkey-tech-days-02-76c39b3b94c7"&gt;Medium&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“Et si on tentait avec une seule techno ?”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;← revenir à &lt;a href="/2018/02/05/MKTDs-articles-2.html"&gt;MKTD#1&lt;/a&gt; → Article suivant &lt;a href="/2018/02/05/MKTDs-articles-4.html"&gt;MKTD#3&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <category term="angular2"/> <category term="react"/> <category term="aureliaJS"/> <summary>MKTD#2 : On remet le couvert autour d’#Angular2 #React #AureliaJS Même si ça a été la course pour organiser le premier événement en moins de 2 mois, cette première expérience nous avait vraiment donné l’eau à la bouche. On a rapidement décidé de remettre ça sur le même format autour d’Angular2.</summary> </entry> <entry xml:lang="fr"><title>MKTD#1 Expérimentation du format</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-2.html" rel="alternate" type="text/html" title="MKTD#1 Expérimentation du format"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-2</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-2.html">&lt;h1 id="mktd1--expérimentation-du-format-feign-retrofit"&gt;MKTD#1 : Expérimentation du format #Feign #Retrofit&lt;/h1&gt; &lt;p&gt;En juin 2016, au gré de quelques recherches sur le net, on a découvert un petit espace de coworking nommé &lt;a href="https://www.harrycow.com/"&gt;HarryCow&lt;/a&gt;, &lt;!--more--&gt;qui venait de se créer, à peine 15 jours avant. Les gérants d’HarryCow, Nathalie et Benoît ne connaissaient pas bien l’univers des hackathons ou des Techdays mais le courant est passé. C’était parti pour une expérimentation de notre concept, chez eux, autour de Feign et Retrofit !&lt;/p&gt;&lt;p&gt;Les coachs, &lt;a href="https://twitter.com/EmmanuelVinas"&gt;Emmanuel&lt;/a&gt; et &lt;a href="https://twitter.com/ilaborie"&gt;Igor&lt;/a&gt; ont alors préparé une série d’exos pour que chacun puisse apprendre et partager réellement en équipe. Bien que nous souhaitions un événement avec un niveau soutenu, il ne fallait pas non plus qu’il soit sans vie. On a décidé que les MKTD seraient à notre image, articulés autour de la bienveillance, du partage et de la décontraction (pas la peine de se mettre de pression).&lt;/p&gt;&lt;p&gt;Le 8 juillet 2016 s’est déroulé le premier MKTD. Une petite dizaine de ‘TechAddicts’ (principalement des personnes de notre réseau) a été répartie en 2 équipes pour coder les exos. Puis à la fin de chacun d’eux, on demandait aux TechAddicts de pitcher les intérêts et les performances des résultats obtenus.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/rzJgydSqOvXJ2y7_Bn4x6hXFTnSM1TWqdkkM4XTehib17qqVIAea7JtIt0OcDT5yqtZFIRBjpx6FEqOfS4a_W-TZMmIIf2aiVDFxNBwguHNFpNq03e-BcUSJWhgvQFlhpr7_VjVbZ-qOZEtdOyW4qtvpwvrW4OLYONZ5nXG6U65CJX9u7_c2TCzlj940SGJsV4s5SrO2_ZNyrdR6C7ExflyC53jI1tLfTY1JshH6ygPQR8gT5YsR9-LMJibH_OpQ1dR8H0g98vGENCg2CoS4FfKSuXkDR-cjpgTwvbJsDRXicnUUQ3yB_F2S4IlpMQljDjvkSpQHyEY8QSyUJJXsEEbLGYkUU7VL8rlKkeCmzIQNE4dXsmERpFMK8jFP3cZ5Y0kbcnZu8pTlSLDwXcedMFwXK3uWHlekd2YcRzOiMm2QVRclIkaUkzX2wzlFpgLFWJU4YR-NF8VVmODiiU-O4OBy6Ixkrqrx2L2K2iSSym50LW-QEfDYvx_O2HrkWmq9DCVsb2R2QLx-ydWPPNP0WtR-6iGSjtmBA2rZ4UqeUDwfl1rZlp_EVT2BkbKKkXwwX88tO_uUlmYJoEY5_UdRndFF-gCsAV4h2nMwBKPG7LQEzqVG-Fmp2y4_nahOGL784smMi9BfrniqkDrgjxTgqCTrjTZ2itEE=w1499-h903-no" alt="Tech addicts" /&gt;&lt;/p&gt;&lt;h2 id="bilan-de-cette-première-expérimentation-"&gt;Bilan de cette première expérimentation :&lt;/h2&gt;&lt;p&gt;Sur cette première édition, on n’était pas nombreux, mais le format a séduit !&lt;/p&gt;&lt;p&gt;Le concept de faire des exos en équipe sur une journée à beaucoup plu, mais on a eu les yeux plus gros que le ventre car les participants n’ont pu en faire que la moitié. On s’est dit qu’il faudrait ajuster le volume.&lt;/p&gt;&lt;p&gt;Pour essayer de définir quelle était la meilleure techno, à la fin de chaque pitch, les coachs et les participants étaient appelés à voter. Euh… ça n’a pas été très convaincant.&lt;/p&gt;&lt;p&gt;On a également initié la rédaction d’articles pour partager notre expérience avec ceux qui n’ont pas pu venir : &lt;a href="2016/08/09/MKTD-1-feign-vs-retrofit-&amp;amp;-58;-1-prise-en-main.html"&gt;Fein &amp;amp; Retrofit 1&lt;/a&gt; &lt;a href="/2016/08/10/MKTD-1-feign-vs-retrofit-&amp;amp;-58;-2-aller-plus-loin.html"&gt;Fein &amp;amp; Retrofit 2&lt;/a&gt;&lt;/p&gt;&lt;p&gt;“ Good job guys”&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/gpKAtXJq8cjL160kMpiih1-0MmZRd7piSX-LR3e-ZovPDx48oU0mHegPCcRd2PTjiOTN-5WUbr0ANNRuUxk8BOiqL75_8rLIRNrXf0yrlxZLUgQVLiFPJfT1Ld5uOgIFVNC2zR69gaTF62f-4dN9KecSXpLwYOO6S6yZJohr41b_5MK9lhVdVTnFKXrUlHQVkDz0Gwoh6p8dY8FVSuEYS4dthNB-WHPhOIQnsZA2CEffWZoRcoWMPagAoljaIgMmisncuKZq4WiO7rX1mgx2saR3toKMHpcFxi1zoDroFbSR05eDJWIfdGFouGJs1HcjAz-10dL8ZY9Xcy31aev9I-stlvlSNAd1M_vIMry_rGmji_kjJk0wM1V0kFq0zuVseDXD1qSJj716HkP4J1GpcK1V9Skehx4FeAjwsyVg6PLxQFnLKx_wX1PtU3lmV4VDUOMVUjzGMAJjkZ8XH2p2bs5nfTux6OCkCtlFe9h7kqwjc2rytZ43j8Nw9MCK7U8CSIoEs2fpnphB-08YIpnIK-x22o3cCkan6ffTfKkiX8fe99ovRYW8-Nzgq8DhxkkVCGXACtklWbHSMnWN8IbIkhFhOYqDU1UdWakIpf8U8R-uTPLeeZysKueBBRJP7qqwZTmgLF3OeHPIobBDtJ0X-ISESPimbNWD=w300-h230-no" alt="" /&gt;&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“Super encourageant pour en faire d’autres”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;← revenir à &lt;a href="/2018/02/05/MKTDs-articles-1.html"&gt;l’article principal&lt;/a&gt; → Article suivant &lt;a href="/2018/02/05/MKTDs-articles-3.html"&gt;MKTD#2&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <category term="feign"/> <category term="retrofit"/> <summary>MKTD#1 : Expérimentation du format #Feign #Retrofit En juin 2016, au gré de quelques recherches sur le net, on a découvert un petit espace de coworking nommé HarryCow,</summary> </entry> <entry xml:lang="fr"><title>Pourquoi avons-nous créé les MonkeyTechDays ?</title><link href="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-1.html" rel="alternate" type="text/html" title="Pourquoi avons-nous créé les MonkeyTechDays ?"/> <published>2018-02-05T00:00:00+01:00</published> <updated>2018-02-05T00:00:00+01:00</updated><id>http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-1</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2018/02/05/MKTDs-articles-1.html">&lt;h1 id="pourquoi-avons-nous-créé-les-monkeytechdays-"&gt;Pourquoi avons-nous créé les MonkeyTechDays ?&lt;/h1&gt;&lt;p&gt;Nous voulons vous faire découvrir d’un peu plus près notre univers. Chaque MonkeyTechDays (MKTD) réunit une 30aine de Tech Addicts. Comme chaque Monkey, ces passionnés du dév. cherchent à suivre les évolutions rapides des technos. En équipe nous expérimentons, évaluons les technos innovantes sous forme de défis techniques. Une journée au plus près du code, fun et décontractée, où des coachs passionnés aident les participants à réaliser des exos de niveau soutenu.&lt;/p&gt;&lt;!--more--&gt;&lt;blockquote&gt; &lt;p&gt;“Tu as déjà participé ou tu aimerais participer à un MKTD, mais connais-tu la genèse de cet événement ?”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Avant de savoir comment est né l’événement, il nous semble essentiel de présenter en 2 mots la société où travaillent les organisateurs à l’initiative des MKTD.&lt;/p&gt; &lt;h2 id="monkeypatch-une-équipe-de-passionnés-de-dév"&gt;MonkeyPatch, une équipe de passionnés de dév.&lt;/h2&gt;&lt;p&gt;Chez MonkeyPatch, notre principale activité est d’intervenir en tant que dév. senior, architecte et/ou expert technique, dans les technologies Web, Mobile, Devops et Big Data. Nous nous entourons de passionnés de dév. d’au moins 5 ans d’expérience, souhaitant rester au plus près du code, et aimant relever quotidiennement des défis techniques et innovants. Nous envisageons de construire une équipe toulousaine de 25 à 30 Monkeys.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“La recette pour être Monkey : des bananes, du fun, des bières, de la passion pour le code, et une bonne dose de connaissance en dév.”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Nos clients font appel à nous pour notre expertise technique, pour les accompagner à intégrer de nouvelles technos et participer à la réussite de leurs projets. Aucun Monkey n’aime vraiment porter cette casquette “d’expert”. Comme la plupart des dév. on trouve que le mot “expert” manque un peu de modestie. Mais il permet d’avoir un réel rôle à jouer au sein des projets avec beaucoup de confiance sur nos propositions techniques.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“I’m smart enough to know that I’m dumb.” Richard Feynman&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/0hafZvSnfTB9gUkUpD0CH__xfgu_2HqQogugeMfhBDiryK08FHSrLOawQQLvQ0e7G656ntH92zAT4i_c0sWqNMPkcFJa7nd1NYULUGDXUCV8AfeG91BFZbfgAQW3xndstsjMFkuadFxfRv9z620_iAfjQKYC8cEHz5kOC80cjphPEuUmwtvUT35n8ZqGHWVZRXq1_eSiaqSb9YmvTCAJL1mEhjqaO1-AE7KaKM55bA8-7zRbvp3PKFpvSBCZwLwQXY2yFZ0Wt6IsUbsd1LiZYHI3ozgX2iDpD3e0QBSKige_8Ti9gT0EI2iQ5HyH-z9UjN3RSzeQ0V5ziiNXK2gd-q9-vqOLXJszCIApHB8CWTqwV7w7PKV2TL8xKbMYFnkrVVcilzr_3i_AwO1aMLSDBlmErbaqhr4btMgivbjqJOZBnB-17bi-ruTiacLTeMMrOnTlLcG3S1zwVtG2AOg2qRWjNPoTn9UY7cNNuuU58DqKwdts-oP93nk_Cgm9ISjJ2tYGidCO1s-IWfs1zKux9wzQUE2HvEzbCteTr3lBjURvHGjg2lFvrsACLv6-9Lm4ihOeXxIoeM-gna91y-UO5F3qmV-FXx5GP77cA2v1EAbka5gL4Nxy4g8Ta0mve3aWx3AH8FRN-uskewmb4y1Z5TUOqUTan1OH=w1867-h471-no" alt="Image of Team" /&gt;&lt;/p&gt;&lt;p&gt;Pour en revenir aux MKTD, nous avons voulu faire un événement qui nous ressemble, afin de transmettre notre état d’esprit, nos valeurs, en une journée 100% gratuite.&lt;/p&gt;&lt;h2 id="la-genèse-de-lévénement"&gt;La genèse de l’événement&lt;/h2&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/_tkd4-VAzTxijcx_za7IcifPJeFDfjaJB7jowRzRdyNxChlCLMvbmwWgqOIwmuF0d1WL-AxMJJL4gY8YF1GAmnTozOdHGUOM5jELRSamjgPkBuW4jg8Puo0j2CJsWWB-KQZ3xZxIC1J4zQb4N8k6J2DXMzDfCHsL3WTwVx4HoG9NxLMr04xPQURF_V7NZRVL1JS4GD4UgtqafKMLGEk-ruB4SdhEY0FiPrI05NZ817mKmq3aIoOYTO8KwpScl92StPvr8GRt4OuzcvYR3WY2-NikrD_IN7WBWXUn95v1FLw8l6c56ZktRlErAic5zjMh7FF1YdiMDNXnR3S-Xbc6YyqbG9LG3rndlIMn3BrI0ruG4Zjxlms-LocL09vBjmIRQZNQsUvzlyrYkTRNqWgfAIcvHvUfwblsrIYKbtdjAp08PRjRoDNt3Mw31okRAwmhEF40V7GzXKzPOM0g67FaQWWdEh4zaGhPEqMK6G5kvMo1Yemg3Cp664hvxyRXP-b942VezL-ysP7XJm0UjouGwKYLtFCys6g7DEMa4ho5_e7iIGV7TRFg90fepeDAYMtzO5vVN4gQEr_mmaTI_ES36pOP1Fn489JjGevkF-7CSE6dfxHxupSxwApdiAQY9z8-layV7ben6pgpgLqoiLA9vSL-jhp7pcVe=w1867-h468-no" alt="Image Of Logo" /&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Comment l’idée a-t-elle germé ?&lt;/strong&gt; Avant même de créer MonkeyPatch, Emmanuel et Matthieu connaissaient l’importance de dédier suffisamment de temps à la veille technologique et à la montée en compétence sur des technologies/langages modernes. Trouvant dommage que chaque membre de l’équipe le fasse dans son coin, ils ont réfléchi dès les premiers mois à la mise en place de journées où les Monkeys pourraient découvrir ensemble une techno moderne tout en approfondissant réellement le sujet.&lt;/p&gt;&lt;p&gt;Pour aller plus vite et pour gagner en efficacité, il était préférable que celui qui est le plus avancé sur une techno, puisse challenger et faciliter la montée en compétence des autres. Le meilleur moyen pour ce partage est donc de le faire ensemble avec un “coach” sur chaque techno.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Quand et comment l’organiser ?&lt;/strong&gt; Avec l’aide des premiers Monkeys (Igor et Bruno), plusieurs formats furent envisagés : le soir après le travail, en semaine et même le Week-End, entre Monkeys ou encore ouverts à tous… Le champ des possibles était presque infini. Le spectre des technos qui nous intéressait était également très large : de Kotlin à Swift, en passant par le Front (vueJS, ReactJs, Angular, Aurelia, …), sans oublier les problématiques Big Data ou DevOps…&lt;/p&gt;&lt;p&gt;Profitant du démarrage d’un projet interne, Igor et Emmanuel ont eu une réflexion autour des problématiques de clients REST. Igor proposait d’utiliser Feign et Emmanuel Retrofit. Quelle belle occasion pour expérimenter un premier événement !&lt;/p&gt;&lt;p&gt;Après plusieurs heures de réflexion, Igor, Emmanuel et Matthieu ont décidé d’expérimenter le concept autour de Feign et Retrofit sur une journée entière, ouverte et gratuite pour tous les participants.&lt;/p&gt;&lt;h2 id="les-mktd-un-événement-à-notre-image"&gt;Les MKTD, un événement à notre image&lt;/h2&gt;&lt;p&gt;Sur une journée, entre Tech Addicts, on expérimente 1 techno moderne. La particularité des MKTD est que l’on crée plusieurs équipes, 1 par techno. Comme pendant un hackathon, on se challenge entre nous pour essayer d’avancer rapidement et efficacement sur la réalisation d’exercices. On compare les résultats de chaque équipe pour nous permettre de savoir quelle techno on préfèrera utiliser.&lt;/p&gt;&lt;p&gt;Le format des MKTD a évolué grâce aux participants et continuera à évoluer en fonction des nouvelles idées. Au début sous forme d’une série d’exercices de plus en plus difficiles, puis petit à petit, on s’est orienté vers un découpage en 3 parties :&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;Le matin, on explore les spécificités d’une techno. En fin de matinée, on est appelé à partager nos impressions en équipe, sous forme de pitch de 3 minutes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;L’après-midi, sous forme de défi technique, on analyse un problème posé pour le coder en utilisant ce que l’on a appris le matin. À la fin du temps imparti, on présente nos résultats sous forme de pitch de 5 minutes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;En fin d’après-midi, on échange tous ensemble autour d’une table ronde. On peut poser les questions liées à nos projets.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;L’intérêt principal d’un MKTD est d’apprendre, de partager et d’échanger avec d’autres dév. de la communauté, tous passionnés de nouvelles technos.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“On n’a pas toutes les réponses à la fin de la journée, mais on a une bonne vision sur les points positifs et négatifs de la techno.”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Si tu veux en connaître plus sur la vie des MKTD ou apprendre quelques anecdotes croustillantes, on t’invite à lire les articles sur les premières éditions :&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="/2018/02/05/MKTDs-articles-2.html"&gt;MKTD#1 : Expérimentation du format #Feign #Retrofit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="/2018/02/05/MKTDs-articles-3.html"&gt;MKTD#2 : On remet le couvert autour d’#Angular2 #React #AureliaJS&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="/2018/02/05/MKTDs-articles-4.html"&gt;MKTD#3 : La programmation réactive ça vous tente ? #Reactive&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="/2018/02/05/MKTDs-articles-5.html"&gt;MKTD#4 : Du challenge et du partage autour de #Kotlin #Swift&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="/2018/02/05/MKTDs-articles-6.html"&gt;Mktd#5 : Seulement 17 mois après la 1ère édition ! #Go #Rust&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Comme tu peux le voir, on recherche avant tout à suivre les évolutions technologiques et à créer un événement qui nous ressemble.&lt;/p&gt;&lt;p&gt;Maintenant que tu en sais davantage, tu as peut-être envie d’animer un MKTD avec nous. Tu peux nous faire tes propositions, sur le cfp : &lt;a href="https://github.com/monkeytechdays/cfp/issues/new"&gt;ici&lt;/a&gt; (et pourquoi pas devenir coach sur un des sujets proposés ?) N’hésite pas à parler de l’événement autour de toi.&lt;/p&gt;&lt;p&gt;On se voit à un l’un des prochains MonkeyTechDays ?&lt;/p&gt;&lt;p&gt;–&amp;gt; Rendez-vous le 16 Mars 2018 au &lt;a href="https://www.meetup.com/fr-FR/MonkeyTechDays/events/246514263/"&gt;&lt;strong&gt;MKTD#6&lt;/strong&gt; Stream processing (Apache Flink, Kafka Streams)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Suivez nous sur &lt;a href="https://twitter.com/MonkeyPatch_io"&gt;Twitter&lt;/a&gt; et &lt;a href="https://www.linkedin.com/company/monkeypatch-io/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Alteanne Fernandez</name> <email>alteanne@monkeypatch.io</email> </author> <author> <name>Matthieu Caylet</name> <email>matthieu@monkeypatch.io</email> </author> <category term="MonkeyTechDay"/> <category term="Tech days"/> <category term="MKTD"/> <category term="Tech Addicts"/> <category term="Techno"/> <summary>Pourquoi avons-nous créé les MonkeyTechDays ?Nous voulons vous faire découvrir d’un peu plus près notre univers. Chaque MonkeyTechDays (MKTD) réunit une 30aine de Tech Addicts. Comme chaque Monkey, ces passionnés du dév. cherchent à suivre les évolutions rapides des technos. En équipe nous expérimentons, évaluons les technos innovantes sous forme de défis techniques. Une journée au plus près du code, fun et décontractée, où des coachs passionnés aident les participants à réaliser des exos de niveau soutenu.</summary> </entry> <entry xml:lang="en"><title>J On The Beach 2017 — Review</title><link href="http://www.monkeypatch.io/en/2017/08/03/JOTB-malaga-2017.html" rel="alternate" type="text/html" title="J On The Beach 2017 — Review"/> <published>2017-08-03T00:00:00+02:00</published> <updated>2017-08-03T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2017/08/03/JOTB-malaga-2017</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2017/08/03/JOTB-malaga-2017.html">&lt;p&gt;&lt;a href="https://jonthebeach.com/"&gt;J On The Beach&lt;/a&gt; (JOTB) is &lt;em&gt;“A Big Data Conference On The Beach”&lt;/em&gt; happening in Malaga (Spain) and this year (2017) was its second edition. &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/panoramic.jpg" alt="Panoramic view — Seaside of Malaga" /&gt;&lt;/p&gt;&lt;hr /&gt; &lt;h1 id="tldr"&gt;tl;dr&lt;/h1&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;The staff was great, the speakers awesome and the talks interesting.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;I felt very comfortable and almost at home during the three days. The atmosphere felt like being at a local conference but with famous and renowned speakers from around the world.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Everyone I met - speakers/attendees/staff - was accessible and affable.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;I will detail the lunches and dinner in the rest of the article to make pauses between talks reviews and technical explanations, but it’s fair to say that the food was &lt;strong&gt;&lt;em&gt;great&lt;/em&gt;&lt;/strong&gt; and that &lt;strong&gt;&lt;em&gt;the organizers made sure we wouldn’t forget our stay&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;I came for distributed systems topics, and I’ve been served.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The party at the end of the event was &lt;strong&gt;&lt;em&gt;fantastic&lt;/em&gt;&lt;/strong&gt;, I’ve never seen so many geeks dance&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;hr /&gt; &lt;p&gt;I’ve discovered JOTB by accident in 2016, during the revelation of the &lt;a href="https://panamapapers.icij.org/"&gt;Panama Papers&lt;/a&gt; when I was searching for technical details about how the &lt;a href="https://www.icij.org/about"&gt;ICIJ&lt;/a&gt; managed to analyse this massive leak of data.&lt;br /&gt; I stumbled-upon Mar Cabra’s &lt;a href="https://www.youtube.com/watch?v=rjqHC5dYdfE"&gt;&lt;em&gt;“The tech behind the bigger journalism leak in history”&lt;/em&gt;&lt;/a&gt; , and after watching a few other talks I decided it was worth keeping an eye on it for the next edition.&lt;/p&gt;&lt;p&gt;Soon enough, the 2017 line-up was released, followed by the &lt;a href="https://jonthebeach.com/schedule"&gt;schedule&lt;/a&gt; and when I saw the subjects and the speakers I managed to get one of the first round of tickets.&lt;/p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Tickets booked, I&amp;#39;ll be &lt;a href="https://twitter.com/JOTB17"&gt;@JOTB17&lt;/a&gt; in May and will attend &lt;a href="https://twitter.com/aphyr"&gt;@aphyr&lt;/a&gt;&amp;#39;s workshop on &lt;a href="https://twitter.com/hashtag/Jepsen?src=hash"&gt;#Jepsen&lt;/a&gt; 🎉 Can&amp;#39;t wait!&lt;/p&gt;&amp;mdash; Arnaud Bos (@arnaud_bos) &lt;a href="https://twitter.com/arnaud_bos/status/816912096948613120"&gt;January 5, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;I didn’t know how to cut this article, maybe in half? or maybe an entry by talk was more appropriate?&lt;br /&gt; So I just kept everything in a single page.&lt;/p&gt;&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;&lt;p&gt;I’ll start by giving my experience of the conference just to try to make you feel what it was like to be there, I hope it’ll give context for reading my reviews of the talks.&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/venue.jpg" alt="La Termica" /&gt;&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;The title of the conference &lt;em&gt;“A Big Data Conference On The Beach”&lt;/em&gt; is not a scam: the beach is right there, 200 meters away from the conference venue &lt;a href="http://www.latermicamalaga.com/"&gt;La Termica&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The location was easy to find because it is a cultural center. It is not in the city center, more halfway between the airport and the center and can be reached in 40 minutes walk by the beach. There are hotels around and a bus stop 50m from the entrance, as well as city bikes spots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The place in itself is nice, the hallways and rooms are large and bright.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The staff was really welcoming every days, everyone speaking English and willing to assist the speakers and attendees.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The registration process took forever on the first day but someone was available to guide me to my workshop room so I didn’t have to search (thank you!).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The necklace with printed program schedule and plan was a really great idea, but on the other hand the names of the attendees were not that legible. Also the bracelet that’s &lt;em&gt;“your pass for the three days”&lt;/em&gt; that you can’t remove at night or to shower was annoying to me.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;During the workshop and also during the talks, one could find several power strips along the chairs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The conference WiFi was great during the two days of conference, but was really awful during the workshop and we even experienced an outage during 20 to 30 minutes (which is unfortunate when you’re &lt;code class="highlighter-rouge"&gt;SSH&lt;/code&gt;-ing onto cluster nodes to run Jepsen tests).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Breakfast, coffee/tea and milk was catered every morning and bottles of (cold) water were available all day long. There were also bottles of waters ready for each attendee in the workshop room which was a nice treat.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Speaking of treats, the swag bag was OK, but please bear in mind that &lt;em&gt;I’m not much fan of goodies&lt;/em&gt; in general:&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;The t-shirt was cool, plus there were women sizes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The aluminum water bottle was also a good idea&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only one sticker?&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A frisbee, because it’s on the beach, you know&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The rest I can’t remember and didn’t bring back home… ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;h1 id="day1-jepsen-workshop"&gt;Day1: Jepsen Workshop&lt;/h1&gt;&lt;p&gt;I wrote about this workshop &lt;a href="./JOTB-Jepsen-workshop"&gt;in a separate blog entry&lt;/a&gt; to save some space and not mix topics.&lt;/p&gt;&lt;p&gt;This other entry is just scratching the surface of what Jepsen is, what it does and how to does it.&lt;/p&gt;&lt;p&gt;I’m planning to write more about it in the future and I’ll make sure to put links here when it’s done.&lt;/p&gt;&lt;h1 id="day-2-talks"&gt;Day 2: Talks&lt;/h1&gt;&lt;h2 id="eric-ladizinsky---evolving-quantum-computers"&gt;Eric Ladizinsky — Evolving Quantum Computers&lt;/h2&gt;&lt;p&gt;This is the kind of opening that really stick with me.&lt;br /&gt; If you don’t know about Quantum Computers, &lt;a href="https://www.dwavesys.com"&gt;D-Wave Systems&lt;/a&gt; or Eric Ladizinsky, don’t feel bad, I didn’t know either (if you knew, good for you!).&lt;/p&gt;&lt;p&gt;So the conference started with a man going up on stage really naturally, presenting himself not as a programmer nor computer scientist but as a physicist.&lt;/p&gt;&lt;p&gt;He started talking about how, given our current tools and all computing power, we are still unable to solve the real problems we are facing a civilization: poverty, injustice, …others!&lt;br /&gt; Which, put that way, is frankly quite depressing…&lt;/p&gt;&lt;p&gt;He took a step back and gave us his analyze on how, through evolution, our species (&lt;a href="https://en.wikipedia.org/wiki/Homo"&gt;Homo genus&lt;/a&gt;) evolved step by step by first &lt;strong&gt;&lt;em&gt;discovering&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;using&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;&lt;em&gt;mastering&lt;/em&gt;&lt;/strong&gt; new tools (think fire, agriculture, inductry), and how &lt;em&gt;quantum physics&lt;/em&gt; might be another step forward.&lt;/p&gt;&lt;p&gt;He drew the parallel with computer science through our limited ability to find the most advanced models for a task in data science: we manage to find good results through the use of lots of training data and clever algorithms.&lt;br /&gt; But when some algorithm can be successful by throwing more computing power at them, some problem remain &lt;a href="https://en.wikipedia.org/wiki/Computational_complexity_theory#Intractability"&gt;intractable&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Quantum computers leverage the principles of quantum physics like &lt;a href="https://en.wikipedia.org/wiki/Quantum_entanglement"&gt;&lt;code class="highlighter-rouge"&gt;entanglement&lt;/code&gt;&lt;/a&gt; in order to evaluate all possible models and find the most efficient solution.&lt;/p&gt;&lt;p&gt;Eric gave us a great analogy with forgery: consider the molecules of metal forming a sword.&lt;br /&gt; The best sword ever can only be achieved by finding the best shape, the best arrangement possible of its molecules.&lt;/p&gt;&lt;p&gt;So, of all the possible combinations, which one is the best?&lt;/p&gt;&lt;p&gt;Quantum physics can help us explore all the possible solutions, and find the most efficient models whereas classical computers would require centuries of computation.&lt;/p&gt;&lt;p&gt;Considering quantum computers like that really blew my mind. Of course realizing this kind of processors is hard and expansive, but they already exist!&lt;/p&gt;&lt;p&gt;D-Wave are making quantum computers, and each new evolution is faster than the previous one at a much higher rate than our current CPUs.&lt;/p&gt;&lt;p&gt;At the moment it seems like only the NASA and Google can afford to buy some of them and try them on, but we, as programmers, &lt;a href="https://www.dwavesys.com/software"&gt;we can already program them&lt;/a&gt; with our current tools (Python, C++) thanks to cloud based environments and several layers of abstraction.&lt;/p&gt;&lt;p&gt;I’m short on words and my knowledge of quantum physics, quantum computers and the programming model to use them is limited, but if you are interested, here are some links:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://www.cbinsights.com/blog/quantum-computing-explainer/"&gt;WTF Is Quantum Computing? A 5-minute Primer&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://io9.gizmodo.com/what-will-nasa-be-doing-with-its-new-quantum-computer-1468333514"&gt;What will NASA be doing with its new quantum computer?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="inés-sombra--the-trouble-with-distribution"&gt;Inés Sombra — The trouble with distribution&lt;/h2&gt;&lt;p&gt;&lt;a href="https://twitter.com/randommood"&gt;Inés Sombra&lt;/a&gt; is an engineer at &lt;a href="https://www.fastly.com"&gt;Fastly&lt;/a&gt; and in this session she talked about &lt;strong&gt;tradeoffs&lt;/strong&gt; in building a distributed system. And &lt;em&gt;OMG she speaks really fast!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;If I could summarize the entire talk in a single word, it would be &lt;strong&gt;&lt;em&gt;“tradeoffs”&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Taking as an example the implementation of Faslty’s &lt;a href="https://docs.fastly.com/api/imageopto"&gt;Image optimizer&lt;/a&gt;, Inés presented several stages of the evolution of the Image optimizer and the pros and cons of each solution.&lt;/p&gt;&lt;p&gt;To give a little bit of context and grossly describe this service, it is and &lt;em&gt;image processing and caching&lt;/em&gt; solution.&lt;br /&gt; You give it the location of your original quality content images and a set of &lt;strong&gt;&lt;em&gt;V&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;arnish&lt;/em&gt; &lt;strong&gt;&lt;em&gt;C&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;onfiguration&lt;/em&gt; &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;anguage&lt;/em&gt; rules, and each time one of your clients requires an image it points to this high quality image and gives query parameters about the expected size, ratio, quality, etc, of the result it needs.&lt;br /&gt; Then Fastly’s Image optimizer will search for a cached version of the image result, optimize it on the fly in case of a cache miss, and eventually return the expected result after caching it.&lt;br /&gt; Of course a lots of details are missing but this is the big picture…&lt;/p&gt;&lt;p&gt;Throughout the talk, Inés weights the costs and benefits of:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;em&gt;pre-processing all the catalog then caching&lt;/em&gt; VS &lt;em&gt;on-the-fly transforming on a per-request basis then caching&lt;/em&gt;, or&lt;/li&gt; &lt;li&gt;&lt;em&gt;being centralized&lt;/em&gt; VS &lt;em&gt;being distributed&lt;/em&gt;, or&lt;/li&gt; &lt;li&gt;&lt;em&gt;being consistent&lt;/em&gt; VS &lt;em&gt;being available&lt;/em&gt; (or being &lt;em&gt;“fast enough”&lt;/em&gt;), or&lt;/li&gt; &lt;li&gt;&lt;em&gt;stripping metadata&lt;/em&gt; VS &lt;em&gt;keeping metadata&lt;/em&gt;, etc.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;All in all, I think the talk had both too much and too little content. Let me explain:&lt;/p&gt;&lt;p&gt;It is true that Inés speaks really fast, but she still had to rush through the last couple of slides in order to finish on time.&lt;br /&gt; On the other hand, the talk was really high level on technical details and I think that was the goal, but the tradeoffs slides with only pros and cons about the “current” version of the service, with not a lot of details about how this “current” version was designed made it difficult to really realize what/how choices were made.&lt;/p&gt;&lt;p&gt;It’s worth re-watching and take time to rewind now that the video is available:&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=m8CyenESI1c"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="kyle-kingsbury--jepsen-talk"&gt;Kyle Kingsbury — Jepsen Talk&lt;/h2&gt;&lt;p&gt;Once again, &lt;a href="https://aphyr.com/"&gt;aphyr&lt;/a&gt; strikes with his presentation skills and humor.&lt;/p&gt;&lt;p&gt;To paraphrase him: &lt;strong&gt;&lt;em&gt;“our databases are on fire”&lt;/em&gt;&lt;/strong&gt;, and what we do as developers is try to hide this instability to our users through nicely designed and shiny APIs.&lt;/p&gt;&lt;p&gt;But if we do our best for our users to continue riding around on unicorns all day long, we are sitting on top of systems of which we don’t really know the inner workings.&lt;/p&gt;&lt;p&gt;Since 2014, Kyle has been using &lt;a href="http://jepsen.io/"&gt;Jepsen&lt;/a&gt; to test databases, queues and other distributed systems on the basis of what he suspected was wrong or what the README and documentation of those softwares were stating.&lt;/p&gt;&lt;p&gt;He found numerous “bugs” and “inconsistencies”, published them in a &lt;a href="http://jepsen.io/analyses"&gt;series of blog posts&lt;/a&gt; and worked with some of the teams to help analyze problems and improve stability.&lt;/p&gt;&lt;p&gt;What he shares with us is that &lt;strong&gt;&lt;em&gt;we should test the software we use and we depend on&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt; We should &lt;em&gt;carefully read&lt;/em&gt; the claims and documentations of such systems, but not take anything for granted, because all of these systems are developed under physical and budget constraints, because &lt;em&gt;formal testing is hard&lt;/em&gt; and &lt;em&gt;simulation testing is hard too&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Implementations of distributed systems might not be perfect, and some kinds of &lt;em&gt;errors&lt;/em&gt;, &lt;em&gt;loss&lt;/em&gt; or &lt;em&gt;inconsistencies&lt;/em&gt; might be acceptable &lt;strong&gt;from a domain point of view&lt;/strong&gt;, but that problem should not be hidden and assumptions must be validated.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=tpbNTEYE9NQ"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;More on Jepsen and simulation testing:&lt;/h3&gt;&lt;p&gt;In the same series, I find this previous talk about Jepsen to be more informative for someone interested in &lt;strong&gt;&lt;em&gt;learning&lt;/em&gt;&lt;/strong&gt; about distributed systems, and it also might be the funniest talk I’ve ever watched: &lt;a href="https://www.youtube.com/watch?v=QdkS6ZjeR7Q"&gt;Jepsen II: Linearizable Boogaloo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I’ve also came across this &lt;a href="https://www.youtube.com/watch?v=4fFDFbi3toc"&gt;talk about simulation testing&lt;/a&gt; at FoundationDB. &lt;a href="https://en.wikipedia.org/wiki/FoundationDB"&gt;FoundationDB&lt;/a&gt; was a closed source &lt;em&gt;“multi-model NoSQL database”&lt;/em&gt; that has been acquired by Apple since this talk.&lt;/p&gt;&lt;h2 id="dharma-shukla--lessons-learnt-from-building-a-globally-distributed-database-service-from-the-ground-up"&gt;Dharma Shukla — Lessons learnt from building a globally distributed database service from the ground up&lt;/h2&gt;&lt;p&gt;For the first few seconds I was a bit bored by the tone of the presentation. Boy I was wrong!&lt;/p&gt;&lt;p&gt;During this talk, &lt;a href="https://twitter.com/dharmashukla"&gt;Dharma Shukla&lt;/a&gt; introduces us with &lt;a href="https://azure.microsoft.com/en-us/services/cosmos-db/"&gt;CosmosDB&lt;/a&gt;, formerly known as DocumentDB.&lt;/p&gt;&lt;p&gt;Honestly, I didn’t even know this was a thing, and yet it is a really interesting product developed during the last 7 years by Microsoft: a &lt;em&gt;schema-less&lt;/em&gt;, &lt;em&gt;multi-model&lt;/em&gt;, &lt;em&gt;globally distributed&lt;/em&gt; database in Azure Cloud.&lt;/p&gt;&lt;p&gt;There are articles that will better describe Cosmos DB than I could do, but what I will keep from Dharma’s talk is the amount of work the teams at Microsoft seem to have invested in ensuring strong and comprehensible SLAs for latency and availability, but also for consistency and throughput, which is another level of quality.&lt;/p&gt;&lt;p&gt;CosmosDB is fully &lt;strong&gt;&lt;em&gt;schema agnostic&lt;/em&gt;&lt;/strong&gt; and has its own way of structuring data so that you don’t have to worry about it (RDF under the hood?), and it also “indexes all the data”.&lt;/p&gt;&lt;p&gt;CosmosDB is &lt;strong&gt;&lt;em&gt;multi-model&lt;/em&gt;&lt;/strong&gt; in the sense that it supports &lt;em&gt;document&lt;/em&gt;, &lt;em&gt;graph&lt;/em&gt; of &lt;em&gt;key-value&lt;/em&gt; data types and uses a &lt;em&gt;SQL-like&lt;/em&gt; query dialect as well as MongoDB or graph APIs.&lt;/p&gt;&lt;p&gt;Another important feature of CosmosDB is it’s &lt;strong&gt;5 different levels of consistency&lt;/strong&gt;, from &lt;em&gt;“strong consistency”&lt;/em&gt; to &lt;em&gt;“eventual consistency”&lt;/em&gt;, Microsoft has implemented three other consistency models based on academic researches.&lt;/p&gt;&lt;p&gt;CosmosDB is available as a service on &lt;em&gt;Microsoft Azure Cloud&lt;/em&gt;. There you can choose and &lt;em&gt;elastically control with API calls&lt;/em&gt; the amount of storage and &lt;em&gt;scale the throughput&lt;/em&gt; of your application and pay as you go down to a &lt;em&gt;granularity of a second&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;All those features are really impressive, they even brought &lt;a href="https://fr.wikipedia.org/wiki/Leslie_Lamport"&gt;Leslie Lamport&lt;/a&gt; (inventor of the &lt;a href="https://en.wikipedia.org/wiki/Lamport_timestamps"&gt;Lamport clock&lt;/a&gt; and the &lt;a href="https://en.wikipedia.org/wiki/Paxos_(computer_science)"&gt;Paxos consensus protocol&lt;/a&gt; among &lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;other things&lt;/a&gt;) on board and used it’s &lt;a href="https://en.wikipedia.org/wiki/TLA%2B"&gt;TLA+&lt;/a&gt; formal language to design and verify for correctness. And they also use Jepsen…&lt;/p&gt;&lt;p&gt;I wasn’t expecting to be amazed by this talk but honestly if you’re not afraid of vendor lock-in or are already using Microsoft Azure, it looks amazing.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3Sq9AJzgxAg"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="lunch-wrapsbeers"&gt;Lunch: Wraps+beers&lt;/h2&gt;&lt;p&gt;The first day’s lunch consisted of wraps of different flavors, chicken, ham or veggie.&lt;br /&gt; They were good enough, and open beer bar was present just like the day before so one just had to manage to eat and drink wisely in order to be fully ready for the talks of the afternoon.&lt;/p&gt;&lt;p&gt;The lunch took place in the backyard just like on Wednesday, on the grass, under a beautiful sunny sky.&lt;/p&gt;&lt;p&gt;During the meal I reconnected with some of my fellow Jepsen workshop-ers to share our experiences about the morning talks:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="https://twitter.com/rocketarium"&gt;Andrei Dan&lt;/a&gt; and &lt;a href="https://twitter.com/einsmu"&gt;Sebastian Utz&lt;/a&gt; from &lt;a href="https://crate.io/"&gt;CrateDB&lt;/a&gt;;&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/neunhoef"&gt;Max Neunhöffer&lt;/a&gt; from &lt;a href="https://www.arangodb.com/"&gt;ArangoDB&lt;/a&gt;;&lt;/li&gt; &lt;li&gt;Sayat Satybaldiev from &lt;a href="https://jobs.zalando.com/tech/blog/"&gt;Zalando&lt;/a&gt; and&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/donnchadho"&gt;Donnchadh Ó Donnabháin&lt;/a&gt; from &lt;a href="https://www.poppulo.com/"&gt;Poppulo&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="anjana-vakil--custom-query-languages-why-how"&gt;Anjana Vakil — Custom Query Languages: Why? How?&lt;/h2&gt;&lt;p&gt;In this talk, &lt;a href="https://twitter.com/anjanavakil"&gt;Anjana Vakil&lt;/a&gt; explains what is the difference between a &lt;strong&gt;&lt;em&gt;DSL&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;CQL&lt;/em&gt;&lt;/strong&gt; and gives us some insights on how to design such languages with the goal of providing powerful abstractions while keeping usability in mind.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=y5wMNehHYBY"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="roland-kuhn--taming-distribution-formal-protocols-for-akka-typed"&gt;Roland Kuhn — Taming distribution: formal protocols for Akka Typed&lt;/h2&gt;&lt;p&gt;I’m interested in actors but not familiar enough with Scala, Akka and the specific implementation that is presented here to provide a good review of this talk.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kpvTd49YJpQ"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="christopher-meiklejohn--just-right-consistency-closing-the-cap-gap"&gt;Christopher Meiklejohn — Just-Right Consistency: Closing The CAP Gap&lt;/h2&gt;&lt;p&gt;&lt;a href="https://twitter.com/cmeik"&gt;Christopher Meiklejohn&lt;/a&gt; is a former software developer in industry turned researcher after having worked at &lt;a href="https://en.wikipedia.org/wiki/Riak"&gt;Riak&lt;/a&gt; at &lt;a href="http://basho.com/"&gt;Basho&lt;/a&gt;.&lt;br /&gt; In this talk he talks about “&lt;strong&gt;&lt;em&gt;Just-Right Consistency&lt;/em&gt;&lt;/strong&gt;” or how to “&lt;em&gt;exploit availability whenever possible and only synchronize exactly when needed to enforce application invariance&lt;/em&gt;”.&lt;/p&gt;&lt;p&gt;Topics of the talk:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Invariants&lt;/li&gt; &lt;li&gt;&lt;strong&gt;CAP&lt;/strong&gt; theorem&lt;/li&gt; &lt;li&gt;&lt;strong&gt;AP&lt;/strong&gt; and &lt;strong&gt;CP&lt;/strong&gt; systems&lt;/li&gt; &lt;li&gt;Consensus&lt;/li&gt; &lt;li&gt;Causality&lt;/li&gt; &lt;li&gt;Relative order&lt;/li&gt; &lt;li&gt;Joint updates&lt;/li&gt; &lt;li&gt;&lt;strong&gt;CRDT&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;…&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;And this is me watching the talk:&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/wat.jpg" alt="I don't even" /&gt;&lt;/p&gt;&lt;p&gt;This one gave me headaches, seriously. I’m not going to be able to summarize it in a short paragraph so I’ll go for the long one.&lt;/p&gt;&lt;p&gt;The state of cloud databases that has been for many years is that we traditionally put out data in databases in datacenter(s). We have clients from all over the world accessing a &lt;em&gt;primary&lt;/em&gt; copy and we &lt;em&gt;geo-replicate&lt;/em&gt; in order to ensure &lt;em&gt;fault-tolerance&lt;/em&gt; and provide &lt;em&gt;high-availability&lt;/em&gt; and &lt;em&gt;low latency&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;And in the event that one or more of the copy of the database cannot communicate with one another we have to make a choice, once and for all:&lt;/p&gt;&lt;p&gt;We either choose a &lt;em&gt;Consistent-under-Partition&lt;/em&gt; (&lt;strong&gt;CP&lt;/strong&gt;) or an &lt;em&gt;Available-under-Partition&lt;/em&gt; (&lt;strong&gt;AP&lt;/strong&gt;) approach.&lt;/p&gt;&lt;p&gt;Characteristics of a &lt;strong&gt;CP system&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;All the operations are &lt;em&gt;synchronized&lt;/em&gt; (write or read) on order to “&lt;em&gt;treat all the copies as one logical unit&lt;/em&gt;”. A &lt;em&gt;consensus&lt;/em&gt; protocol must be used in order to ensure a single system image across replicas.&lt;/li&gt; &lt;li&gt;This is &lt;a href="https://en.wikipedia.org/wiki/Serializability"&gt;&lt;strong&gt;&lt;em&gt;serializability&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; (e.g., Google Cloud Spanner): provide &lt;em&gt;strong consistency&lt;/em&gt; an minimize the amount of time you have to wait, but &lt;em&gt;still slower than an AP system&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Often &lt;em&gt;over-conservative&lt;/em&gt; but very popular because easier to program! On the programmer side, &lt;em&gt;the application is written without thinking about distribution&lt;/em&gt;: if I write something then I will read this something, this is a guarantee of &lt;a href="https://en.wikipedia.org/wiki/Linearizability"&gt;&lt;strong&gt;&lt;em&gt;linearizability&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Characteristics of an &lt;strong&gt;AP system&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Operations are &lt;em&gt;executed against local copies&lt;/em&gt; and then the result of those operations are then &lt;em&gt;propagated asynchronously&lt;/em&gt; which may take time&lt;/li&gt; &lt;li&gt;Reads and writes happen &lt;em&gt;extremely fast&lt;/em&gt;, so we may have &lt;strong&gt;&lt;em&gt;stale reads&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;write conflicts&lt;/em&gt;&lt;/strong&gt; between two updates on two different copies of the database since they haven’t &lt;em&gt;synchronized&lt;/em&gt;: they need to reconcile.&lt;/li&gt; &lt;li&gt;The system can keep operating in the even of failure: &lt;em&gt;Available but difficult to program&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Acknowledging the fact that there is no such thing as a &lt;em&gt;“one-size-fits-all”&lt;/em&gt; consistency model for applications, Christopher presents us a better approach:&lt;/p&gt;&lt;p&gt;Express our application invariants (properties of the system that must always hold true), and provide a way for the system to automatically infer from the application and tailor the consistency choices (a.k.a. feature by feature) based on those invariants to guarantee that no violation occur, this is &lt;strong&gt;&lt;em&gt;Just-Right Consistency&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Characteristics of &lt;strong&gt;Just-Right Consistency&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Write &lt;em&gt;sequential programs&lt;/em&gt; that enforce &lt;em&gt;application level invariants&lt;/em&gt; and preserve this application behavior &lt;em&gt;when deployed under&lt;/em&gt; &lt;strong&gt;&lt;em&gt;concurrency&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;and&lt;/em&gt; &lt;strong&gt;&lt;em&gt;distribution&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;We will have &lt;strong&gt;AP&lt;/strong&gt; compatible invariants: under an &lt;strong&gt;AP&lt;/strong&gt; system we can guarantee these invariants without synchronization.&lt;/li&gt; &lt;li&gt;And &lt;strong&gt;CAP&lt;/strong&gt;-sensitive invariants: &lt;em&gt;one way&lt;/em&gt; VS &lt;em&gt;two ways&lt;/em&gt; communication invariants: &lt;ul&gt; &lt;li&gt;One way: an operation that may or may not happen &lt;em&gt;atomically&lt;/em&gt; or in a particular order, but we &lt;em&gt;don’t need a response&lt;/em&gt; so it works without synchronization&lt;/li&gt; &lt;li&gt;Two way: two operations that are &lt;em&gt;related&lt;/em&gt; or &lt;em&gt;dependent&lt;/em&gt; will require &lt;em&gt;coordination&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Provides tools for &lt;em&gt;analysis and verification&lt;/em&gt; (e.g., at the IDE level): tell whether or not the application &lt;em&gt;will be safe when it’s deployed&lt;/em&gt;, bringing the application code and the database closer together.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In the talk we follow the case study of a lifecycle management tool for prescriptions and drug delivery to demonstrate how some application invariants may be &lt;strong&gt;AP&lt;/strong&gt; compatible while other being &lt;strong&gt;CAP&lt;/strong&gt;-sensitive.&lt;/p&gt;&lt;p&gt;Our invariants will be:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;em&gt;Relative order&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;referential integrity&lt;/em&gt;): Create a prescription record and reference it by a patient&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;em&gt;Joint updates&lt;/em&gt;&lt;/strong&gt; (&lt;em&gt;atomicity&lt;/em&gt;): Create prescription, then update doctor, then patient, then pharmacy&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;em&gt;Precondition check&lt;/em&gt;&lt;/strong&gt;: Deliver medication only the intended number of times&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The first two invariants are &lt;strong&gt;AP&lt;/strong&gt; compatible, and the third one is &lt;strong&gt;CAP&lt;/strong&gt;-sensitive as we shall see.&lt;/p&gt;&lt;p&gt;Characteristics of an &lt;strong&gt;AP&lt;/strong&gt; compatible invariant:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;No synchronization: can operate locally without blocking. Its updates are applied locally and asynchronously propagated.&lt;/li&gt; &lt;li&gt;Updates are fast and exploit &lt;em&gt;concurrency&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Updates must &lt;em&gt;commute&lt;/em&gt;: &lt;em&gt;non-commutative&lt;/em&gt; updates require &lt;strong&gt;CP&lt;/strong&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;What &lt;a href="https://en.wikipedia.org/wiki/Commutative_property"&gt;&lt;strong&gt;&lt;em&gt;commutativity&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is:&lt;/p&gt;&lt;p&gt;Imagine we have two replicas of a register that are in agreement.&lt;/p&gt;&lt;p&gt;If two concurrent operations set different values (e.g., 2 and 3) for a specific key on the two replicas and we don’t synchronize, we will have a divergence.&lt;br /&gt; Replication without coordination will not produce a single outcome, the system cannot by itself decide which value should win unless being told so.&lt;/p&gt;&lt;p&gt;These two operations are said to be &lt;em&gt;non-commutative&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Can we make non-commutative updates commutative? Yes:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Using deterministic conflict resolution: pick a value that wins.&lt;br /&gt; Use a timestamp-based algorithm (Cassandra’s &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;ast&lt;/em&gt; &lt;strong&gt;&lt;em&gt;W&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;rite&lt;/em&gt; &lt;strong&gt;&lt;em&gt;W&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;ins&lt;/em&gt;), or an application level merge/resolution (CouchDB, OrientDB, Aerospike, Riak).&lt;/li&gt; &lt;li&gt;using &lt;a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type"&gt;&lt;strong&gt;&lt;em&gt;CRDT&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;s: &lt;strong&gt;CRDT&lt;/strong&gt;s are extended sequential data types that encapsulate (built-in) deterministic merge functions. I’m not very familiar so I will try to get into more details in future blog posts, but there are many different designs of CRTDs for different uses.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;So what happens when we assume that the system we’re building has this property?&lt;br /&gt; All operations will commute.&lt;/p&gt;&lt;p&gt;Let’s examine &lt;em&gt;relative order&lt;/em&gt; and &lt;em&gt;joint updates&lt;/em&gt; first.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Relative order&lt;/strong&gt; invariant:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;We do something, then other actions, and ensure that the updates are seen in the proper order, this is relative order.&lt;/li&gt; &lt;li&gt;If an operation P implies Q than the program makes sure that Q is written before P. As long as it’s in order on the target replica and that changes are replicated in the proper order, the invariant is never violated.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;So we need a system that ensures &lt;a href="https://en.wikipedia.org/wiki/Causal_consistency"&gt;&lt;strong&gt;&lt;em&gt;causal consitency&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Updates that are causaly related to other updates (that influence other updates) that happen in an order should be delivered in the exact same order&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Joint updates&lt;/strong&gt; invariant:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Given &lt;em&gt;relative order&lt;/em&gt;, two replicas with updates are causally consistent, so far so good&lt;/li&gt; &lt;li&gt;But still, inconsistent state of the database can be read by clients/replicas &lt;em&gt;between&lt;/em&gt; updates&lt;/li&gt; &lt;li&gt;&lt;em&gt;Joint updates&lt;/em&gt; relate to &lt;a href="https://en.wikipedia.org/wiki/Atomicity_(database_systems)"&gt;&lt;strong&gt;&lt;em&gt;atomicity&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;: all-or-nothing&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;This is solved by grouping updates atomically in batches, taking snapshots along the way so clients (or other replicas) read consistent snapshots.&lt;/p&gt;&lt;p&gt;By ensuring these invariants on the database side based on the sequential program on the client side, at this point we are designing a system that has &lt;em&gt;relative order&lt;/em&gt; plus &lt;em&gt;joint updates&lt;/em&gt;, that is:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Transactional Causal Consistency&lt;/em&gt;&lt;/strong&gt;: the strongest &lt;strong&gt;AP&lt;/strong&gt; compatible consistency model.&lt;/p&gt;&lt;p&gt;Now for our last invariant: &lt;strong&gt;Preconditions check&lt;/strong&gt;:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Preventing getting the same prescription twice&lt;/li&gt; &lt;li&gt;This is basically a counter with addition and subtraction operation&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;What happens when these operations happen concurently?&lt;/p&gt;&lt;p&gt;Addition for instance: Take a counter and apply an addition on a replica and another addition on a second replica. We assumed earlier that operations on our system will commute, so for instance adding 2 and then 3 is the same thing as adding 3 and then 2.&lt;/p&gt;&lt;p&gt;Addition is then stable under concurrency and we don’t have to synchronize.&lt;/p&gt;&lt;p&gt;Subtraction on the other hand is not stable under concurrency. If we decrement our counter on a replica and do the same thing on another replicat without synchronizing, we could break the invariant that the counter must always be greater than zero.&lt;/p&gt;&lt;p&gt;This is &lt;strong&gt;CAP&lt;/strong&gt;-sensitive.&lt;/p&gt;&lt;p&gt;We have two solutions do deal with this issue:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;First: &lt;strong&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/strong&gt; We can be fine with this tradeoff and acknowledge that our invariant &lt;em&gt;wasn’t really an invariant&lt;/em&gt;, e.g.: ensure that a pacient gets its prediction rather than being too conservative.&lt;/li&gt; &lt;li&gt;Second: Forbid concurrency, a.k.a &lt;em&gt;synchronization&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Wow, that was a long read!&lt;/p&gt;&lt;p&gt;This model is interesting because we can choose &lt;em&gt;for each operation&lt;/em&gt; what consistency model suits best. And when I say “we”, I say the &lt;em&gt;system&lt;/em&gt;. Because it’s hard to reason about these problems and we need &lt;em&gt;new tools&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Need tools to analyse and allow or not operations to proceed by analysing &lt;em&gt;where invariants could be violated&lt;/em&gt; and tell us where we’re fine and where we need &lt;em&gt;synchronization&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;This is a research topic with lots of movement.&lt;br /&gt; Cristopher presents one model: the &lt;a href="https://syncfree.lip6.fr/index.php/2-uncategorised/51-cise"&gt;CISE Analysis&lt;/a&gt; (&lt;a href="http://software.imdea.org/~gotsman/papers/cise-tool.pdf"&gt;paper&lt;/a&gt;), but I’m not going to go into &lt;a href="https://github.com/SyncFree/CISE"&gt;details&lt;/a&gt; at this point.&lt;/p&gt;&lt;p&gt;So we have &lt;a href="http://syncfree.github.io/antidote/"&gt;AntidoteDB&lt;/a&gt;: &lt;a href="https://github.com/SyncFree/antidote"&gt;Open-source&lt;/a&gt;, implemented in Erlang, built on top of Riak core, providing &lt;strong&gt;&lt;em&gt;Transactional Causal Consistency&lt;/em&gt;&lt;/strong&gt; and is in alpha release.&lt;/p&gt;&lt;p&gt;Antidote respects &lt;strong&gt;&lt;em&gt;causality&lt;/em&gt;&lt;/strong&gt; by program order through clients and provide an &lt;em&gt;operations API&lt;/em&gt; as well as a &lt;em&gt;transaction API&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;A company is materializing around it and is in the process of raising money. The goal is to prodive the database open-source and for free and support and tools commercially.&lt;/p&gt;&lt;p&gt;Really interesting topic and talk, and lots of content!&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Vd2I9v3pYpA"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="santiago-ortiz--dynamic-data-visualization"&gt;Santiago Ortiz — Dynamic data visualization&lt;/h2&gt;&lt;p&gt;&lt;a href="https://twitter.com/moebio"&gt;Santiago Ortiz&lt;/a&gt; has a really interesting way of looking at things and explaining how he thinks data visualization is meant to become a more democratized way at analyzing data and not just something reserved to data scientists.&lt;/p&gt;&lt;p&gt;Referring to the &lt;a href="https://en.wikipedia.org/wiki/Method_of_loci"&gt;memory palace&lt;/a&gt; technique for remembering complex numbers, he draw the following parallel:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Machines use numbers for encoding of information including stories.&lt;/p&gt;&lt;p&gt;And we need stories to store numbers.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The rest of the talk was a portfolio of data visualizations which was nice to see but not really informative unless it is your thing.&lt;/p&gt;&lt;p&gt;On the plus side, one of the examples Santiago gave was about a book : [Rayuela](https://en.wikipedia.org/wiki/Hopscotch_(Cort%C3%A1zar_novel) by Julio Cortázar.&lt;br /&gt; This book, he explained, has been written in such a was that it can be read linearly or in an &lt;em&gt;unordered&lt;/em&gt; way following a pattern suggested by the author to jump from chapter to chapter.&lt;br /&gt; The visualization consisted in circles that allowed the viewer to screen and read from a chapter to another.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7t0ob7nGjN8"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="dinner"&gt;Dinner&lt;/h2&gt;&lt;p&gt;The dinner was served in the backyard once again. We had fresh our of the oven pizzas and beer as well as soft drinks.&lt;/p&gt;&lt;p&gt;I ate with other attendees and left shortly after so I missed the meetups that had been organized specially for the event.&lt;/p&gt;&lt;h1 id="day-3-talks"&gt;Day 3: Talks&lt;/h1&gt; &lt;h2 id="duarte-nunes--scylladb-nosql-at-ludicrous-speed"&gt;Duarte Nunes — ScyllaDB: NoSQL at Ludicrous Speed&lt;/h2&gt;&lt;p&gt;I was interested in this talk because of its summary highlighting the work done on performance on &lt;a href="http://www.scylladb.com/"&gt;ScyllaDB&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;ScyllaDB is a distributed databased based on the same model as &lt;a href="http://cassandra.apache.org/"&gt;Cassandra&lt;/a&gt;: dynamo-based. Its characteristics are &lt;strong&gt;high write availability&lt;/strong&gt;, &lt;strong&gt;eventual consistency&lt;/strong&gt; and inability to do &lt;em&gt;join&lt;/em&gt; queries.&lt;/p&gt;&lt;p&gt;ScyllaDB is &lt;em&gt;fully compatible&lt;/em&gt; with Cassandra’s API and file format so you can drop replace it without a single code line change.&lt;/p&gt;&lt;p&gt;Where ScyllaDB delivers is on the performance aspects. According to the benchmarks (we all love a good benchmark don’t we), &lt;strong&gt;&lt;em&gt;a 3 nodes ScyllaDB cluster is able to sustain the same load as a 30 nodes Cassandra cluster&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt; This is basically Cassandra on steroids&lt;/p&gt;&lt;p&gt;So how did the team manage to do that?&lt;/p&gt;&lt;p&gt;The answer is lots of time and efforts applying &lt;strong&gt;&lt;em&gt;good algorithms&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mechanical sympathy&lt;/em&gt;&lt;/strong&gt; principles in order to squeeze every bit from CPUs and memory.&lt;/p&gt;&lt;p&gt;ScyllaDB uses a &lt;strong&gt;&lt;em&gt;thread-per-core&lt;/em&gt;&lt;/strong&gt; model to avoid &lt;em&gt;context-switching&lt;/em&gt; between threads and allocates each core a &lt;strong&gt;private memory pool&lt;/strong&gt;. So blocking calls are forbidden and ScyllaDB adopts an &lt;em&gt;asynchronous&lt;/em&gt; programming style with &lt;em&gt;futures and promises&lt;/em&gt; for networking and file I/O and use message passing between CPUs to hide latency from accessing memory.&lt;/p&gt;&lt;p&gt;On the memory side, ScyllaDB is very cautious about its memory space allocation and manages to &lt;strong&gt;&lt;em&gt;compact&lt;/em&gt;&lt;/strong&gt; memory to avoid fragmentation.&lt;/p&gt;&lt;p&gt;ScyllaDB also features an interesting and tunable &lt;em&gt;self-monitoring&lt;/em&gt; tool (benchmarking itself) able to analyze the stress under which the database is and make decisions on which process to prioritize (queuing requests) and how to deal with background tasks such as &lt;em&gt;compaction&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;If you have a use case for Cassandra and are critical about your resources usage, I think it’s really worth taking a look at ScyllaDB which is also open source by the way.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qsj6KkbjMGI"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="danielle-ashley--uniting-church-and-state-fp-and-oo-together"&gt;Danielle Ashley — Uniting Church and State: FP and OO Together&lt;/h2&gt;&lt;p&gt;When preparing my schedule, I selected this talk because it “&lt;em&gt;talked about FP and OO together&lt;/em&gt;” and I really like the idea that a lot of OO problems could be solved by using more FP concepts and good practices. Or use OO techniques in order to gain performance in our FP code, for instance.&lt;/p&gt;&lt;p&gt;So I just &lt;em&gt;completely ignored&lt;/em&gt; the first part of the talk and didn’t understand the “Church and State” pun until later, so yeah, I’m stupid.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt; the conference I did my homework and looked at this church encoding thing and I realized it is really interesting as an exercise. At first, I didn’t see where it’d be useful unless you’re trying to implement a new language. But Danielle talked about the performance side of things, and it started to click.&lt;/p&gt;&lt;p&gt;Church encoding is a way of representing data and operators using &lt;em&gt;nothing more than recursion and anonymous functions&lt;/em&gt;. In this talk, Danielle is not showing us how to implement &lt;a href="https://en.wikipedia.org/wiki/Church_encoding#Church_numerals"&gt;Church Numerals&lt;/a&gt; but how, by thoroughly designing out programs, we can eventually make it simpler to &lt;strong&gt;&lt;em&gt;reason about&lt;/em&gt;&lt;/strong&gt; (keep state in isolation), &lt;strong&gt;&lt;em&gt;invert the flow of control&lt;/em&gt;&lt;/strong&gt; (push-pull &lt;em&gt;FRP style&lt;/em&gt; instead of downstream method calls) and &lt;strong&gt;&lt;em&gt;improve performance&lt;/em&gt;&lt;/strong&gt; (less object instantiation, and avoiding &lt;code class="highlighter-rouge"&gt;Optional&lt;/code&gt; overhead in this example).&lt;/p&gt;&lt;p&gt;This will deserve another blog post in the future to explore this topic.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Nn0eb9Tl1Bo"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="justo-ruiz-ferrer--adressing-the-elephant-in-the-room-what-a-post-hadoop-era-looks-like"&gt;Justo Ruiz Ferrer — Adressing the elephant in the room: what a post-Hadoop era looks like&lt;/h2&gt;&lt;p&gt;The title mislead to expect a talk giving insight about &lt;em&gt;where&lt;/em&gt; the big data processing techniques could go, but in the end for me it didn’t deliver.&lt;br /&gt; The talk was mainly just an explanation of the &lt;em&gt;“my big data is bigger than your big data”&lt;/em&gt; saying and a quick demo of &lt;a href="https://valo.io/"&gt;Valo&lt;/a&gt;’s streaming platform.&lt;/p&gt;&lt;p&gt;The speaker (and CTO of the company hosting the event) is clearly comfortable talking to an audience and fills the room with his speaking, and I expected some insights or takeaway thoughts about the direction in which our industry is going.&lt;br /&gt; But I ended up with sort of a statement about our architectures moving from &lt;strong&gt;&lt;em&gt;batch processing&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;streaming processing&lt;/em&gt;&lt;/strong&gt;, with the &lt;strong&gt;&lt;em&gt;lambda architecture&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;micro-batch&lt;/em&gt;&lt;/strong&gt; processing and the &lt;strong&gt;&lt;em&gt;dataflow model&lt;/em&gt;&lt;/strong&gt; which he didn’t mention.&lt;/p&gt;&lt;p&gt;No video available for this one.&lt;/p&gt;&lt;h2 id="lunch-paella"&gt;Lunch: Paella!!!&lt;/h2&gt;&lt;p&gt;The last day’s meal was an authentic &lt;a href="https://en.wikipedia.org/wiki/Paella"&gt;Valencian Paella&lt;/a&gt;, and I can tell you they nailed it. It was fantastic.&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/paella2.jpg" alt="Paella" /&gt;&lt;/p&gt;&lt;p&gt;Once again in the backyard under a sunny sky.&lt;br /&gt; I’ve had the occasion to share with other conference attendees about the previous talks and speak about programming languages and other geeky stuff.&lt;br /&gt; Fun time.&lt;/p&gt;&lt;h2 id="caitie-mccaffrey--distributed-sagas-a-protocol-for-coordinating-microservices"&gt;Caitie McCaffrey — Distributed Sagas: A Protocol for Coordinating Microservices&lt;/h2&gt;&lt;p&gt;Super interesting talk by &lt;a href="https://twitter.com/caitie"&gt;Caitie McCaffrey&lt;/a&gt; about how to orchestrate multiple &lt;em&gt;microservices&lt;/em&gt; in order to achieve &lt;em&gt;consistency&lt;/em&gt; of a single business action.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Distributed Sagas&lt;/strong&gt; is a protocol with no standard or open source implementation (yet) designed to create a layer of &lt;em&gt;coordination&lt;/em&gt; on top of several (micro)services without having to write &lt;em&gt;yet another service&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The example given in this talk is really simple and powerful: you have a &lt;em&gt;flight booking&lt;/em&gt; service to which was added a &lt;em&gt;hotel booking&lt;/em&gt; service as well as a &lt;em&gt;car rental&lt;/em&gt; service, and you want to offer your customers the ability to &lt;em&gt;book an entire trip&lt;/em&gt; including those three services.&lt;br /&gt; How do you ensure &lt;em&gt;business/domain level&lt;/em&gt; &lt;strong&gt;&lt;em&gt;consistency&lt;/em&gt;&lt;/strong&gt; without creating a new service?&lt;/p&gt;&lt;p&gt;This is not just an exercise: with the rise of microservices, we have moved away from the consistency &lt;em&gt;guarantees&lt;/em&gt; offered by our databases and must maintain &lt;em&gt;application-level consistency&lt;/em&gt;, or &lt;strong&gt;&lt;em&gt;feral consistency&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt; And for each new service that is deployed and available we could develop $n$ new combinations of &lt;em&gt;coordination&lt;/em&gt; services in order to deliver new value to customers…&lt;/p&gt;&lt;p&gt;Distributed Sagas introduces the concept of a &lt;strong&gt;SEC&lt;/strong&gt; (&lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;aga&lt;/em&gt; &lt;strong&gt;&lt;em&gt;E&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;xecution&lt;/em&gt; &lt;strong&gt;&lt;em&gt;C&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;oordinator&lt;/em&gt;) along with &lt;strong&gt;&lt;em&gt;action requests&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;compensating requests&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Based on a persistent &lt;em&gt;log&lt;/em&gt;, the stateless &lt;strong&gt;SEC&lt;/strong&gt; will come and write the actions of other services and operations results to the log &lt;strong&gt;&lt;em&gt;after acknowledgement&lt;/em&gt;&lt;/strong&gt; of the success of the action.&lt;br /&gt; The &lt;strong&gt;SEC&lt;/strong&gt; is then responsible to manage the consistency of the operations from a domain perspective and &lt;em&gt;replay&lt;/em&gt; or &lt;em&gt;rollback&lt;/em&gt; operations in case of failure.&lt;/p&gt;&lt;p&gt;The log in this case is like a &lt;em&gt;stack&lt;/em&gt;, where each operation performed by a service is &lt;em&gt;idempotent&lt;/em&gt; (in order to be replayed in case of delay or timeout for instance) and has a corresponding &lt;em&gt;backward idempotent action&lt;/em&gt; (&lt;em&gt;compensating requests&lt;/em&gt;) that can be performed: a semantic &lt;em&gt;undo&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Now this is interesting: because an &lt;strong&gt;&lt;em&gt;action request&lt;/em&gt;&lt;/strong&gt; from a service may be delayed or just fail without returning (and we can’t make a difference), it is important that it be &lt;strong&gt;&lt;em&gt;idempotent&lt;/em&gt;&lt;/strong&gt; in order to be &lt;em&gt;replayed&lt;/em&gt;.&lt;br /&gt; This way, we avoid the complexity of having to send a &lt;strong&gt;&lt;em&gt;compensating request&lt;/em&gt;&lt;/strong&gt; to undo an &lt;em&gt;action request&lt;/em&gt; that may or may not have succeeded.&lt;br /&gt; &lt;strong&gt;&lt;em&gt;By replaying, we make sure that we get a result and then we “cancel” if need be.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;For this protocol to be applicable, the business/domain model must be compatible with &lt;em&gt;eventual consistency&lt;/em&gt; because each service being exposed individually &lt;em&gt;exposes its state&lt;/em&gt;, and the whole saga cannot be made &lt;strong&gt;&lt;em&gt;isolated&lt;/em&gt;&lt;/strong&gt; nor &lt;strong&gt;&lt;em&gt;atomic&lt;/em&gt;&lt;/strong&gt; under such constraints without introducing a lot of &lt;em&gt;latency&lt;/em&gt; and &lt;em&gt;single point of failures&lt;/em&gt; (see the part of the talk about &lt;em&gt;two phase commit&lt;/em&gt;).&lt;br /&gt; Indeed, the &lt;strong&gt;&lt;em&gt;SEC&lt;/em&gt;&lt;/strong&gt; itself might look like a SPOF, but it is actually stateless so just spawning a new instance of it and replay the log is sufficient to &lt;em&gt;continue the saga&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;From what I understood both Uber and Twitter are currently experimenting this technique, so we will have to wait and see what comes out.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=0UTOLRTwOX0"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="martin-thompson--high-performance-managed-languages"&gt;Martin Thompson — High Performance Managed Languages&lt;/h2&gt;&lt;p&gt;Famous for his work on high performance coding, &lt;a href="https://twitter.com/mjpt777"&gt;Martin Thompson&lt;/a&gt; is a renowned expert and speaker.&lt;/p&gt;&lt;p&gt;At JOTB17, he gave us a talk about managed languages: languages that run on a virtual machine which provides garbage-collected memory management (Java, C#, etc.).&lt;/p&gt;&lt;p&gt;I’ve already listened to Martin in various &lt;a href="http://www.se-radio.net/2014/02/episode-201-martin-thompson-on-mechanical-sympathy/"&gt;podcasts&lt;/a&gt; and one thing that he mentions quite often is that:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Our CPUs Arent’t Getting Any Faster.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;But most of our applications aren’t really &lt;em&gt;CPU intensive&lt;/em&gt;, they are intensive in their &lt;em&gt;memory access&lt;/em&gt;.&lt;br /&gt; Hardware constructors are adding cores in order to increase speed, and they are doing wonders, but our little understanding of how CPUs and memory access work prevents us from gaining all of the benefits.&lt;/p&gt;&lt;p&gt;Just like there was a debate between &lt;em&gt;Assembler&lt;/em&gt; VS &lt;em&gt;Compiled Languages&lt;/em&gt;, there’s an argument between &lt;em&gt;managed languages&lt;/em&gt; VS &lt;em&gt;native languages&lt;/em&gt; and this talk is just about that.&lt;/p&gt;&lt;p&gt;Managed languages benefit from &lt;strong&gt;&lt;em&gt;JIT optimizations&lt;/em&gt;&lt;/strong&gt; that a sole static compiler cannot provide.&lt;br /&gt; These are &lt;strong&gt;&lt;em&gt;predictions&lt;/em&gt;&lt;/strong&gt; made on &lt;em&gt;real, measured data&lt;/em&gt;, and if it happens that the bets are wrong, &lt;strong&gt;&lt;em&gt;the JIT can correct itself&lt;/em&gt;&lt;/strong&gt;, &lt;em&gt;revoke&lt;/em&gt; some decisions and &lt;em&gt;make new optimizations&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Code branching&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If a static compiler armed with a good programmer branch prediction hint/information can be a solid optimization, a managed language is &lt;em&gt;able to use real data instead of static decisions and adjust over time&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Methods inlining&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Methods/Functions &lt;em&gt;can be inlined in case of hotness&lt;/em&gt; in order to avoid &lt;em&gt;function call overhead&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Loop unrolling&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The optimizer can also &lt;em&gt;measure which loops are hotspots&lt;/em&gt; and which are not, and decide to &lt;em&gt;unroll&lt;/em&gt; some rather than check and iterate.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Intrinsics&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The runtime can also &lt;em&gt;replace programmer instructions by architecture specific instructions&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;intrinsics&lt;/em&gt;&lt;/strong&gt;) in order to benefit from a the particular implementation.&lt;br /&gt; Something impossible for static compiler unless &lt;em&gt;compiling for a specific architecture&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Managed runtimes can &lt;em&gt;avoid virtual dispatch&lt;/em&gt; or going through jump tables by directly calling the ‘&lt;em&gt;right&lt;/em&gt;’ method of an object or &lt;em&gt;inlining&lt;/em&gt; it.&lt;br /&gt; By checking the number of subtypes we can &lt;em&gt;decide&lt;/em&gt; whether or not it’s worth to just &lt;em&gt;calling the method directly&lt;/em&gt;, using a simple &lt;code class="highlighter-rouge"&gt;if&lt;/code&gt; statement, go &lt;em&gt;polymorphic&lt;/em&gt; or &lt;em&gt;cache the code for a particular type&lt;/em&gt; if it is hotter than the others.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Garbage Collector&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The performance of a &lt;strong&gt;&lt;em&gt;Garbage Collector&lt;/em&gt;&lt;/strong&gt; depends upon its implementation, but also on how we, as programmers, deal with our objects.&lt;/p&gt;&lt;p&gt;Martin outlines the fact that &lt;strong&gt;&lt;em&gt;it is not allocation that is costly, but reclamation&lt;/em&gt;&lt;/strong&gt;…&lt;br /&gt; &lt;em&gt;The longer and object lives, the more operations the GC needs to do.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;In the end, &lt;strong&gt;&lt;em&gt;THE&lt;/em&gt;&lt;/strong&gt; most important thing to performance is &lt;strong&gt;TIME&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;em&gt;How much time and effort are we willing to put into implementing&lt;/em&gt; &lt;strong&gt;&lt;em&gt;good algorithms&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;and doing right choices™&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Some takeaways:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Avoiding cache misses&lt;/li&gt; &lt;li&gt;Amortising expensive operations&lt;/li&gt; &lt;li&gt;Mechanical sympathy&lt;/li&gt; &lt;li&gt;Algo &amp;amp; Data-structures&lt;/li&gt; &lt;/ul&gt;&lt;h3&gt;Fun facts:&lt;/h3&gt;&lt;p&gt;Martin is the author of &lt;a href="https://github.com/real-logic/aeron"&gt;Aeron&lt;/a&gt;, a &lt;em&gt;high throughput&lt;/em&gt;, &lt;em&gt;low latency&lt;/em&gt; messaging system (it is used by &lt;a href="http://www.onyxplatform.org/"&gt;Onyx&lt;/a&gt;, BTW).&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;Java implementation of Aeron is faster than native implementation of other fast messaging systems&lt;/strong&gt;: because of the &lt;strong&gt;&lt;em&gt;time&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;efforts&lt;/em&gt;&lt;/strong&gt; put into implementing &lt;strong&gt;&lt;em&gt;good algorithms&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Aeron has been ported to C++, then Go, then C#: and in the end &lt;strong&gt;&lt;em&gt;the fastest implementation is in C#&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt; C++ could be but would take much, much more time…&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Pz-4co8IaI8"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;&lt;h2 id="dinner--party"&gt;Dinner + Party&lt;/h2&gt;&lt;p&gt;After dinner (Camperos + beers), the organizers invited a flamenco dancer, singer and guitarist.&lt;/p&gt;&lt;p&gt;And after the local culture and art, the party started with a rock band doing cover songs as well as a group called &lt;a href="https://g.co/kgs/zVDQ3a"&gt;Los Vinagres&lt;/a&gt; coming from the Canary Islands.&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/flamenco.jpg" alt="Flamenco" /&gt;&lt;/p&gt;&lt;p&gt;I left with a few other attendees around midnight, going on a quest to find &lt;a href="https://en.wikipedia.org/wiki/Tapas"&gt;Tapas&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;&lt;p&gt;I think I’ve said it in the first part of the article but the conference &lt;em&gt;felt very comfortable&lt;/em&gt; and &lt;strong&gt;&lt;em&gt;almost like a local conference&lt;/em&gt;&lt;/strong&gt;, despite the number of people from abroad and the &lt;em&gt;awesome speakers&lt;/em&gt;.&lt;br /&gt; It was then really easy to speak to people.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thanks a lot to the organizers, speakers and other attendees for the great event.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;And thanks a lot to &lt;a href="http://www.monkeypatch.io/"&gt;MonkeyPatch&lt;/a&gt;&lt;/strong&gt; (the company I work for) &lt;strong&gt;for paying and allowing me to attend a conference in Malaga!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;On a side note, I’d like to apologize for the length of this article.&lt;br /&gt; It took me &lt;strong&gt;&lt;em&gt;way too long&lt;/em&gt;&lt;/strong&gt; to write this review and if you made it thus far, you’re a hero.&lt;/p&gt;&lt;p&gt;I really wanted to highlight the content of each talk and it took me researches and learning to give it back.&lt;br /&gt; I hope you enjoyed nonetheless. I don’t know if or how I will split my next conference review because I’m still new in this field, but there will be more content on most of the topics covered here in future blog posts.&lt;/p&gt;&lt;p&gt;Thanks for reading, see you!&lt;/p&gt;&lt;p&gt;&lt;img src="http://i-rant.arnaudbos.com/img/j-on-the-beach-malaga-2017-review/venue2.jpg" alt="Leaving" /&gt;&lt;/p&gt;&lt;h2 id="bonus-track-the-computer-science-behind-a-modern-distributed-data-store"&gt;Bonus track: The Computer Science behind a modern distributed data store&lt;/h2&gt;&lt;p&gt;By &lt;a href="https://twitter.com/neunhoef"&gt;Max Neunhöffer&lt;/a&gt; from &lt;a href="https://www.arangodb.com/"&gt;ArangoDB&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I’ve talked &lt;em&gt;multiple times&lt;/em&gt; with Max during the three days of the conference and &lt;em&gt;didn’t even know he was a speaker until the last day&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;I’ve watched his talk later on Youtube and I’ve found it really interesting to get a sense of some &lt;em&gt;major problems&lt;/em&gt; one can experience while learning about or working on &lt;em&gt;distributed systems&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;It goes fast so if you are not familiar with distributed systems problems such as &lt;a href="https://en.wikipedia.org/wiki/Consensus_(computer_science)"&gt;&lt;em&gt;consensus&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Log-structured_merge-tree"&gt;&lt;em&gt;log structured merge trees&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Clock_synchronization"&gt;&lt;em&gt;clocks&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Distributed_transaction"&gt;&lt;em&gt;distributed ACID transactions&lt;/em&gt;&lt;/a&gt; you will find a &lt;strong&gt;lot&lt;/strong&gt; of useful information in order to learn more about these topics.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=m9xYejDUdus"&gt;You can watch the talk here&lt;/a&gt;&lt;/p&gt;</content> <author> <name>Arnaud bos</name> <email>arnaud@monkeypatch.io</email> </author> <category term="JOTB"/> <category term="Distributed Systems"/> <category term="Databases"/> <summary>J On The Beach (JOTB) is “A Big Data Conference On The Beach” happening in Malaga (Spain) and this year (2017) was its second edition.</summary> </entry> <entry xml:lang="en"><title>J On The Beach 2017 — Jepsen Workshop</title><link href="http://www.monkeypatch.io/en/2017/08/03/JOTB-Jepsen-workshop.html" rel="alternate" type="text/html" title="J On The Beach 2017 — Jepsen Workshop"/> <published>2017-08-03T00:00:00+02:00</published> <updated>2017-08-03T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2017/08/03/JOTB-Jepsen-workshop</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2017/08/03/JOTB-Jepsen-workshop.html">&lt;p&gt;The first book I’ve read about distributed systems was &lt;a href="https://www.amazon.fr/Distributed-Systems-Principles-Andrew-Tanenbaum/dp/0132392275"&gt;Distributed Systems: Principles and Paradigms&lt;/a&gt; by Andrew S. Tanenbaum and Maarten van Steen.&lt;br /&gt; I was reading at the library on my last year of study and I remember being confused very often, and to be honest I didn’t even finish it… &lt;!--more--&gt;&lt;/p&gt;&lt;p&gt;By the end of 2013 or beginning of 2014, I progressively started to regain interest in distributed systems after having been distracted by programming on mobile devices for a while.&lt;/p&gt;&lt;p&gt;At that time, something appeared on my radar, it was named &lt;a href="http://jepsen.io/"&gt;Jepsen&lt;/a&gt;, and this year I’ve had the chance to finally give it a try by myself by attending &lt;a href="../j-on-the-beach-malaga-2017-review"&gt;J On The Beach&lt;/a&gt; and its Jepsen workshop animated by no one else than the author: &lt;a href="https://aphyr.com/"&gt;Kyle Kingsbury&lt;/a&gt;.&lt;/p&gt;&lt;h1 id="j-on-the-beach-day-1-jepsen-workshop"&gt;J On The Beach Day 1: Jepsen Workshop&lt;/h1&gt;&lt;p&gt;After a warm welcome and a handshake, &lt;a href="https://aphyr.com/"&gt;Kyle Kingsbury&lt;/a&gt; started introducing &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt; for a brief moment: the syntax, data structures literals and the immutability part, just enough to be able to follow the hands-on part of the workshop.&lt;/p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Let&amp;#39;s get &lt;a href="https://twitter.com/JOTB17"&gt;@JOTB17&lt;/a&gt; started! &lt;a href="https://twitter.com/aphyr"&gt;@aphyr&lt;/a&gt; introducing &lt;a href="https://twitter.com/hashtag/Clojure?src=hash"&gt;#Clojure&lt;/a&gt; for the &lt;a href="https://twitter.com/hashtag/Jepsen?src=hash"&gt;#Jepsen&lt;/a&gt; workshop! &lt;a href="https://t.co/c4M7SXhCR3"&gt;pic.twitter.com/c4M7SXhCR3&lt;/a&gt;&lt;/p&gt;&amp;mdash; Arnaud Bos (@arnaud_bos) &lt;a href="https://twitter.com/arnaud_bos/status/864748353489428481"&gt;May 17, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;It’s true that Clojure might be disturbing at first glance, like any new programming language’s syntax.&lt;br /&gt; If you’re interested in learning Clojure (you should), Kyle’s blogpost series &lt;a href="https://aphyr.com/tags/Clojure-from-the-ground-up"&gt;Clojure from the ground up&lt;/a&gt; and Daniel Higginbotham’s &lt;a href="http://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt; are really great resources before you go into more in-depths topics with &lt;a href="http://www.joyofclojure.com/"&gt;The Joy of Clojure&lt;/a&gt; for instance.&lt;/p&gt;&lt;p&gt;After this quick &lt;em&gt;aperitivo&lt;/em&gt;, Kyle gave us an overview of &lt;a href="https://github.com/jepsen-io/jepsen#design-overview"&gt;Jepsen’s design and core concepts&lt;/a&gt;, namely: Operations, Generators, Clients, Nemesis, History and Checkers (and Models) which, combined together and executed, form a Jepsen Test. So what is &lt;a href="http://jepsen.io/"&gt;Jepsen&lt;/a&gt;?&lt;/p&gt;&lt;p&gt;I think Kyle started from an observation that lots of people agree about: Testing distributed systems is hard. So after an argument about a consistency issue, he went and implemented a tool to introduce failure in systems and check the outcome.&lt;/p&gt;&lt;p&gt;Starting from READMEs and gut feelings, he begun to create a battery of tests for some of the best know distributed databases and key-value stores “we” use, and found &lt;a href="https://aphyr.com/tags/jepsen"&gt;disturbances in the force&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;He found complex errors lying into the heart of some of the softwares we use.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;If you talk with Kyle, he makes it really clear that he’s not blaming vendors for introducing bugs and is not implying that they are intentionally hiding faults in their systems, but they can omit details or make assumptions or simply not test every corner case.&lt;/p&gt;&lt;p&gt;Jepsen is meant to do &lt;strong&gt;&lt;em&gt;simulation testing&lt;/em&gt;&lt;/strong&gt; (see other &lt;a href="http://queue.acm.org/detail.cfm?id=2889274"&gt;system testing methods&lt;/a&gt;) on distributed systems such as databases, distributed caches, etc., finding real/production errors, not theoretical ones.&lt;/p&gt;&lt;p&gt;Starting to think about &lt;a href="https://github.com/Netflix/SimianArmy"&gt;Netflix’s Chaos Monkey/Simian Army&lt;/a&gt;?&lt;br /&gt; Close enough.&lt;br /&gt; The &lt;a href="https://github.com/Netflix/SimianArmy"&gt;Simian Army&lt;/a&gt; is a suite of &lt;strong&gt;&lt;em&gt;fault-injection&lt;/em&gt;&lt;/strong&gt; tools meant to introduce &lt;em&gt;catastrophic errors&lt;/em&gt; by terminating nodes/regions or introducing &lt;em&gt;network instability&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;While Jepsen can also inject this kind of faults, it is more concerned about &lt;strong&gt;&lt;em&gt;correctness&lt;/em&gt;&lt;/strong&gt; than &lt;strong&gt;&lt;em&gt;availability&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;latency&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;h1 id="how-does-it-work"&gt;How does it work?&lt;/h1&gt;&lt;p&gt;&lt;a href="https://github.com/jepsen-io/jepsen"&gt;Jepsen&lt;/a&gt; is designed to run as a &lt;strong&gt;cluster&lt;/strong&gt;: the number of nodes is parametrizable but it seems 3 to 5 nodes are usually enough to reproduce and/or detect &lt;em&gt;catastrophic errors&lt;/em&gt; (&lt;a href="https://www.usenix.org/conference/osdi14/technical-sessions/presentation/yuan"&gt;source&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;One of the nodes is the &lt;strong&gt;control node&lt;/strong&gt;, which is responsible for logging into the other nodes via &lt;code class="highlighter-rouge"&gt;SSH&lt;/code&gt; and &lt;em&gt;execute&lt;/em&gt; the tests.&lt;br /&gt; The other nodes will ship the software at test and execute the operations.&lt;/p&gt;&lt;p&gt;As said in the github’s page:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Once the system is running, the control node spins up a set of logically single-threaded processes, each with its own client for the distributed system. A generator generates new operations for each process to perform. Processes then apply those operations to the system using their clients. The start and end of each operation is recorded in a history. While performing operations, a special nemesis process introduces faults into the system–also scheduled by the generator.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The point of having single-threaded processes is to avoid unnecessary complexity on the testing side, in order to make the work of the &lt;em&gt;checker&lt;/em&gt;, which will analyze the &lt;em&gt;history&lt;/em&gt;, more manageable.&lt;/p&gt;&lt;h2 id="operation"&gt;Operation&lt;/h2&gt;&lt;p&gt;An operation is an abstract representation, a common language (a data structure) to express a function invocation onto the system at test.&lt;/p&gt;&lt;p&gt;Stripping the details of the &lt;code class="highlighter-rouge"&gt;clojure&lt;/code&gt; implementation, here are examples of operations (think JSON documents, JavaScript Objects, Java HashMaps, Python Dictionaries, whatever seems familiar to you):&lt;/p&gt;&lt;div class="language-clojure highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="c1"&gt;;; a read: we don't know what value we'll read from the system yes so value is 'nil &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:invoke,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:read,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; a write of an integer that will be performed on the system &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:invoke,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:write,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; a compare-and-set of an old integer and a new integer value &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:invoke,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:cas,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nb"&gt;rand-int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand-int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These operations are &lt;em&gt;&lt;code class="highlighter-rouge"&gt;invocation operations&lt;/code&gt;&lt;/em&gt;, they just describe a bunch of types of operations for the &lt;em&gt;clients&lt;/em&gt; to perform.&lt;/p&gt;&lt;p&gt;It is the &lt;em&gt;generator&lt;/em&gt;’s job to actually generate a few operations and then let the &lt;em&gt;clients&lt;/em&gt; performs the operations and return &lt;em&gt;&lt;code class="highlighter-rouge"&gt;completion operations&lt;/code&gt;&lt;/em&gt; (with the read value specified for instance).&lt;/p&gt;&lt;h2 id="client"&gt;Client&lt;/h2&gt;&lt;p&gt;A client is an implementation of the types of function invocations you want to perform onto the system.&lt;/p&gt;&lt;p&gt;Given the three &lt;em&gt;operations&lt;/em&gt; above, one must implement a &lt;code class="highlighter-rouge"&gt;clojure protocol&lt;/code&gt; (think Java interface, but better) in order to actually perform the operation, for instance implementing a write of an integer to the database you are willing to test, using your SDK/library of choice.&lt;/p&gt;&lt;h2 id="generator"&gt;Generator&lt;/h2&gt;&lt;p&gt;Generators are more sophisticated beast from my little understanding. While an &lt;em&gt;invocation operation&lt;/em&gt; is a kind of template of an operation to be performed, a generator is responsible for creating more of them. Without giving you all the options available, I can tell that a generator can be configured to construct new &lt;em&gt;&lt;code class="highlighter-rouge"&gt;invocation operations&lt;/code&gt;&lt;/em&gt; for a certain type (read for instance) or a mix (a mix of read and writes, or a mix of read, writes and compare-and-set).&lt;br /&gt; Other parameters include the ability to stagger operations by a certain amount of time, impose a time limit for performing operations, etc.&lt;/p&gt;&lt;h2 id="nemesis"&gt;Nemesis&lt;/h2&gt;&lt;p&gt;A nemesis is our chaos monkey: it will introduce failures, such as network partitions, and heal them back.&lt;/p&gt;&lt;p&gt;Nemesis operations are also constructed by the generator, to which we can specify an order of execution, such as a cycling: sleep operation, start operation (introduce a failure), sleep operation (hoping some client operation will fail) and then stop operation (end the failure).&lt;/p&gt;&lt;h2 id="pizza--beers--chit-chat"&gt;Pizza + beers + chit-chat&lt;/h2&gt;&lt;p&gt;That was the content of the workshop for the morning, and it went &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;For lunch, the organizers at JOTB had planned on-demand pizzas and beer. It was also the occasion to discover the backyard of the venue under a bright sky.&lt;/p&gt;&lt;p&gt;I sat at a table with Kyle and other trainees and chitchatted about &lt;a href="http://jepsen.io/analyses"&gt;Jepsen analyses&lt;/a&gt; and systems that other attendees were interested in testing.&lt;br /&gt; We also talked about Clojure and languages but mostly the discussion focused on Kyle’s work/studies, how he funded his researches and how he approached (or was being approached by) databases or other softwares vendors in order to improve their product/communicate about its robustness/bugfixes.&lt;/p&gt;&lt;p&gt;And then back to work.&lt;/p&gt;&lt;h2 id="history"&gt;History&lt;/h2&gt;&lt;blockquote&gt; &lt;p&gt;With our generator and clients performing operations, we’ve got a history to analyze for correctness. &lt;a href="https://github.com/jepsen-io/jepsen/blob/master/doc/checker.md"&gt;Jepsen etcdemo - checker&lt;/a&gt;&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;The history is not directly exposed to you as a test designer, but it is necessary to verify the results of the operations.&lt;br /&gt; Under the hood I suppose (I haven’t checked yet) that Jepsen stores the history in some way as a collection of every &lt;em&gt;completed operations&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;This history is then used by the &lt;em&gt;checker&lt;/em&gt; in order to verify correctness between what the systems said it did and what it actually did.&lt;/p&gt;&lt;p&gt;Jepsen also uses the history to generate a set of graphs.&lt;/p&gt;&lt;h2 id="checker"&gt;Checker&lt;/h2&gt;&lt;p&gt;Now, this history is not going to analyze itself. This is the role of the checker, whose job it is to reorder the calls/results from all the clients and confront the history to a model.&lt;/p&gt;&lt;p&gt;When a client writes a value and gets back an acknowledgement of the write, the system’s log is checked to see if the database actually performed the write.&lt;/p&gt;&lt;h2 id="model"&gt;Model&lt;/h2&gt;&lt;p&gt;A model is an abstraction on top of the &lt;a href="https://en.wikipedia.org/wiki/Linearizability"&gt;linearizability&lt;/a&gt; concept.&lt;br /&gt; It’s not easy to defined linearizability, I’ve had to read and watch so many resources to try to understand that I can’t count them, and in the end I’m not sure I understand it well.&lt;/p&gt;&lt;p&gt;Linearizability is a type of consistency among others (eventual consistency, causality linearizability, strong linearizability, etc).&lt;/p&gt;&lt;p&gt;In short, and probably not fully exact: when a new value for a certain key has been written (successfully), no previous value for this key should be read ever, and every subsequent read should return the same value unless another successful write is performed.&lt;/p&gt;&lt;p&gt;Now, Jepsen uses &lt;a href="https://github.com/jepsen-io/knossos"&gt;Knossos&lt;/a&gt; under the hood to build a singlethreaded model that is holding the history of operations and results, and by reducing (I guess, but it’s an implementation detail) over the operations, analyses the state to find illegal state transitions.&lt;/p&gt;&lt;h2 id="qa"&gt;Q/A&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;How do you find a bug?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;As Kyle explained, he generally started by reading the READMEs and documentations of the systems he wanted to evaluate.&lt;/p&gt;&lt;p&gt;Then it’s a mix of gut feeling and experience that leads him toward testing a feature or another, and apply different types of failures to the system.&lt;/p&gt;&lt;p&gt;In the end what is important is that Jepsen is a tool that enables anyone to test the softwares it uses and make informed choices.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;How long does it take?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I honestly can’t remember the answer to this question and I did not write it in my notes. So maybe someone (a fellow trainee, a reviewer) can fill-in this gap?&lt;/p&gt;&lt;h1 id="wrap-up"&gt;Wrap-up&lt;/h1&gt;&lt;p&gt;This workshop is usually done in two days so keeping up with the fast coding pace and trying to fit all the concepts and information in my head in a single day was hard.&lt;br /&gt; And by “hard” I don’t mean &lt;em&gt;painful&lt;/em&gt;, but &lt;em&gt;exhausting&lt;/em&gt;. It was actually pleasant, and Kyle is a &lt;strong&gt;&lt;em&gt;fantastic&lt;/em&gt;&lt;/strong&gt; teacher: he is funny and he really cares. Nonetheless, I’m pretty sure I wasn’t the only one in the room feeling really tired at the end of the day, so I took a long walk (by the beach :P) in order to clear my mind.&lt;/p&gt;&lt;p&gt;If you want to know more about Jepsen, and learn more about distributed systems in general (which is my case), you can follow the etcdemo guide by yourself at home, but if you have the possibility to attend one of Kyle’s workshop, don’t hesitate, he really &lt;em&gt;knows his stuff&lt;/em&gt; and he is a &lt;em&gt;fantastic person&lt;/em&gt;.&lt;/p&gt;</content> <author> <name>Arnaud bos</name> <email>arnaud@monkeypatch.io</email> </author> <category term="JOTB"/> <category term="Distributed Systems"/> <category term="Databases"/> <category term="Jepsen"/> <category term="Testing"/> <summary>The first book I’ve read about distributed systems was Distributed Systems: Principles and Paradigms by Andrew S. Tanenbaum and Maarten van Steen. I was reading at the library on my last year of study and I remember being confused very often, and to be honest I didn’t even finish it…</summary> </entry> <entry xml:lang="fr"><title>Making Of ‘CSS is Awesome !’</title><link href="http://www.monkeypatch.io/en/2017/05/02/MakingOf_CSS_is_Awesome.html" rel="alternate" type="text/html" title="Making Of 'CSS is Awesome !'"/> <published>2017-05-02T00:00:00+02:00</published> <updated>2017-05-02T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2017/05/02/MakingOf_CSS_is_Awesome</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2017/05/02/MakingOf_CSS_is_Awesome.html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Depuis quelque temps, j’avais l’idée de faire une présentation sur le CSS, mon objectif était de redorer le blason de cette technologie souvent crainte et sous-estimée par de trop nombreux développeurs. J’ai profité du CFP de DevoxxFR pour me jeter à l’eau. En plus de mon appétance pour la transmission, j’aime bien faire des talks car ça me pousse à aller plus loin sur le sujet que je présente. Pour celle-ci, je me suis donné comme défi de faire la présentation en HTML/CSS sans JavaScript dans les slides. Cet article présente donc le résultat de ce défi.&lt;/p&gt;&lt;!--more--&gt;&lt;blockquote&gt; &lt;p&gt;J’ai fait cette présentation à &lt;a href="https://www.youtube.com/watch?v=H8lICKucWL4"&gt;DevoxxFR (30 min.)&lt;/a&gt;, et une version plus longue à &lt;a href="https://vimeo.com/215621504"&gt;MiXiT (50 min.)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Bien sûr, faire des présentations en HTML/CSS/JS n’est pas nouveau, certains sont trés bien faits comme :&lt;/p&gt; &lt;/blockquote&gt;&lt;ul&gt; &lt;li&gt;&lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;reveal.js&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://markdalgleish.com/projects/bespoke.js/"&gt;bespoke.js&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://shwr.me/"&gt;Showr&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://leaverou.github.io/csss/#intro"&gt;CSSS&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;J’avais déjà, dans le cadre d’une autre présentation, écrit mon propre framework en utilisant du CoffeeScript: &lt;a href="https://github.com/ilaborie/prez"&gt;Prez&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Pourquoi en écrire un nouveau, qui sera moins bien que ceux qui sont portés depuis plusieurs années ? La raison principale est que cela me permet de sortir de ma ‘zone de confort’, ce qui est toujours très enrichissant. En plus de cet aspect, cela me permet de creuser des sujets que je n’ai pas encore eu l’occasion d’étudier comme les ‘Custom Properties de CSS 4’ (aka les variables), et puis c’est fun.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Attention lors d’une présentation on peut (du moins on espère) contrôler l’environnement: navigateur, résolution, … Quand j’ai réalisé cette application je suis parti sur &lt;a href="https://www.google.fr/chrome/browser/canary.html"&gt;Chrome Canary&lt;/a&gt;, et j’ai constaté qu’il y avait des ralentissements sur les autres navigateurs quand j’utilisais les &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"&gt;Custom Properties&lt;/a&gt; :’( A suivre…&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;em&gt;Le code que je décris ici est disponible dans &lt;a href="https://github.com/ilaborie/css-awesome"&gt;Github&lt;/a&gt;. À ce jour, il n’est pas destiné à devenir un nouveau framework. Il faudrait faire pas mal de ménage avant de pouvoir en faire quelque chose d’intéressant.&lt;/em&gt;&lt;/p&gt;&lt;h2 id="comment-afficher-et-animer-les-slides-"&gt;Comment afficher et animer les slides ?&lt;/h2&gt;&lt;h3 id="structure-de-base"&gt;Structure de base&lt;/h3&gt;&lt;p&gt;En gros voici la base de code HTML pour les slides :&lt;/p&gt;&lt;div class="language-html highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Chaque slide correspond à une &lt;code class="highlighter-rouge"&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, pour faire simple on va donner la taille voulu pour chaque slide :&lt;/p&gt;&lt;div class="language-css highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* largeur maximun sans scroll */&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* hauteur maximun sans scroll */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt; &lt;p&gt;on peut utiliser l’unité &lt;code class="highlighter-rouge"&gt;vmin&lt;/code&gt; pour forcer un slide en 4/3 ou en 16/10 en mettant la largeur à &lt;code class="highlighter-rouge"&gt;100vmin&lt;/code&gt;, et la hauteur à &lt;code class="highlighter-rouge"&gt;75vmin&lt;/code&gt; pour le 4/3 ou &lt;code class="highlighter-rouge"&gt;62.5vmin&lt;/code&gt; pour le 16/10. On utilisera bien sur &lt;code class="highlighter-rouge"&gt;flexbox&lt;/code&gt; pour le centrage dans cette situation.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="comment-animer-les-slides-"&gt;Comment animer les slides ?&lt;/h3&gt;&lt;p&gt;Le principe de navigation est le suivant :&lt;/p&gt;&lt;ul&gt; &lt;li&gt;les slides sont décalés sur la gauche avec &lt;code class="highlighter-rouge"&gt;transform: translateX(-100vmax);&lt;/code&gt; par défaut,&lt;/li&gt; &lt;li&gt;le slide courant est remis dans l’axe avec &lt;code class="highlighter-rouge"&gt;transform: translateX(0);&lt;/code&gt;,&lt;/li&gt; &lt;li&gt;les slides suivants sont décalés à droites dans l’axe avec &lt;code class="highlighter-rouge"&gt;transform: translateX(100vmax);&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Une solution très simple pour identifier le slide courant c’est d’utiliser la pseudo classe &lt;code class="highlighter-rouge"&gt;:target&lt;/code&gt;. Le slide avec l’id &lt;code class="highlighter-rouge"&gt;XXX&lt;/code&gt; sera ciblé lorsque l’URL de notre navigateur sera du type &lt;code class="highlighter-rouge"&gt;http://&amp;lt;maprez&amp;gt;/&amp;lt;mapage&amp;gt;.html#XXX&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Ce qui ce traduit par le CSS suivant :&lt;/p&gt;&lt;div class="language-css highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100vmax&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nd"&gt;:target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;pseudo&lt;/span&gt; &lt;span class="py"&gt;classe&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;selecteur&lt;/span&gt; &lt;span class="err"&gt;~&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100vmax&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et bien sûr, on ajoute une petite transition comme &lt;code class="highlighter-rouge"&gt;transition: transform .8s ease-in-out;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Pour ceux qui on encore du mal avec les selecteurs CSS, le &lt;code class="highlighter-rouge"&gt;~&lt;/code&gt; c’est le selecteur des &lt;em&gt;siblings&lt;/em&gt;. Voir &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Simple_selectors#Combinators"&gt;Simple selectors - Combinators&lt;/a&gt;&lt;/p&gt;&lt;h3 id="comment-changer-de-slides-"&gt;Comment changer de slides ?&lt;/h3&gt;&lt;p&gt;Pour cela il suffit d’un lien qui va sur le slide avec l’id qui correspond au slide souhaité.&lt;/p&gt;&lt;div class="language-html highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"previous"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"previous"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"previous"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#end"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"previous"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ensuite on peut passer au CSS pour rendre ça sympa :&lt;/p&gt;&lt;div class="language-css highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.previous&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.previous&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.previous&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;95vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nc"&gt;.next&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-height="342" data-theme-id="0" data-slug-hash="wJbogy" data-default-tab="result" data-user="ilaborie" data-embed-version="2" data-pen-title="slides-css" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/ilaborie/pen/wJbogy/"&gt;slides-css&lt;/a&gt; by igor (&lt;a href="http://codepen.io/ilaborie"&gt;@ilaborie&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Il y a d’autres solutions alternatives pour faire un système de slides, comme un mécanisme avec des “radio boutons” et le &lt;code class="highlighter-rouge"&gt;:checked&lt;/code&gt; pour remplacer le &lt;code class="highlighter-rouge"&gt;:target&lt;/code&gt;, ou bien laisser le scroll horizontal, et ne pas faire de translation.&lt;/p&gt; &lt;/blockquote&gt;&lt;h3 id="bonus--numéro-du-slide"&gt;Bonus : Numéro du slide&lt;/h3&gt;&lt;p&gt;Pour ajouter une numéroration sur chaque slide, on peut utiliser un pseudo-élément sur les &lt;code class="highlighter-rouge"&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, avec un positionnement relatif. C’est l’occasion d’utiliser les &lt;a href="https://developer.mozilla.org/fr/docs/Web/CSS/Compteurs_CSS"&gt;compteurs CSS&lt;/a&gt; :&lt;/p&gt;&lt;div class="language-css highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;counter-increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'# '&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il nous reste ensuite le &lt;code class="highlighter-rouge"&gt;::before&lt;/code&gt; pour afficher une barre avec les logos, les hashtags, …&lt;/p&gt;&lt;h3 id="bonus--navigation-rapide"&gt;Bonus : navigation rapide&lt;/h3&gt;&lt;p&gt;Pour naviguer rapidement entre les slides, on peut simplement créer une barre de navigation que l’on peut fixer en bas ou en haut.&lt;/p&gt;&lt;div class="language-html highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#slide3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#end"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p data-height="265" data-theme-id="0" data-slug-hash="ZeNKWw" data-default-tab="result" data-user="ilaborie" data-embed-version="2" data-pen-title="slides-css extra nav" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/ilaborie/pen/ZeNKWw/"&gt;slides-css extra nav&lt;/a&gt; by igor (&lt;a href="http://codepen.io/ilaborie"&gt;@ilaborie&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;h2 id="comment-faire-du-live-edit-de-css-"&gt;Comment faire du live edit de CSS ?&lt;/h2&gt;&lt;p&gt;C’est la partie la plus ‘Hack’ du système, surtout ne pas utiliser ce principe dans du code qui peut aller en production.&lt;/p&gt;&lt;p&gt;Pour cela, on utilise la balise &lt;code class="highlighter-rouge"&gt;&amp;lt;style&amp;gt;&lt;/code&gt; avec l’attribut &lt;code class="highlighter-rouge"&gt;contenteditable&lt;/code&gt;, et ensuite il faut bricoler le style pour rendre ça visible.&lt;/p&gt;&lt;p data-height="265" data-theme-id="0" data-slug-hash="BWgBeV" data-default-tab="result" data-user="ilaborie" data-embed-version="2" data-pen-title="pur CSS Live Edit" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/ilaborie/pen/BWgBeV/"&gt;pur CSS Live Edit&lt;/a&gt; by igor (&lt;a href="http://codepen.io/ilaborie"&gt;@ilaborie&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Notez qu’il est préférable de faire du &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/Document/designMode"&gt;designMode&lt;/a&gt; plutôt que du &lt;code class="highlighter-rouge"&gt;contenteditable&lt;/code&gt;. Mais cela nécessitait d’avoir du JavaScript, et mon objectif était de ne pas en faire.&lt;/p&gt; &lt;/blockquote&gt;&lt;h2 id="produire-du-pdf"&gt;Produire du PDF&lt;/h2&gt;&lt;p&gt;Les slides en HTML c’est bien, mais on est parfois obliger de produire un PDF correspondant. Pour cela, j’ai créé une présentation spécialisée avec un CSS pour le &lt;code class="highlighter-rouge"&gt;media print&lt;/code&gt;. Ensuite on peut passer par la boite de l’impression pour générer un PDF correspondant. Attention si vous ne prévoyez pas cette fonctionnalité assez tôt vous risquez de passer beaucoup de temps pour mettre au point un look raisonnable. Chrome. La prochaine fois je ferai plus attention…&lt;/p&gt;&lt;p&gt;Enfin le souci qu’il reste c’est que le live-edit ça rends pas terrible sur du PDF…&lt;/p&gt;&lt;h2 id="build-system"&gt;Build system&lt;/h2&gt;&lt;p&gt;Ce mécanisme de slide a un gros défaut, il faut systématiquement ajouter les liens before/next sur chaque slide, et penser à maintenir les identifiants. Cela peut devenir vraiement lourd lorsqu’on ajoute/supprime/déplace un slide.&lt;/p&gt;&lt;p&gt;Et puis il faut quand même trouver un endroit pour faire du TypeScript et du NodeJS… Donc, l’idée est de construire automatiquement le fichier HTML en aggrégeant des fichiers qui correspondent à chaque slide.&lt;/p&gt;&lt;h3 id="nodejs-et-tooling"&gt;NodeJS et Tooling&lt;/h3&gt;&lt;p&gt;Pour le mécanisme de construction, on va devoir faire des opérations sur les fichiers et répertoires, pour cela j’utilise &lt;code class="highlighter-rouge"&gt;mkdirp&lt;/code&gt; pour faire l’équivalent du &lt;code class="highlighter-rouge"&gt;mkdir -p&lt;/code&gt; et &lt;code class="highlighter-rouge"&gt;rimraf&lt;/code&gt; pour &lt;code class="highlighter-rouge"&gt;rm -rf&lt;/code&gt; tout en étant compatible avec les plateformes qui ne supportent pas (encore) ces commandes.&lt;/p&gt;&lt;p&gt;Pour le reste des opérations, on va utiliser les modules &lt;code class="highlighter-rouge"&gt;fs&lt;/code&gt; et &lt;code class="highlighter-rouge"&gt;path&lt;/code&gt; de NodeJS pour les autres opérations sur le file system. J’ai choisi de ‘promisifier’ ces API, mais on aurait aussi pu utiliser &lt;a href="http://bluebirdjs.com/docs/getting-started.html"&gt;bluebird&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Voici un exemple avec &lt;code class="highlighter-rouge"&gt;readFile&lt;/code&gt;&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pour le templating, il existe déjà plein de solutions en JavaScript, dans ce cas j’ai utilisé la solution basique : le templating de ES6. Par exemple, pour construire ma page, j’utilise le code suivant :&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'A Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;a href="#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" title="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;!doctype html&amp;gt; &amp;lt;html lang="en"&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset="UTF-8"&amp;gt; &amp;lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&amp;gt; &amp;lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&amp;gt; &amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/title&amp;gt; &amp;lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"&amp;gt; &amp;lt;link rel="stylesheet" href="index.css"&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body class="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt; &amp;lt;div class="slides-nav"&amp;gt;&amp;lt;nav&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/nav&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;main&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/main&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enfin, on peut tout brancher pour obtenir un code comme celui ci :&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buildHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slidesDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'- Building HTML ...'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slidesDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// récuère la liste des slides&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Slide&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt;&lt;span class="p"&gt;)}))&lt;/span&gt; &lt;span class="c1"&gt;// construction du contenu&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;)}))&lt;/span&gt; &lt;span class="c1"&gt;// aggreation&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="c1"&gt;// construction du HTML&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// on écrit&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ Write HTML &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Emoji rocks&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`️FAIL building HTML: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Oops&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;À noter que depuis ES6 (ES2015), on peut utiliser la déconstruction, ce qui permet de faire des trucs sympas comme :&lt;/p&gt;&lt;div class="language-javascript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;qui est équivalent au code suivant :&lt;/p&gt;&lt;div class="language-javascript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="les-slides"&gt;Les Slides&lt;/h3&gt;&lt;h4 id="extraction"&gt;Extraction&lt;/h4&gt;&lt;p&gt;On peut utiliser simplement les API du module &lt;code class="highlighter-rouge"&gt;fs&lt;/code&gt; de NodeJS pour lire le contenu d’un répertoire, le trier, …&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Slide&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;readDir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// tous les fichiers du répertoire&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// on trie (les slides sont préfixés par un numéro)&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onlySlide&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// on passe une regex pour extraire l'id&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchesList&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;matchesList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// on retire ce qui n'est pas un slide&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matchesList&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;matchesList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;buildSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="c1"&gt;// construction du contenu&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slidePromises&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slidePromises&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Promise&amp;lt;[]&amp;gt; =&amp;gt; Promise[]&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;filterSlide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="c1"&gt;// on filtre ceux qui correspondent à ma clef&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buildSlideNav&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// on calcule les previous/next&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`️FAIL to read dir &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Oops&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Comme je génère plusieurs présentations, et que certaines contiennent des slides différents, j’utilise des métadonnées pour faire un filtre avant de construire les références sur les slides précédents et suivants.&lt;/p&gt;&lt;h4 id="contenu-dun-slide"&gt;Contenu d’un slide&lt;/h4&gt;&lt;p&gt;Après lecture du contenu du fichier, on extrait les éventuelles meta-données, ici rien de très important. Le point intéressant dans cette partie, c’est que je veux pouvoir utiliser soit du markdown pour les slides simples, soit directement du HTML. Il n’y a pas de besoins particuliers pour du HTML, par contre pour le markdown on va utiliser la bibliothèque &lt;a href="https://github.com/chjj/marked"&gt;marked&lt;/a&gt;. L’utilisation est très simple, et on peut facilement ajouter de quoi styliser les blocs de codes avec la colorisation syntaxique avec &lt;a href="https://github.com/isagalaev/highlight.js"&gt;highlight.js&lt;/a&gt;&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'marked'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;highlightAuto&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'highlight.js'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;highlight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;highlightAuto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;htmlContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il suffira ensuite d’ajouter le style souhaité, par exemple j’ai utilisé &lt;code class="highlighter-rouge"&gt;@import 'node_modules/highlight.js/styles/darcula';&lt;/code&gt;&lt;/p&gt;&lt;h3 id="styles"&gt;Styles&lt;/h3&gt;&lt;p&gt;Pour générer le style j’ai fait du SCSS avec &lt;a href="https://www.npmjs.com/package/node-sass"&gt;node-sass&lt;/a&gt;, l’intégration est très facile aujourd’hui puisque on peut utiliser cette lib plutôt que du ruby. J’utilise donc le nesting et les mixins, et il reste encore quelques variables. Mais j’ai privilégié les nouveautés de CSS comme les &lt;a href="https://developer.mozilla.org/fr/docs/Web/CSS/--*"&gt;Custom properties&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Pour assurer la portabilité du style, j’utilise le postprocesseur &lt;a href="https://github.com/postcss/postcss"&gt;PostCSS&lt;/a&gt; avec les plugins &lt;a href="https://github.com/postcss/autoprefixer"&gt;autoprefixer&lt;/a&gt;, &lt;a href="https://github.com/postcss/postcss-custom-properties"&gt;postcss-custom-properties&lt;/a&gt; pour transpiler les customs properties, &lt;a href="http://cssnano.co/"&gt;cssnano&lt;/a&gt; pour minifier le code, et enfin &lt;a href="https://github.com/borodean/postcss-assets"&gt;postcss-assets&lt;/a&gt; qui nous permet d’automatiquement inliner les images en &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs"&gt;data-uri&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Le code resemble donc à ça :&lt;/p&gt;&lt;div class="language-typescript highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'index.scss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;customProperties&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;preserve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;basePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cssnano&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;scss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`️FAIL to create CSS &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="serveur-et-serveur-de-développement"&gt;Serveur et serveur de développement&lt;/h3&gt;&lt;p&gt;Techniquement, on peut ouvrir la présentation avec le protocle &lt;code class="highlighter-rouge"&gt;file://&lt;/code&gt;, mais comme j’ai quelques liens externes, il faut utiliser le protocole &lt;code class="highlighter-rouge"&gt;http://&lt;/code&gt;. La solution la plus simple qui existe est d’utiliser python avec &lt;code class="highlighter-rouge"&gt;python -m SimpleHTTPServer&lt;/code&gt;. Cependant, cette solution n’est pas très pratique pour du développement, une fois qu’on a pris goût au LiveReload c’est difficile de s’en passer. Je préfère utiliser &lt;a href="https://github.com/johnpapa/lite-server"&gt;lite-server&lt;/a&gt;, c’est super simple d’usage, et ça utilise &lt;a href="https://www.browsersync.io/"&gt;BrowserSync&lt;/a&gt; pour le LiveReload.&lt;/p&gt;&lt;p&gt;Les fichiers TypeScript peuvent être compilé en mode ‘watch’ avec la commande &lt;code class="highlighter-rouge"&gt;tsc -w&lt;/code&gt;. Pour reconstruire automatiquement les slides lors d’une modification, j’utilise &lt;a href="https://nodemon.io/"&gt;nodemon&lt;/a&gt;.&lt;/p&gt;&lt;div class="language-json highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"clean"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rimraf js/ dist/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lite-server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"build:dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc &amp;amp;&amp;amp; node js/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run clean &amp;amp;&amp;amp; tsc &amp;amp;&amp;amp; node js/index.js --minify"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run start &amp;amp; tsc -w &amp;amp; nodemon js/index.js"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Je préfère utiliser les fichiers de configuration pour nodemon :&lt;/p&gt;&lt;div class="language-json highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 9 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"verbose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"delay"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"js/"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"ext"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"scss png js svg html md"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;et pour BrowserSync :&lt;/p&gt;&lt;div class="language-json highlighter-rouge"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1 2 3 4 5 6 7 8 &lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"baseDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"directory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"notify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="comment-publier-dans-les-github-pages-"&gt;Comment publier dans les Github Pages ?&lt;/h3&gt;&lt;p&gt;Dans ce dernier point concernant les outils, je voulais utiliser les &lt;a href="https://pages.github.com/"&gt;pages github&lt;/a&gt; pour publier les slides. Rien de plus simple avec &lt;a href="https://github.com/tschaub/gh-pages"&gt;gh-pages&lt;/a&gt; il suffit de lancer la commande &lt;code class="highlighter-rouge"&gt;gh-pages --dist dist/&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Si vous voulez voir jusqu’où on peut aller en HTML/CSS, y compris dans les emails, je vous recommande la présentation suivante: &lt;a href="https://vimeo.com/181481382"&gt;Modern and interactive email&lt;/a&gt;. Pour améliorer vos connaissances en CSS, je vous recommande chaudement le livre (et les présentations) &lt;a href="https://www.amazon.fr/CSS-Secrets-Lea-Verou/dp/1449372635"&gt;CSS Secret&lt;/a&gt; de &lt;a href="http://lea.verou.me/"&gt;Lea Verou&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Au delà du CSS qui est si vaste que l’on peut y passer des années pour approfondir, je me suis beaucoup amusé à construire ces slides. L’écosystème NodeJS est immense, parfois inégal mais on y trouve à peu près tout ce que l’on veut. L’ES2015 (et plus) et TypeScript sont véritablement sympas, c’est aussi plus accessible maintenant pour les développeurs Java, attention toutefois le JavaScript peut être piégeux quand il est mal maîtrisé.&lt;/p&gt;&lt;p&gt;Pour apprendre, il faut sortir de sa zone de confort, les sides-projects sont idéaux pour cela. J’ai eu l’occasion d’échanger avec &lt;a href="https://twitter.com/pixelastic"&gt;Tim Carry&lt;/a&gt; à MiXiT, il est l’auteur de &lt;a href="https://pixelastic.github.io/css-flags/"&gt;CSS Flags&lt;/a&gt; dont le principe est de faire les drapeaux avec un seul &lt;code class="highlighter-rouge"&gt;&amp;lt;div&amp;gt;&lt;/code&gt; et du CSS, on retrouve le même principe dans ce (périlleux) exercice (Voir &lt;a href="http://talks.pixelastic.com/slides/css-flags-mixit/#/"&gt;http://talks.pixelastic.com/slides/css-flags-mixit/#/&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Have fun &amp;amp; Hack !&lt;/p&gt;</content> <author> <name>Igor Laborie</name> <email>igor@monkeypatch.io</email> </author> <category term="CSS"/> <category term="Devoxx"/> <category term="MiXiT"/> <category term="NodeJS"/> <category term="TypeScript"/> <summary>IntroductionDepuis quelque temps, j’avais l’idée de faire une présentation sur le CSS, mon objectif était de redorer le blason de cette technologie souvent crainte et sous-estimée par de trop nombreux développeurs. J’ai profité du CFP de DevoxxFR pour me jeter à l’eau. En plus de mon appétance pour la transmission, j’aime bien faire des talks car ça me pousse à aller plus loin sur le sujet que je présente. Pour celle-ci, je me suis donné comme défi de faire la présentation en HTML/CSS sans JavaScript dans les slides. Cet article présente donc le résultat de ce défi.</summary> </entry> <entry xml:lang="fr"><title>AndroidMakers 2017</title><link href="http://www.monkeypatch.io/en/2017/04/12/androidMakers.html" rel="alternate" type="text/html" title="AndroidMakers 2017"/> <published>2017-04-12T00:00:00+02:00</published> <updated>2017-04-12T00:00:00+02:00</updated><id>http://www.monkeypatch.io/en/2017/04/12/androidMakers</id> <content type="html" xml:base="http://www.monkeypatch.io/en/2017/04/12/androidMakers.html">&lt;h1 id="retour-sur-landroid-makers-2017"&gt;Retour sur l’Android Makers 2017&lt;/h1&gt;&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;Un peu comme après le 1er de l’an, quand je reviens d’une conférence, j’ai généralement plein de bonnes résolutions en tête, j’ai envie d’appliquer toutes les bonnes méthodes, de tester les différentes techniques et libs qui ont été présentées. Mais cette fois, je vais commencer par faire mon retour sur ce blog pour ne rien oublier des deux jours que j’ai passé à l’&lt;a href="http://androidmakers.fr/"&gt;Android Makers&lt;/a&gt;.&lt;/p&gt;&lt;!--more--&gt;&lt;h2 id="un-peu-dhistoire"&gt;Un peu d’histoire.&lt;/h2&gt;&lt;p&gt;Toujours organisé par le PAUG et BeMyApp, Android Makers c’est le remake de la DroidCon Paris qui s’était arrétée en 2015 avec la troisième édition.&lt;/p&gt;&lt;p&gt;Android Makers, promet :&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“Ce nouveau format nous donne la possibilité de garder tout ce que vous avez toujours aimé dans nos précédentes conférences : aller chercher les meilleurs speakers, sélectionner les talks les plus intéressants et innovants, avoir un programme cohérent, tout en s’appropriant davantage le format notamment avec de nouvelles animations.”&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/eNvBo52suTg9D5euneCqQxcLg7MXzR7lkccL8w4t8sAwIW7v8EBQBTtiM8rtpa6lCND7J96ksUmrNUzTlZKnfIyxk3RXJ8mfSd67urHdYmVObELi5GkoE8IqWQHy8szAdQ2L3P0" alt="Image of Yaktocat" /&gt;&lt;/p&gt;&lt;p&gt;Et pour le coup, ils ne nous ont pas menti, il y avait pas mal de têtes connues dans le monde Android qui sont venus pour animer des conférences. Pour ne citer qu’eux :&lt;/p&gt;&lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/chethaase"&gt;Chet Haase&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/romainguy"&gt;Romain Guy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/lisawrayz"&gt;Lisa Wray&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/cyrilmottier"&gt;Cyril Mottier&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/tsmith"&gt;Ty Smith&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/Eyal_Lezmy"&gt;Eyal Lezmy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://twitter.com/taylorling"&gt;Taylor Ling&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Et oui, la majorité ne sont pas Francais, donc si vous voulez venir à une prochaine session d’Android makers, il est recommandé de comprendre l’anglais.&lt;/p&gt;&lt;p&gt;Pour nous aider à faire notre choix dans les conférences à suivre, les organisateurs avaient prévu une application Android qui nous permettait de faire notre planning parmis 3 tracks. 2 salles avec des présentations de 45 minutes, et une petite salle de workshops assez longs ou mini scéances de 20 minutes.&lt;/p&gt;&lt;p&gt;Pour les chiffres, ça se déroulait sur 2 jours, il y avait 560 participants et 66 speakers.&lt;/p&gt;&lt;h2 id="jour-1"&gt;Jour 1.&lt;/h2&gt;&lt;p&gt;Le rendez vous était donné à 8H aux salons de l’Aveyron dans le 12ème arrondissement de Paris. À mon arrivée, je suis allé récupérer le tee shirt que Taylor Ling avait designé pour Android Makers, puis allé directement en salle collation pour prendre un café, et ensuite direction la Keynote.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/xl8eNSRacpd686n_io1bXi4zP1e280uwb5e-KxLKmv8qXJRG46WXB3PrQa4I2w6FtnsiDTKMghFapTLzciFFHbvrNvyzQBZNVDP5oJ_7KxAkqsCnegtK83ddbFF4V5RBh-EuMpA" alt="Design du tee shirt" /&gt;&lt;/p&gt;&lt;h3 id="keynote"&gt;Keynote&lt;/h3&gt;&lt;p&gt;La Keynote était je pense l’une des conférences que les spectateurs ne voulaient pas rater. En effet, elle était présentée par le duo Chet Haase et Romain Guy, deux personnalités qui ont l’habitude de faire des présentations ensemble. Le sujet du jour était une rétrospective des évolutions d’Android. Du premier SDK à Android O, ils ont pu revenir sur des annecdotes sur le développement, comme par exemple le fait de changer complètement la façon dont est gérée l’affichage, seulement 2 semaines avant la release d’Android Honeycomb.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=xOccHEgIvwY"&gt;Pour la revoir&lt;/a&gt;&lt;/p&gt;&lt;h3 id="les-confs-de-la-journée"&gt;les confs de la journée.&lt;/h3&gt;&lt;p&gt;J’ai assisté dans un premier temps à une conférence de Ty Smith sur le “Deep Android integrations” qui nous a présenté un ensemble de bonnes pratiques qu’il a accumulé pour faire en sorte que les applications qu’il développe s’intègrent bien avec les autres applications.&lt;/p&gt;&lt;p&gt;&lt;a href="https://speakerdeck.com/tysmith/deep-android-integrations"&gt;Les slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Ensuite j’ai assisté à la conférence de Cyril Mottier sur la bonne façon d’implémenter un ‘Launch Screen’ sur Android. Cyril nous a, dans cette présentation, montré que c’est dans les petits détails comme celui-ci qu’on voit si les développeurs d’applications sont consciencieux.&lt;/p&gt;&lt;p&gt;&lt;a href="https://speakerdeck.com/cyrilmottier/launch-screens-from-a-tap-to-your-app"&gt;Les slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Pour finir la matinée, je suis allé voir une conférence sur RxJava 2 de David Wursteisen. J’avais déjà assisté à pas mal de confs sur RxJava en général, et bien que celle là ne soit pas celle que j’ai le plus appréciée, elle présentait bien les concepts de base de la programmation réactive.&lt;/p&gt;&lt;p&gt;&lt;a href="https://speakerdeck.com/dwursteisen/rxjava-est-mort-vive-rxjava-2"&gt;Les slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Après cette matinée bien remplie, il est temps d’aller se prendre un petit repas. Mais vraiment petit parce qu’il n’y avait pas de temps de pause de prévu. J’ai donc mangé un sandwich en assistant à une présentation de la programmation bas niveau par Guillaume Gigaud.&lt;/p&gt;&lt;p&gt;L’après midi s’est révélée tout autant chargée. J’ai commencé par une présentation de ‘Clean Code’ sur Android par Gabriel Adged et Damien Locque. Assez convaincu par l’utilité, je pense que j’appliquerai quelques principes lors de mes prochains développements Android. Je n’ai pas trouvé les slides mais voici un tweet qui résumerait l’architecture qu’ils ont appliqué.&lt;/p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Clean Architecture example by &lt;a href="https://twitter.com/OCTOTechnology"&gt;@OCTOTechnology&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AndroidMakers?src=hash"&gt;#AndroidMakers&lt;/a&gt; &lt;a href="https://t.co/3dWI851ysl"&gt;pic.twitter.com/3dWI851ysl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hugo Gresse (@HugoGresse) &lt;a href="https://twitter.com/HugoGresse/status/851445776546922497"&gt;April 10, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;Pour rester dans les concepts d’architecture et de bonnes pratiques, j’ai ensuite assisté à la présentation “Taking care of your UI tests” par Florian Mierzejewski. Idem que la précédente, très bonne conf et pas mal d’idée à reprendre. &lt;a href="https://speakerdeck.com/florianmski/taking-care-of-your-ui-tests"&gt;Les Slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Avant d’aller à la “Party”, j’ai suivi la dernière conférence de la journée présentée par Taylor Ling, qui nous a fait une rétrospective des choses qui ont marché ou pas lors de la conception de l’application Fabulous. Je ne connaissais pas cette application qui pourtant a connu un certain succés, puisqu’elle totalise plusieurs millions de téléchargement. L’application vous sert de coach qui doit vous permettre, en respectant des conseils, de vous sentir mieux dans votre vie de tous les jours.&lt;/p&gt;&lt;p&gt;Vous pouvez y jeter un oeil &lt;a href="https://play.google.com/store/apps/details?id=co.thefabulous.app"&gt;sur le play store&lt;/a&gt;&lt;/p&gt;&lt;h2 id="jour-2"&gt;Jour 2&lt;/h2&gt;&lt;h3 id="keynote-1"&gt;Keynote&lt;/h3&gt;&lt;p&gt;Cette journée commence par une Keynote de Lisa Wray que j’ai particulièrement appréciée, qui nous a démontré pourquoi il est maintenant important dans les nouveaux projets de penser “Android First”. C’est à dire arrêter de penser qu’il faut d’abord faire une application iOS et ensuite, si il y a succès faire son équivalent Android. Les choses se sont inversée, le marché a évolué, il faut aussi que les visions de créateurs d’apps évoluent.&lt;/p&gt;&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/DERtQkLeRCuX1HK63YGxYDuTz7Q3mk5V7mShB_qpeIPZC6deVLeh2oCCt7SfgFJQ8gdlXQHu2ZsjDCZBzvKUU1ohh2vG8L9bBGJrzl0zxwOgoKgmbF00mu7fqM1lwI13F3Sq83s" alt="Android First" /&gt;&lt;/p&gt;&lt;h3 id="jour-2---les-conférences"&gt;Jour 2 - Les conférences&lt;/h3&gt;&lt;p&gt;Pour cette journée, j’ai assisté principalement aux conférences dans la salle principale. En commencant par “L’évolution des notifications” que nous a présentée Jérémie Martinez. Très bonne conférence qui nous a donné des astuces pour bien gérer les notifications dans nos applications comme par exemple de ne pas hésiter à utiliser les spannables dans les notifications plutôt que des customs views.&lt;/p&gt;&lt;p&gt;&lt;a href="https://speakerdeck.com/jeremiemartinez/the-evolution-of-android-notification"&gt;Les slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;La matinée continue avec une conférence sur les nouvelles fonctionnalités du design tool présentée par l’un de ses créateurs : Nicolas Roard. J’ai aussi beaucoup apprécié cette conférence, parce qu’elle nous montre à quel point Google souhaite avoir un écosystème fait pour simplifier le travail du développeur. Le tool de design va vraiment dans ce sens et les prochaines versions qui vont arriver nous promettent de bonnes évolutions comme par exemple les blocks qui sont une sorte de guideline infranchissable pour le ConstraintLayout.&lt;/p&gt;&lt;p&gt;Ensuite, j’ai assisté à une conf dont le titre est “Ivre, il commercialisa des apps Android tout seul”. Pierre Benayou nous a présenté ses échecs et espoirs dans le but de faire une application qui lui rapportera de l’argent. Cette présentation bien qu’un peu vulgaire parfois&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;“L’utilisateur est un connard” à voir &lt;a href="https://docs.google.com/presentation/d/1afPtkSb_BUtD6t61wV2eaVLVzbnYQ9D6quaFCG9D4LI/edit#slide=id.g202d152fcf_0_61"&gt;ici&lt;/a&gt;&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;nous a donné un bon ensemble de problèmes qu’un développeur qui a une idée d’application peut rencontrer dans le but d’avoir une application qui a du succés.&lt;/p&gt;&lt;p&gt;Ensuite est venue ma première grosse déception de ces deux jours, une conférence sur le paiement mobile. Sujet sur lequel je suis un peu sensibilisé, ayant travaillé plus de deux ans pour &lt;a href="https://www.ingenico.com/fr"&gt;Ingenico&lt;/a&gt;. Elle nous a été présentée par Mathieu Calba. Cette conférence était trop débutant pour m’interesser, mais ça n’est que mon avis.&lt;/p&gt;&lt;p&gt;&lt;a href="https://speakerdeck.com/mathieu_calba/streamlining-payments-on-mobile"&gt;Les slides&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Pour finir, dans les conférences classiques, j’ai suivi “How to ditch Activities and Fragments” par Fabien Devos, un sujet qui revient depuis pas mal de temps et qui interesse forcément les développeurs Android, tant le cycle de vie des Fragments combinés aux Activités est compliqué à gérer. J’ai vraiment apprécié cette conférence et je pense tester la solution OpenSource qu’il nous a proposé : &lt;a href="https://github.com/wealthfront/magellan"&gt;Magellan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Et enfin, pour conclure ces deux jours de conférences, l’OVNI Chet Haase nous a fait un show dont lui seul a le secret sur “Business &amp;amp; Technology”. Je ne peux que vous conseiller d’aller voir le replay tellement sa démonstration de pourquoi le business est lié à la technologie et inversement est indéniable.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCkatLlah5weIpN23LqMgdTg/videos"&gt;lien à venir&lt;/a&gt;&lt;/p&gt;&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;&lt;p&gt;J’ai vraiment passé deux jounées assez intéressantes, et en terme de conférences spécifiquement Android, Android Makers est un must go. Vous pouvez voir les vidéos des conférences sur le youtube d’Android Makers. Normalement toutes les conférences ont étés filmées.&lt;/p&gt;&lt;h3 id="ce-que-jai-aimé"&gt;Ce que j’ai aimé&lt;/h3&gt;&lt;ul&gt; &lt;li&gt;Trés bonne organisation (un merci aux organisateurs et sponsors)&lt;/li&gt; &lt;li&gt;De super confs, par de super speakers&lt;/li&gt; &lt;li&gt;Un super tee shirt designé par Taylor Ling&lt;/li&gt; &lt;li&gt;Retrouver les organisateurs des différents GDG de France&lt;/li&gt; &lt;li&gt;Voir autant de Toulousains présents et s’intéressant aux évolutions d’Android&lt;/li&gt; &lt;/ul&gt;&lt;h3 id="ce-que-jai-un-peu-moins-aimé"&gt;Ce que j’ai un peu moins aimé&lt;/h3&gt;&lt;p&gt;Bon c’est vraiment pour chercher la petite bête, donc messieurs les orgas, ne le prenez pas mal :D&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Ne pas avoir de temps pour souffler ou même manger entre les sessions.&lt;/li&gt; &lt;li&gt;Pas de nourriture de prévue dans le billet. Étant organisateur du Devfest Toulouse, je sais qu’il faut parfois faire des choix. J’avais qu’à lire les mails des organisateurs pour ne pas zapper le petit déj’ le premier jour.&lt;/li&gt; &lt;li&gt;La petite salle de workshop/conférence dont l’acoustique n’était pas assez bonne pour bien entendre le speaker.&lt;/li&gt; &lt;/ul&gt;&lt;h1 id="À-refaire-"&gt;À refaire ?&lt;/h1&gt;&lt;p&gt;Bien sûr! Les organisateurs nous ont déjà promis une suite pour l’année prochaine, donc si vous n’avez pas pu être présent à cette session et que vous gravitez autour du monde Android, je vous recommande chaudement de ne pas manquer la mouture 2018 de l’Android Makers.&lt;/p&gt;</content> <author> <name>Emmanuel Vinas</name> <email>emmanuel@monkeypatch.io</email> </author> <category term="Android"/> <category term="AndroidMakers"/> <summary>Retour sur l’Android Makers 2017IntroductionUn peu comme après le 1er de l’an, quand je reviens d’une conférence, j’ai généralement plein de bonnes résolutions en tête, j’ai envie d’appliquer toutes les bonnes méthodes, de tester les différentes techniques et libs qui ont été présentées. Mais cette fois, je vais commencer par faire mon retour sur ce blog pour ne rien oublier des deux jours que j’ai passé à l’Android Makers.</summary> <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://androidmakers.fr/img/sprites/logo_androidmakers.gif"/> </entry> </feed>