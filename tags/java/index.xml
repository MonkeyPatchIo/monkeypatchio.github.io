<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on MonkeyPatch</title>
    <link>https://www.monkeypatch.io/tags/java/</link>
    <description>Recent content in Java on MonkeyPatch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <lastBuildDate>Fri, 08 May 2020 01:44:26 +0200</lastBuildDate>
    
	<atom:link href="https://www.monkeypatch.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Loom - Part 4 - Non-thread-blocking async I/O</title>
      <link>https://www.monkeypatch.io/blog/2020/2020-05-08-loom-part-4-nio/</link>
      <pubDate>Fri, 08 May 2020 01:44:26 +0200</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2020/2020-05-08-loom-part-4-nio/</guid>
      <description>&lt;p&gt;Starting from where we left in the &lt;a href=&#34;../../2019/2019-12-23-loom-part-3-async&#34;&gt;previous entry&lt;/a&gt;, we can say that  &lt;code&gt;Asynchronous&lt;/code&gt; API are nice
because they don&amp;rsquo;t block the calling thread. But an asynchronous API is not a guarantee that it will not block
other underlying threads. Thus, the problem of memory footprint, context switches and cache misses of kernel
threads remains.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loom - Part 3 - Asynchronous code</title>
      <link>https://www.monkeypatch.io/blog/2019/2019-12-23-loom-part-3-async/</link>
      <pubDate>Mon, 23 Dec 2019 18:56:06 +0100</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2019/2019-12-23-loom-part-3-async/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve covered a lot of ground in the previous entries, and we concluded that blocking code &lt;em&gt;&amp;ldquo;is bad&amp;rdquo; ©&lt;/em&gt;.&lt;br /&gt;
But what can we do about it?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loom - Part 2 - Blocking code</title>
      <link>https://www.monkeypatch.io/blog/2019/2019-12-18-loom-part-2-blocking/</link>
      <pubDate>Wed, 18 Dec 2019 12:11:16 +0100</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2019/2019-12-18-loom-part-2-blocking/</guid>
      <description>&lt;p&gt;One of the biggest pain points I had learning about concurrent programming was the emphasis put on
&lt;code&gt;Blocking&lt;/code&gt;, &lt;code&gt;Non-blocking&lt;/code&gt;, &lt;code&gt;Synchronous&lt;/code&gt; and &lt;code&gt;Asynchronous&lt;/code&gt; code.&lt;br /&gt;
We&amp;rsquo;ll touch on all four in the next parts of this series.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loom - Part 1 - It&#39;s all about Scheduling</title>
      <link>https://www.monkeypatch.io/blog/2019/2019-12-14-loom-part-1-scheduling/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:37 +0100</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2019/2019-12-14-loom-part-1-scheduling/</guid>
      <description>&lt;p&gt;The first problem with concurrency (and computer science in general), is that
we&amp;rsquo;re extremely bad at naming things. We sometimes use the same word to describe several distinct concepts,
different words to describe one and only thing or even different words to describe different things but swap
meanings depending on context!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Loom - Part 0 - Rationale</title>
      <link>https://www.monkeypatch.io/blog/2019/2019-12-14-loom-part-0-rationale/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:21 +0100</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2019/2019-12-14-loom-part-0-rationale/</guid>
      <description>&lt;p&gt;Finding good introduction level articles on concurrent programming is difficult, because every post assumes
some prior knowledge. You quickly find yourself into dark corners of the Web, where people talk about lock-free
concurrency: you&amp;rsquo;re &lt;em&gt;probably&lt;/em&gt; not ready for this if you&amp;rsquo;re reading this blog!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Devoxx Belgium 2016</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-11-27-devoxx-belgium/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-11-27-devoxx-belgium/</guid>
      <description>&lt;h2 id=&#34;welcome-to-antwerp-anvers&#34;&gt;Welcome to Antwerp (Anvers)&lt;/h2&gt;

&lt;p&gt;A peine remis du &lt;a href=&#34;https://devfesttoulouse.fr/&#34;&gt;DevFest Toulouse&lt;/a&gt;, je pars une semaine en Belgique pour aller à &lt;a href=&#34;https://devoxx.be/&#34;&gt;Devoxx&lt;/a&gt;.
Pour ceux qui ne connaissent pas encore Devoxx, c’est une conférence indépendante : elle n’est organisée ni par Google ni par Oracle. Cela dit, ils étaient présents en temps que sponsors et speakers. C’est la plus grosse conférence auquelle j’ai assisté (3500 développeurs), ce n’est pas tous les jours qu’on a l’occasion de croiser des &lt;a href=&#34;http://cfp.devoxx.be/2016/speaker/brian_goetz&#34;&gt;Brian Goetz&lt;/a&gt;, &lt;a href=&#34;http://cfp.devoxx.be/2016/speaker/venkat_subramaniam&#34;&gt;Venkat Subramaniam&lt;/a&gt;, &amp;hellip; en Europe.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DevFest Toulouse 2016</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-11-06-devfest-toulouse/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-11-06-devfest-toulouse/</guid>
      <description>&lt;h1 id=&#34;retours-sur-le-devfest-toulouse&#34;&gt;Retours sur le DevFest Toulouse&lt;/h1&gt;

&lt;p&gt;Jeudi 03 novembre 2016 a eu lieu le premier DevFest Toulouse (techniquement, c’était à l’IUT Blagnac), une journée de conférence à prix très abordable (30 € seulement), le panel de speakers était assez varié: des Toulousaing, des Français, et quelques internationaux. Toutes les personnes avec qui j’ai eu l’occasion de discuter ont trouvé le niveau des conférences très bon. C’est aussi mon point de vue.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mktd#1 Feign Vs Retrofit : 2 Aller Plus Loin</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-2/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-2/</guid>
      <description>&lt;p&gt;Cet article est le deuxième d&amp;rsquo;une série de trois articles sur les clients REST en java que sont Feign et Retrofit.&lt;/p&gt;

&lt;p&gt;Article précédent :
&lt;a href=&#34;https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1/&#34;&gt;MKTD#1 : Prise en main&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;défi-2-aller-plus-loin&#34;&gt;Défi 2: Aller plus loin&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Le deuxième défi permet d’adresser des problèmes plus avancés comme :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L&amp;rsquo;authentification&lt;/li&gt;
&lt;li&gt;La gestion des erreurs via des &lt;code&gt;Exception&lt;/code&gt; Java&lt;/li&gt;
&lt;li&gt;L’&lt;em&gt;upload&lt;/em&gt; et le &lt;em&gt;download&lt;/em&gt; de fichiers&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Mktd#1 Feign Vs Retrofit : 2 Going Further</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-2-en/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-2-en/</guid>
      <description>&lt;p&gt;This article is the second of the serie REST clients in Java.&lt;/p&gt;

&lt;p&gt;Previous article:
&lt;a href=&#34;https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1-en/&#34;&gt;MKTD#1 : Getting started&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;challenge-2-going-further&#34;&gt;Challenge #2: Going further&amp;hellip;&lt;/h2&gt;

&lt;p&gt;The second challenge aims at solving advanced problems such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication and session management&lt;/li&gt;
&lt;li&gt;Errors management via Java &lt;code&gt;Exception&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Files &lt;em&gt;upload&lt;/em&gt; and &lt;em&gt;download&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Mktd#1 Feign Vs Retrofit : 1 Getting Started</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1-en/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1-en/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Early July we organised in Toulouse our first &lt;a href=&#34;http://www.monkeytechdays.com/&#34;&gt;MonkeyTechDays&lt;/a&gt; hosted by &lt;a href=&#34;http://www.harrycow.com/&#34;&gt;HarryCow&lt;/a&gt; comparing the technologies: &lt;a href=&#34;http://www.monkeytechdays.com/events/mktd-1&#34;&gt;Feign vs Retrofit&lt;/a&gt;. The goal of a MKTD is to compare and learn new technologies running challenges throughout the day.&lt;/p&gt;

&lt;p&gt;We decided to improve our knowledge of REST clients in Java during this first event. We started with &lt;a href=&#34;https://github.com/OpenFeign/feign&#34;&gt;Feign&lt;/a&gt; which is designed by &lt;a href=&#34;https://netflix.github.io/&#34;&gt;Netflix&lt;/a&gt; and &lt;a href=&#34;http://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt; written by &lt;a href=&#34;https://github.com/square&#34;&gt;Square&lt;/a&gt;. These two libraries provide an elegant way to speed up the development of REST clients in Java compare to traditional solutions such as JAX-RS clients, Spring Rest Template, etc…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mktd#1 Feign Vs Retrofit : 1 Prise En Main</title>
      <link>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.monkeypatch.io/blog/2016/2016-08-12-mktd1-feign-vs-retrofit-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Nous avons organisé à Toulouse début juillet, le premier &lt;a href=&#34;http://www.monkeytechdays.com/&#34;&gt;MonkeyTechDays&lt;/a&gt; chez &lt;a href=&#34;http://www.harrycow.com/&#34;&gt;HarryCow&lt;/a&gt; sur la thématique &lt;a href=&#34;http://www.monkeytechdays.com/events/mktd-1&#34;&gt;Feign vs Retrofit&lt;/a&gt;.
Un MKTD consiste à comparer, apprendre, sous forme de défis, une ou plusieurs technologies sur une journée.&lt;/p&gt;

&lt;p&gt;Ce premier événement était l’occasion d’approfondir les technologies de clients REST en Java. Nous avons donc étudié &lt;a href=&#34;https://github.com/OpenFeign/feign&#34;&gt;Feign&lt;/a&gt;, une librairie initiée par &lt;a href=&#34;https://netflix.github.io/&#34;&gt;Netflix&lt;/a&gt; et &lt;a href=&#34;http://square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt; qui est écrite par &lt;a href=&#34;https://github.com/square&#34;&gt;Square&lt;/a&gt;. Ces deux API permettent d’écrire des clients REST en Java de façon plus élégante qu’avec les solutions plus classiques comme JAX-RS client, Spring Rest Template, …&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>